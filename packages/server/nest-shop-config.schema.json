{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "Agent.e80544cb": {
            "description": "An `Agent` is responsible for managing connection persistence\nand reuse for HTTP clients. It maintains a queue of pending requests\nfor a given host and port, reusing a single socket connection for each\nuntil the queue is empty, at which time the socket is either destroyed\nor put into a pool where it is kept to be used again for requests to the\nsame host and port. Whether it is destroyed or pooled depends on the`keepAlive` `option`.\n\nPooled connections have TCP Keep-Alive enabled for them, but servers may\nstill close idle connections, in which case they will be removed from the\npool and a new connection will be made when a new HTTP request is made for\nthat host and port. Servers may also refuse to allow multiple requests\nover the same connection, in which case the connection will have to be\nremade for every request and cannot be pooled. The `Agent` will still make\nthe requests to that server, but each one will occur over a new connection.\n\nWhen a connection is closed by the client or the server, it is removed\nfrom the pool. Any unused sockets in the pool will be unrefed so as not\nto keep the Node.js process running when there are no outstanding requests.\n(see `socket.unref()`).\n\nIt is good practice, to `destroy()` an `Agent` instance when it is no\nlonger in use, because unused sockets consume OS resources.\n\nSockets are removed from an agent when the socket emits either\na `'close'` event or an `'agentRemove'` event. When intending to keep one\nHTTP request open for a long time without keeping it in the agent, something\nlike the following may be done:\n\n```js\nhttp.get(options, (res) => {\n  // Do stuff\n}).on('socket', (socket) => {\n  socket.emit('agentRemove');\n});\n```\n\nAn agent may also be used for an individual request. By providing`{agent: false}` as an option to the `http.get()` or `http.request()`functions, a one-time use `Agent` with default options\nwill be used\nfor the client connection.\n\n`agent:false`:\n\n```js\nhttp.get({\n  hostname: 'localhost',\n  port: 80,\n  path: '/',\n  agent: false  // Create a new agent just for this one request\n}, (res) => {\n  // Do stuff with response\n});\n```",
            "properties": {
                "freeSockets": {
                    "$ref": "#/definitions/NodeJS.ReadOnlyDict<Socket[]>.3fc5812c",
                    "description": "An object which contains arrays of sockets currently awaiting use by\nthe agent when `keepAlive` is enabled. Do not modify.\n\nSockets in the `freeSockets` list will be automatically destroyed and\nremoved from the array on `'timeout'`."
                },
                "maxFreeSockets": {
                    "description": "By default set to 256\\. For agents with `keepAlive` enabled, this\nsets the maximum number of sockets that will be left open in the free\nstate.",
                    "type": "number"
                },
                "maxSockets": {
                    "description": "By default set to `Infinity`. Determines how many concurrent sockets the agent\ncan have open per origin. Origin is the returned value of `agent.getName()`.",
                    "type": "number"
                },
                "maxTotalSockets": {
                    "description": "By default set to `Infinity`. Determines how many concurrent sockets the agent\ncan have open. Unlike `maxSockets`, this parameter applies across all origins.",
                    "type": "number"
                },
                "requests": {
                    "$ref": "#/definitions/NodeJS.ReadOnlyDict<IncomingMessage[]>.3fc5812c",
                    "description": "An object which contains queues of requests that have not yet been assigned to\nsockets. Do not modify."
                },
                "sockets": {
                    "$ref": "#/definitions/NodeJS.ReadOnlyDict<Socket[]>.3fc5812c",
                    "description": "An object which contains arrays of sockets currently in use by the\nagent. Do not modify."
                }
            },
            "type": "object"
        },
        "AgentOptions.644a6fd9": {
            "properties": {
                "keepAlive": {
                    "type": "boolean"
                },
                "keepAliveMsecs": {
                    "type": "number"
                },
                "maxFreeSockets": {
                    "type": "number"
                },
                "maxSockets": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "AgentOptions_1.cbc8987b": {
            "properties": {
                "ALPNProtocols": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "additionalProperties": false,
                                "patternProperties": {
                                    "^[0-9]+$": {
                                        "type": "number"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "An array of strings or a Buffer naming possible ALPN protocols.\n(Protocols should be ordered by their priority.)"
                },
                "SNICallback": {
                    "description": "SNICallback(servername, cb) <Function> A function that will be\ncalled if the client supports SNI TLS extension. Two arguments\nwill be passed when called: servername and cb. SNICallback should\ninvoke cb(null, ctx), where ctx is a SecureContext instance.\n(tls.createSecureContext(...) can be used to get a proper\nSecureContext.) If SNICallback wasn't provided the default callback\nwith high-level API will be used (see below).",
                    "type": "object"
                },
                "ca": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Optionally override the trusted CA certificates. Default is to trust\nthe well-known CAs curated by Mozilla. Mozilla's CAs are completely\nreplaced when CAs are explicitly specified using this option."
                },
                "cert": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Cert chains in PEM format. One cert chain should be provided per\nprivate key. Each cert chain should consist of the PEM formatted\ncertificate for a provided private key, followed by the PEM\nformatted intermediate certificates (if any), in order, and not\nincluding the root CA (the root CA must be pre-known to the peer,\nsee ca). When providing multiple cert chains, they do not have to\nbe in the same order as their private keys in key. If the\nintermediate certificates are not provided, the peer will not be\nable to validate the certificate, and the handshake will fail."
                },
                "checkServerIdentity": {
                    "description": "Verifies the certificate `cert` is issued to `hostname`.\n\nReturns [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object, populating it with `reason`, `host`, and `cert` on\nfailure. On success, returns [undefined](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type).\n\nThis function can be overwritten by providing alternative function as part of\nthe `options.checkServerIdentity` option passed to `tls.connect()`. The\noverwriting function can call `tls.checkServerIdentity()` of course, to augment\nthe checks done with additional verification.\n\nThis function is only called if the certificate passed all other checks, such as\nbeing issued by trusted CA (`options.ca`).",
                    "type": "object"
                },
                "ciphers": {
                    "description": "Cipher suite specification, replacing the default. For more\ninformation, see modifying the default cipher suite. Permitted\nciphers can be obtained via tls.getCiphers(). Cipher names must be\nuppercased in order for OpenSSL to accept them.",
                    "type": "string"
                },
                "clientCertEngine": {
                    "description": "Name of an OpenSSL engine which can provide the client certificate.",
                    "type": "string"
                },
                "crl": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "PEM formatted CRLs (Certificate Revocation Lists)."
                },
                "dhparam": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Diffie Hellman parameters, required for Perfect Forward Secrecy. Use\nopenssl dhparam to create the parameters. The key length must be\ngreater than or equal to 1024 bits or else an error will be thrown.\nAlthough 1024 bits is permissible, use 2048 bits or larger for\nstronger security. If omitted or invalid, the parameters are\nsilently discarded and DHE ciphers will not be available."
                },
                "ecdhCurve": {
                    "description": "A string describing a named curve or a colon separated list of curve\nNIDs or names, for example P-521:P-384:P-256, to use for ECDH key\nagreement. Set to auto to select the curve automatically. Use\ncrypto.getCurves() to obtain a list of available curve names. On\nrecent releases, openssl ecparam -list_curves will also display the\nname and description of each available elliptic curve. Default:\ntls.DEFAULT_ECDH_CURVE.",
                    "type": "string"
                },
                "enableTrace": {
                    "default": false,
                    "description": "When enabled, TLS packet trace information is written to `stderr`. This can be\nused to debug TLS connection problems.",
                    "type": "boolean"
                },
                "family": {
                    "type": "number"
                },
                "hints": {
                    "type": "number"
                },
                "honorCipherOrder": {
                    "description": "Attempt to use the server's cipher suite preferences instead of the\nclient's. When true, causes SSL_OP_CIPHER_SERVER_PREFERENCE to be\nset in secureOptions",
                    "type": "boolean"
                },
                "host": {
                    "type": "string"
                },
                "keepAlive": {
                    "description": "Keep sockets around in a pool to be used by other requests in the future. Default = false",
                    "type": "boolean"
                },
                "keepAliveMsecs": {
                    "description": "When using HTTP KeepAlive, how often to send TCP KeepAlive packets over sockets being kept alive. Default = 1000.\nOnly relevant if keepAlive is set to true.",
                    "type": "number"
                },
                "key": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "$ref": "#/definitions/KeyObject.c82ab212"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Private keys in PEM format. PEM allows the option of private keys\nbeing encrypted. Encrypted keys will be decrypted with\noptions.passphrase. Multiple keys using different algorithms can be\nprovided either as an array of unencrypted key strings or buffers,\nor an array of objects in the form {pem: <string|buffer>[,\npassphrase: <string>]}. The object form can only occur in an array.\nobject.passphrase is optional. Encrypted keys will be decrypted with\nobject.passphrase if provided, or options.passphrase if it is not."
                },
                "localAddress": {
                    "type": "string"
                },
                "localPort": {
                    "type": "number"
                },
                "lookup": {
                    "type": "object"
                },
                "maxCachedSessions": {
                    "type": "number"
                },
                "maxFreeSockets": {
                    "description": "Maximum number of sockets to leave open in a free state. Only relevant if keepAlive is set to true. Default = 256.",
                    "type": "number"
                },
                "maxSockets": {
                    "description": "Maximum number of sockets to allow per host. Default for Node 0.10 is 5, default for Node 0.12 is Infinity",
                    "type": "number"
                },
                "maxTotalSockets": {
                    "description": "Maximum number of sockets allowed for all hosts in total. Each request will use a new socket until the maximum is reached. Default: Infinity.",
                    "type": "number"
                },
                "maxVersion": {
                    "description": "Optionally set the maximum TLS version to allow. One\nof `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. Cannot be specified along with the\n`secureProtocol` option, use one or the other.\n**Default:** `'TLSv1.3'`, unless changed using CLI options. Using\n`--tls-max-v1.2` sets the default to `'TLSv1.2'`. Using `--tls-max-v1.3` sets the default to\n`'TLSv1.3'`. If multiple of the options are provided, the highest maximum is used.",
                    "enum": [
                        "TLSv1",
                        "TLSv1.1",
                        "TLSv1.2",
                        "TLSv1.3"
                    ],
                    "type": "string"
                },
                "minDHSize": {
                    "type": "number"
                },
                "minVersion": {
                    "description": "Optionally set the minimum TLS version to allow. One\nof `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. Cannot be specified along with the\n`secureProtocol` option, use one or the other.  It is not recommended to use\nless than TLSv1.2, but it may be required for interoperability.\n**Default:** `'TLSv1.2'`, unless changed using CLI options. Using\n`--tls-v1.0` sets the default to `'TLSv1'`. Using `--tls-v1.1` sets the default to\n`'TLSv1.1'`. Using `--tls-min-v1.3` sets the default to\n'TLSv1.3'. If multiple of the options are provided, the lowest minimum is used.",
                    "enum": [
                        "TLSv1",
                        "TLSv1.1",
                        "TLSv1.2",
                        "TLSv1.3"
                    ],
                    "type": "string"
                },
                "onread": {
                    "$ref": "#/definitions/OnReadOpts.92067c7b",
                    "description": "If specified, incoming data is stored in a single buffer and passed to the supplied callback when data arrives on the socket.\nNote: this will cause the streaming functionality to not provide any data, however events like 'error', 'end', and 'close' will\nstill be emitted as normal and methods like pause() and resume() will also behave as expected."
                },
                "passphrase": {
                    "description": "Shared passphrase used for a single private key and/or a PFX.",
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "pfx": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "$ref": "#/definitions/PxfObject.f659e6f6"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "PFX or PKCS12 encoded private key and certificate chain. pfx is an\nalternative to providing key and cert individually. PFX is usually\nencrypted, if it is, passphrase will be used to decrypt it. Multiple\nPFX can be provided either as an array of unencrypted PFX buffers,\nor an array of objects in the form {buf: <string|buffer>[,\npassphrase: <string>]}. The object form can only occur in an array.\nobject.passphrase is optional. Encrypted PFX will be decrypted with\nobject.passphrase if provided, or options.passphrase if it is not."
                },
                "port": {
                    "type": "number"
                },
                "privateKeyEngine": {
                    "description": "Name of an OpenSSL engine to get private key from. Should be used\ntogether with privateKeyIdentifier.",
                    "type": "string"
                },
                "privateKeyIdentifier": {
                    "description": "Identifier of a private key managed by an OpenSSL engine. Should be\nused together with privateKeyEngine. Should not be set together with\nkey, because both options define a private key in different ways.",
                    "type": "string"
                },
                "rejectUnauthorized": {
                    "description": "If true the server will reject any connection which is not\nauthorized with the list of supplied CAs. This option only has an\neffect if requestCert is true.",
                    "type": "boolean"
                },
                "requestCert": {
                    "description": "If true the server will request a certificate from clients that\nconnect and attempt to verify that certificate. Defaults to\nfalse.",
                    "type": "boolean"
                },
                "scheduling": {
                    "default": "`lifo`",
                    "description": "Scheduling strategy to apply when picking the next free socket to use.",
                    "enum": [
                        "fifo",
                        "lifo"
                    ],
                    "type": "string"
                },
                "secureContext": {
                    "$ref": "#/definitions/SecureContext.e8cb5ac3",
                    "description": "An optional TLS context object from tls.createSecureContext()"
                },
                "secureOptions": {
                    "description": "Optionally affect the OpenSSL protocol behavior, which is not\nusually necessary. This should be used carefully if at all! Value is\na numeric bitmask of the SSL_OP_* options from OpenSSL Options",
                    "type": "number"
                },
                "secureProtocol": {
                    "description": "Legacy mechanism to select the TLS protocol version to use, it does\nnot support independent control of the minimum and maximum version,\nand does not support limiting the protocol to TLSv1.3. Use\nminVersion and maxVersion instead. The possible values are listed as\nSSL_METHODS, use the function names as strings. For example, use\n'TLSv1_1_method' to force TLS version 1.1, or 'TLS_method' to allow\nany TLS protocol version up to TLSv1.3. It is not recommended to use\nTLS versions less than 1.2, but it may be required for\ninteroperability. Default: none, see minVersion.",
                    "type": "string"
                },
                "servername": {
                    "type": "string"
                },
                "session": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "sessionIdContext": {
                    "description": "Opaque identifier used by servers to ensure session state is not\nshared between applications. Unused by clients.",
                    "type": "string"
                },
                "sessionTimeout": {
                    "description": "The number of seconds after which a TLS session created by the\nserver will no longer be resumable. See Session Resumption for more\ninformation. Default: 300.",
                    "type": "number"
                },
                "sigalgs": {
                    "description": "Colon-separated list of supported signature algorithms. The list\ncan contain digest algorithms (SHA256, MD5 etc.), public key\nalgorithms (RSA-PSS, ECDSA etc.), combination of both (e.g\n'RSA+SHA384') or TLS v1.3 scheme names (e.g. rsa_pss_pss_sha512).",
                    "type": "string"
                },
                "socket": {
                    "$ref": "#/definitions/Socket.649d9a60"
                },
                "ticketKeys": {
                    "additionalProperties": false,
                    "description": "48-bytes of cryptographically strong pseudo-random data.\nSee Session Resumption for more information.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "timeout": {
                    "description": "Socket timeout in milliseconds. This will set the timeout after the socket is connected.",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "Agent_1.85531813": {
            "description": "An `Agent` object for HTTPS similar to `http.Agent`. See {@link request} for more information.",
            "properties": {
                "freeSockets": {
                    "$ref": "#/definitions/NodeJS.ReadOnlyDict<Socket[]>.3fc5812c",
                    "description": "An object which contains arrays of sockets currently awaiting use by\nthe agent when `keepAlive` is enabled. Do not modify.\n\nSockets in the `freeSockets` list will be automatically destroyed and\nremoved from the array on `'timeout'`."
                },
                "maxFreeSockets": {
                    "description": "By default set to 256\\. For agents with `keepAlive` enabled, this\nsets the maximum number of sockets that will be left open in the free\nstate.",
                    "type": "number"
                },
                "maxSockets": {
                    "description": "By default set to `Infinity`. Determines how many concurrent sockets the agent\ncan have open per origin. Origin is the returned value of `agent.getName()`.",
                    "type": "number"
                },
                "maxTotalSockets": {
                    "description": "By default set to `Infinity`. Determines how many concurrent sockets the agent\ncan have open. Unlike `maxSockets`, this parameter applies across all origins.",
                    "type": "number"
                },
                "options": {
                    "$ref": "#/definitions/AgentOptions_1.cbc8987b"
                },
                "requests": {
                    "$ref": "#/definitions/NodeJS.ReadOnlyDict<IncomingMessage[]>.3fc5812c",
                    "description": "An object which contains queues of requests that have not yet been assigned to\nsockets. Do not modify."
                },
                "sockets": {
                    "$ref": "#/definitions/NodeJS.ReadOnlyDict<Socket[]>.3fc5812c",
                    "description": "An object which contains arrays of sockets currently in use by the\nagent. Do not modify."
                }
            },
            "type": "object"
        },
        "ApiKeyAuth.8284a035": {
            "properties": {
                "apiKey": {
                    "anyOf": [
                        {
                            "properties": {
                                "api_key": {
                                    "type": "string"
                                },
                                "id": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "ApolloConfigInput.c1937cfd": {
            "properties": {
                "graphId": {
                    "type": "string"
                },
                "graphRef": {
                    "type": "string"
                },
                "graphVariant": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AzureActiveDirectoryAccessTokenAuthentication.5537ff98": {
            "properties": {
                "options": {
                    "properties": {
                        "token": {
                            "description": "A user need to provide `token` which they retrived else where\nto forming the connection.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": {
                    "enum": [
                        "azure-active-directory-access-token"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AzureActiveDirectoryMsiAppServiceAuthentication.de0d5e38": {
            "properties": {
                "options": {
                    "properties": {
                        "clientId": {
                            "description": "If you user want to connect to an Azure app service using a specific client account\nthey need to provide `clientId` asscoiate to their created idnetity.\n\nThis is optional for retrieve token from azure web app service",
                            "type": "string"
                        },
                        "msiEndpoint": {
                            "description": "A msi app service environment need to provide `msiEndpoint` for retriving the accesstoken.",
                            "type": "string"
                        },
                        "msiSecret": {
                            "description": "A msi app service environment need to provide `msiSecret` for retriving the accesstoken.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": {
                    "enum": [
                        "azure-active-directory-msi-app-service"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AzureActiveDirectoryMsiVmAuthentication.68712ae5": {
            "properties": {
                "options": {
                    "properties": {
                        "clientId": {
                            "description": "If you user want to connect to an Azure app service using a specific client account\nthey need to provide `clientId` asscoiate to their created idnetity.\n\nThis is optional for retrieve token from azure web app service",
                            "type": "string"
                        },
                        "msiEndpoint": {
                            "description": "A user need to provide `msiEndpoint` for retriving the accesstoken.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": {
                    "enum": [
                        "azure-active-directory-msi-vm"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AzureActiveDirectoryPasswordAuthentication.32c8401d": {
            "properties": {
                "options": {
                    "properties": {
                        "domain": {
                            "description": "Optional parameter for specific Azure tenant ID",
                            "type": "string"
                        },
                        "password": {
                            "description": "A user need to provide `password` asscoiate to their account.",
                            "type": "string"
                        },
                        "userName": {
                            "description": "A user need to provide `userName` asscoiate to their account.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": {
                    "enum": [
                        "azure-active-directory-password"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AzureActiveDirectoryServicePrincipalSecret.f15591c6": {
            "properties": {
                "options": {
                    "properties": {
                        "clientId": {
                            "description": "Application (`client`) ID from your registered Azure application",
                            "type": "string"
                        },
                        "clientSecret": {
                            "description": "The created `client secret` for this registered Azure application",
                            "type": "string"
                        },
                        "tenantId": {
                            "description": "Directory (`tenant`) ID from your registered Azure application",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": {
                    "enum": [
                        "azure-active-directory-service-principal-secret"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BasicAuth.ebc88211": {
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BearerAuth.27d1e9c3": {
            "properties": {
                "bearer": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ClientOptions.392ef7a5": {
            "properties": {
                "Connection": {
                    "properties": {
                        "prototype": {
                            "$ref": "#/definitions/default.0a1e8d5d"
                        },
                        "roles": {
                            "properties": {
                                "DATA": {
                                    "type": "string"
                                },
                                "INGEST": {
                                    "type": "string"
                                },
                                "MASTER": {
                                    "type": "string"
                                },
                                "ML": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "statuses": {
                            "properties": {
                                "ALIVE": {
                                    "type": "string"
                                },
                                "DEAD": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "ConnectionPool": {
                    "properties": {
                        "prototype": {
                            "$ref": "#/definitions/ConnectionPool.e2664093"
                        },
                        "resurrectStrategies": {
                            "properties": {
                                "none": {
                                    "type": "number"
                                },
                                "optimistic": {
                                    "type": "number"
                                },
                                "ping": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "Serializer": {
                    "properties": {
                        "prototype": {
                            "$ref": "#/definitions/default_2.0d8d187c"
                        }
                    },
                    "type": "object"
                },
                "Transport": {
                    "properties": {
                        "prototype": {
                            "$ref": "#/definitions/default_1.4288b4c4"
                        },
                        "sniffReasons": {
                            "properties": {
                                "DEFAULT": {
                                    "type": "string"
                                },
                                "SNIFF_INTERVAL": {
                                    "type": "string"
                                },
                                "SNIFF_ON_CONNECTION_FAULT": {
                                    "type": "string"
                                },
                                "SNIFF_ON_START": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "agent": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/AgentOptions.644a6fd9"
                        },
                        {
                            "enum": [
                                false
                            ],
                            "type": "boolean"
                        },
                        {
                            "type": "object"
                        }
                    ]
                },
                "auth": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ApiKeyAuth.8284a035"
                        },
                        {
                            "$ref": "#/definitions/BasicAuth.ebc88211"
                        },
                        {
                            "$ref": "#/definitions/BearerAuth.27d1e9c3"
                        }
                    ]
                },
                "caFingerprint": {
                    "type": "string"
                },
                "cloud": {
                    "properties": {
                        "id": {
                            "type": "string"
                        },
                        "password": {
                            "type": "string"
                        },
                        "username": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "compression": {
                    "enum": [
                        "gzip"
                    ],
                    "type": "string"
                },
                "context": {
                },
                "disablePrototypePoisoningProtection": {
                    "enum": [
                        "constructor",
                        false,
                        "proto",
                        true
                    ]
                },
                "enableMetaHeader": {
                    "type": "boolean"
                },
                "generateRequestId": {
                    "$ref": "#/definitions/generateRequestIdFn.dd2513c3"
                },
                "headers": {
                    "$ref": "#/definitions/Record<string,any>.6baeb16f"
                },
                "maxRetries": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "node": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "$ref": "#/definitions/NodeOptions.e90975db"
                        },
                        {
                            "items": {
                                "$ref": "#/definitions/NodeOptions.e90975db"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "nodeFilter": {
                    "$ref": "#/definitions/nodeFilterFn.b35614ff"
                },
                "nodeSelector": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/nodeSelectorFn.3f8e2d58"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "nodes": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "$ref": "#/definitions/NodeOptions.e90975db"
                        },
                        {
                            "items": {
                                "$ref": "#/definitions/NodeOptions.e90975db"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "opaqueIdPrefix": {
                    "type": "string"
                },
                "pingTimeout": {
                    "type": "number"
                },
                "proxy": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/URL.0f55bb67"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "requestTimeout": {
                    "type": "number"
                },
                "resurrectStrategy": {
                    "enum": [
                        "none",
                        "optimistic",
                        "ping"
                    ],
                    "type": "string"
                },
                "sniffEndpoint": {
                    "type": "string"
                },
                "sniffInterval": {
                    "type": [
                        "number",
                        "boolean"
                    ]
                },
                "sniffOnConnectionFault": {
                    "type": "boolean"
                },
                "sniffOnStart": {
                    "type": "boolean"
                },
                "ssl": {
                    "$ref": "#/definitions/ConnectionOptions.2e8f96cb"
                },
                "suggestCompression": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "CloudConnectionPool.ec071824": {
            "properties": {
                "Connection": {
                    "properties": {
                        "prototype": {
                            "$ref": "#/definitions/default.0a1e8d5d"
                        },
                        "roles": {
                            "properties": {
                                "DATA": {
                                    "type": "string"
                                },
                                "INGEST": {
                                    "type": "string"
                                },
                                "MASTER": {
                                    "type": "string"
                                },
                                "ML": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "statuses": {
                            "properties": {
                                "ALIVE": {
                                    "type": "string"
                                },
                                "DEAD": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "_agent": {
                    "$ref": "#/definitions/AgentOptions.644a6fd9"
                },
                "_proxy": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/URL.0f55bb67"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "_ssl": {
                    "$ref": "#/definitions/SecureContextOptions_1.fb121314"
                },
                "auth": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ApiKeyAuth.8284a035"
                        },
                        {
                            "$ref": "#/definitions/BasicAuth.ebc88211"
                        }
                    ]
                },
                "cloudConnection": {
                    "$ref": "#/definitions/default.0a1e8d5d"
                },
                "connections": {
                    "items": {
                        "$ref": "#/definitions/default.0a1e8d5d"
                    },
                    "type": "array"
                },
                "emit": {
                    "type": "object"
                },
                "size": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "CockroachConnectionCredentialsOptions.a4a36f09": {
            "description": "Cockroachdb specific connection credential options.",
            "properties": {
                "database": {
                    "description": "Database name to connect to.",
                    "type": "string"
                },
                "host": {
                    "description": "Database host.",
                    "type": "string"
                },
                "password": {
                    "description": "Database password.",
                    "type": "string"
                },
                "port": {
                    "description": "Database host port.",
                    "type": "number"
                },
                "ssl": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/TlsOptions.a939cba2"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Object with ssl parameters"
                },
                "url": {
                    "description": "Connection url where perform connection to.",
                    "type": "string"
                },
                "username": {
                    "description": "Database username.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ConnectionOptions.2e8f96cb": {
            "properties": {
                "ALPNProtocols": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "additionalProperties": false,
                                "patternProperties": {
                                    "^[0-9]+$": {
                                        "type": "number"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "An array of strings or a Buffer naming possible ALPN protocols.\n(Protocols should be ordered by their priority.)"
                },
                "SNICallback": {
                    "description": "SNICallback(servername, cb) <Function> A function that will be\ncalled if the client supports SNI TLS extension. Two arguments\nwill be passed when called: servername and cb. SNICallback should\ninvoke cb(null, ctx), where ctx is a SecureContext instance.\n(tls.createSecureContext(...) can be used to get a proper\nSecureContext.) If SNICallback wasn't provided the default callback\nwith high-level API will be used (see below).",
                    "type": "object"
                },
                "ca": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Optionally override the trusted CA certificates. Default is to trust\nthe well-known CAs curated by Mozilla. Mozilla's CAs are completely\nreplaced when CAs are explicitly specified using this option."
                },
                "cert": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Cert chains in PEM format. One cert chain should be provided per\nprivate key. Each cert chain should consist of the PEM formatted\ncertificate for a provided private key, followed by the PEM\nformatted intermediate certificates (if any), in order, and not\nincluding the root CA (the root CA must be pre-known to the peer,\nsee ca). When providing multiple cert chains, they do not have to\nbe in the same order as their private keys in key. If the\nintermediate certificates are not provided, the peer will not be\nable to validate the certificate, and the handshake will fail."
                },
                "checkServerIdentity": {
                    "description": "Verifies the certificate `cert` is issued to `hostname`.\n\nReturns [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object, populating it with `reason`, `host`, and `cert` on\nfailure. On success, returns [undefined](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type).\n\nThis function can be overwritten by providing alternative function as part of\nthe `options.checkServerIdentity` option passed to `tls.connect()`. The\noverwriting function can call `tls.checkServerIdentity()` of course, to augment\nthe checks done with additional verification.\n\nThis function is only called if the certificate passed all other checks, such as\nbeing issued by trusted CA (`options.ca`).",
                    "type": "object"
                },
                "ciphers": {
                    "description": "Cipher suite specification, replacing the default. For more\ninformation, see modifying the default cipher suite. Permitted\nciphers can be obtained via tls.getCiphers(). Cipher names must be\nuppercased in order for OpenSSL to accept them.",
                    "type": "string"
                },
                "clientCertEngine": {
                    "description": "Name of an OpenSSL engine which can provide the client certificate.",
                    "type": "string"
                },
                "crl": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "PEM formatted CRLs (Certificate Revocation Lists)."
                },
                "dhparam": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Diffie Hellman parameters, required for Perfect Forward Secrecy. Use\nopenssl dhparam to create the parameters. The key length must be\ngreater than or equal to 1024 bits or else an error will be thrown.\nAlthough 1024 bits is permissible, use 2048 bits or larger for\nstronger security. If omitted or invalid, the parameters are\nsilently discarded and DHE ciphers will not be available."
                },
                "ecdhCurve": {
                    "description": "A string describing a named curve or a colon separated list of curve\nNIDs or names, for example P-521:P-384:P-256, to use for ECDH key\nagreement. Set to auto to select the curve automatically. Use\ncrypto.getCurves() to obtain a list of available curve names. On\nrecent releases, openssl ecparam -list_curves will also display the\nname and description of each available elliptic curve. Default:\ntls.DEFAULT_ECDH_CURVE.",
                    "type": "string"
                },
                "enableTrace": {
                    "default": false,
                    "description": "When enabled, TLS packet trace information is written to `stderr`. This can be\nused to debug TLS connection problems.",
                    "type": "boolean"
                },
                "honorCipherOrder": {
                    "description": "Attempt to use the server's cipher suite preferences instead of the\nclient's. When true, causes SSL_OP_CIPHER_SERVER_PREFERENCE to be\nset in secureOptions",
                    "type": "boolean"
                },
                "host": {
                    "type": "string"
                },
                "key": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "$ref": "#/definitions/KeyObject.c82ab212"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Private keys in PEM format. PEM allows the option of private keys\nbeing encrypted. Encrypted keys will be decrypted with\noptions.passphrase. Multiple keys using different algorithms can be\nprovided either as an array of unencrypted key strings or buffers,\nor an array of objects in the form {pem: <string|buffer>[,\npassphrase: <string>]}. The object form can only occur in an array.\nobject.passphrase is optional. Encrypted keys will be decrypted with\nobject.passphrase if provided, or options.passphrase if it is not."
                },
                "lookup": {
                    "type": "object"
                },
                "maxVersion": {
                    "description": "Optionally set the maximum TLS version to allow. One\nof `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. Cannot be specified along with the\n`secureProtocol` option, use one or the other.\n**Default:** `'TLSv1.3'`, unless changed using CLI options. Using\n`--tls-max-v1.2` sets the default to `'TLSv1.2'`. Using `--tls-max-v1.3` sets the default to\n`'TLSv1.3'`. If multiple of the options are provided, the highest maximum is used.",
                    "enum": [
                        "TLSv1",
                        "TLSv1.1",
                        "TLSv1.2",
                        "TLSv1.3"
                    ],
                    "type": "string"
                },
                "minDHSize": {
                    "type": "number"
                },
                "minVersion": {
                    "description": "Optionally set the minimum TLS version to allow. One\nof `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. Cannot be specified along with the\n`secureProtocol` option, use one or the other.  It is not recommended to use\nless than TLSv1.2, but it may be required for interoperability.\n**Default:** `'TLSv1.2'`, unless changed using CLI options. Using\n`--tls-v1.0` sets the default to `'TLSv1'`. Using `--tls-v1.1` sets the default to\n`'TLSv1.1'`. Using `--tls-min-v1.3` sets the default to\n'TLSv1.3'. If multiple of the options are provided, the lowest minimum is used.",
                    "enum": [
                        "TLSv1",
                        "TLSv1.1",
                        "TLSv1.2",
                        "TLSv1.3"
                    ],
                    "type": "string"
                },
                "passphrase": {
                    "description": "Shared passphrase used for a single private key and/or a PFX.",
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "pfx": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "$ref": "#/definitions/PxfObject.f659e6f6"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "PFX or PKCS12 encoded private key and certificate chain. pfx is an\nalternative to providing key and cert individually. PFX is usually\nencrypted, if it is, passphrase will be used to decrypt it. Multiple\nPFX can be provided either as an array of unencrypted PFX buffers,\nor an array of objects in the form {buf: <string|buffer>[,\npassphrase: <string>]}. The object form can only occur in an array.\nobject.passphrase is optional. Encrypted PFX will be decrypted with\nobject.passphrase if provided, or options.passphrase if it is not."
                },
                "port": {
                    "type": "number"
                },
                "privateKeyEngine": {
                    "description": "Name of an OpenSSL engine to get private key from. Should be used\ntogether with privateKeyIdentifier.",
                    "type": "string"
                },
                "privateKeyIdentifier": {
                    "description": "Identifier of a private key managed by an OpenSSL engine. Should be\nused together with privateKeyEngine. Should not be set together with\nkey, because both options define a private key in different ways.",
                    "type": "string"
                },
                "rejectUnauthorized": {
                    "default": true,
                    "description": "If true the server will reject any connection which is not\nauthorized with the list of supplied CAs. This option only has an\neffect if requestCert is true.",
                    "type": "boolean"
                },
                "requestCert": {
                    "description": "If true the server will request a certificate from clients that\nconnect and attempt to verify that certificate. Defaults to\nfalse.",
                    "type": "boolean"
                },
                "secureContext": {
                    "$ref": "#/definitions/SecureContext.e8cb5ac3",
                    "description": "An optional TLS context object from tls.createSecureContext()"
                },
                "secureOptions": {
                    "description": "Optionally affect the OpenSSL protocol behavior, which is not\nusually necessary. This should be used carefully if at all! Value is\na numeric bitmask of the SSL_OP_* options from OpenSSL Options",
                    "type": "number"
                },
                "secureProtocol": {
                    "description": "Legacy mechanism to select the TLS protocol version to use, it does\nnot support independent control of the minimum and maximum version,\nand does not support limiting the protocol to TLSv1.3. Use\nminVersion and maxVersion instead. The possible values are listed as\nSSL_METHODS, use the function names as strings. For example, use\n'TLSv1_1_method' to force TLS version 1.1, or 'TLS_method' to allow\nany TLS protocol version up to TLSv1.3. It is not recommended to use\nTLS versions less than 1.2, but it may be required for\ninteroperability. Default: none, see minVersion.",
                    "type": "string"
                },
                "servername": {
                    "type": "string"
                },
                "session": {
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "sessionIdContext": {
                    "description": "Opaque identifier used by servers to ensure session state is not\nshared between applications. Unused by clients.",
                    "type": "string"
                },
                "sessionTimeout": {
                    "description": "The number of seconds after which a TLS session created by the\nserver will no longer be resumable. See Session Resumption for more\ninformation. Default: 300.",
                    "type": "number"
                },
                "sigalgs": {
                    "description": "Colon-separated list of supported signature algorithms. The list\ncan contain digest algorithms (SHA256, MD5 etc.), public key\nalgorithms (RSA-PSS, ECDSA etc.), combination of both (e.g\n'RSA+SHA384') or TLS v1.3 scheme names (e.g. rsa_pss_pss_sha512).",
                    "type": "string"
                },
                "socket": {
                    "$ref": "#/definitions/Socket.649d9a60"
                },
                "ticketKeys": {
                    "additionalProperties": false,
                    "description": "48-bytes of cryptographically strong pseudo-random data.\nSee Session Resumption for more information.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "timeout": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "ConnectionPool.e2664093": {
            "properties": {
                "Connection": {
                    "properties": {
                        "prototype": {
                            "$ref": "#/definitions/default.0a1e8d5d"
                        },
                        "roles": {
                            "properties": {
                                "DATA": {
                                    "type": "string"
                                },
                                "INGEST": {
                                    "type": "string"
                                },
                                "MASTER": {
                                    "type": "string"
                                },
                                "ML": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "statuses": {
                            "properties": {
                                "ALIVE": {
                                    "type": "string"
                                },
                                "DEAD": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "_agent": {
                    "$ref": "#/definitions/AgentOptions.644a6fd9"
                },
                "_proxy": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/URL.0f55bb67"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "_sniffEnabled": {
                    "type": "boolean"
                },
                "_ssl": {
                    "$ref": "#/definitions/SecureContextOptions_1.fb121314"
                },
                "auth": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ApiKeyAuth.8284a035"
                        },
                        {
                            "$ref": "#/definitions/BasicAuth.ebc88211"
                        }
                    ]
                },
                "connections": {
                    "items": {
                        "$ref": "#/definitions/default.0a1e8d5d"
                    },
                    "type": "array"
                },
                "dead": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "emit": {
                    "type": "object"
                },
                "pingTimeout": {
                    "type": "number"
                },
                "resurrectStrategy": {
                    "type": "number"
                },
                "resurrectTimeout": {
                    "type": "number"
                },
                "resurrectTimeoutCutoff": {
                    "type": "number"
                },
                "size": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "ConnectionRoles.66c9c587": {
            "properties": {
                "data": {
                    "type": "boolean"
                },
                "ingest": {
                    "type": "boolean"
                },
                "master": {
                    "type": "boolean"
                },
                "ml": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ContentSecurityPolicyOptions.ea830fd8": {
            "properties": {
                "directives": {
                    "$ref": "#/definitions/Record<string,Iterable<ContentSecurityPolicyDirectiveValue>|typeofdangerouslyDisableDefaultSrc>.6baeb16f"
                },
                "reportOnly": {
                    "type": "boolean"
                },
                "useDefaults": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "CorsOptions.feb4be84": {
            "description": "Interface describing CORS options that can be set.",
            "properties": {
                "allowedHeaders": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Configures the Access-Control-Allow-Headers CORS header."
                },
                "credentials": {
                    "description": "Configures the Access-Control-Allow-Credentials CORS header.",
                    "type": "boolean"
                },
                "exposedHeaders": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Configures the Access-Control-Expose-Headers CORS header."
                },
                "maxAge": {
                    "description": "Configures the Access-Control-Max-Age CORS header.",
                    "type": "number"
                },
                "methods": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Configures the Access-Control-Allow-Methods CORS header."
                },
                "optionsSuccessStatus": {
                    "description": "Provides a status code to use for successful OPTIONS requests.",
                    "type": "number"
                },
                "origin": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/RegExp.00b3a5e4"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "$ref": "#/definitions/RegExp.00b3a5e4"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "description": "Set origin to a function implementing some custom logic. The function takes the\nrequest origin as the first parameter and a callback (which expects the signature\nerr [object], allow [bool]) as the second.",
                            "type": "object"
                        },
                        {
                            "type": [
                                "string",
                                "boolean"
                            ]
                        }
                    ],
                    "description": "Configures the `Access-Control-Allow-Origins` CORS header.  See [here for more detail.](https://github.com/expressjs/cors#configuration-options)"
                },
                "preflightContinue": {
                    "description": "Whether to pass the CORS preflight response to the next handler.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "CorsOptionsDelegate<any>.0623a5a0": {
            "type": "object"
        },
        "CrossOriginOpenerPolicyOptions.597b47c7": {
            "properties": {
                "policy": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CrossOriginResourcePolicyOptions.e3ec7b07": {
            "properties": {
                "policy": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CursorShape.ebbbf1d7": {
            "enum": [
                "block",
                "line",
                "underline"
            ],
            "type": "string"
        },
        "DefaultAuthentication.75a6be8e": {
            "properties": {
                "options": {
                    "properties": {
                        "password": {
                            "description": "Password to use for sql server login.",
                            "type": "string"
                        },
                        "userName": {
                            "description": "User name to use for sql server login.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": {
                    "enum": [
                        "default"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DefinitionsGeneratorOptions.10bc06a5": {
            "properties": {
                "additionalHeader": {
                    "type": "string"
                },
                "customScalarTypeMapping": {
                    "$ref": "#/definitions/Record<string,string|{name:string;}>.6baeb16f"
                },
                "defaultScalarType": {
                    "type": "string"
                },
                "defaultTypeMapping": {
                    "$ref": "#/definitions/Partial<Record<\"Int\"|\"Float\"|\"String\"|\"Boolean\"|\"ID\",string>>.8fbfc2fc"
                },
                "emitTypenameField": {
                    "type": "boolean"
                },
                "enumsAsTypes": {
                    "type": "boolean"
                },
                "skipResolverArgs": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "EditorColours.1061aca2": {
            "properties": {
                "atom": {
                    "type": "string"
                },
                "attribute": {
                    "type": "string"
                },
                "builtin": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "cursorColor": {
                    "type": "string"
                },
                "def": {
                    "type": "string"
                },
                "editorBackground": {
                    "type": "string"
                },
                "keyword": {
                    "type": "string"
                },
                "leftDrawerBackground": {
                    "type": "string"
                },
                "meta": {
                    "type": "string"
                },
                "number": {
                    "type": "string"
                },
                "property": {
                    "type": "string"
                },
                "punctuation": {
                    "type": "string"
                },
                "qualifier": {
                    "type": "string"
                },
                "resultBackground": {
                    "type": "string"
                },
                "rightDrawerBackground": {
                    "type": "string"
                },
                "selection": {
                    "type": "string"
                },
                "string": {
                    "type": "string"
                },
                "string2": {
                    "type": "string"
                },
                "variable": {
                    "type": "string"
                },
                "ws": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EntitySchema<any>.d3f4cb77": {
            "description": "Interface for entity metadata mappings stored inside \"schemas\" instead of models decorated by decorators.",
            "properties": {
                "options": {
                    "$ref": "#/definitions/EntitySchemaOptions<any>.8175fc31"
                }
            },
            "type": "object"
        },
        "EntitySchemaCheckOptions.474abfd6": {
            "properties": {
                "expression": {
                    "description": "Check expression.",
                    "type": "string"
                },
                "name": {
                    "description": "Check constraint name.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EntitySchemaExclusionOptions.95e2915c": {
            "properties": {
                "expression": {
                    "description": "Exclusion expression.",
                    "type": "string"
                },
                "name": {
                    "description": "Exclusion constraint name.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EntitySchemaIndexOptions.c5ecf9c9": {
            "properties": {
                "columns": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "object"
                        }
                    ],
                    "description": "Index column names."
                },
                "fulltext": {
                    "description": "The FULLTEXT modifier indexes the entire column and does not allow prefixing.\nWorks only in MySQL.",
                    "type": "boolean"
                },
                "name": {
                    "description": "Index name.",
                    "type": "string"
                },
                "parser": {
                    "description": "Fulltext parser.\nWorks only in MySQL.",
                    "type": "string"
                },
                "sparse": {
                    "description": "If true, the index only references documents with the specified field.\nThese indexes use less space but behave differently in some situations (particularly sorts).\nThis option is only supported for mongodb database.",
                    "type": "boolean"
                },
                "spatial": {
                    "description": "The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\nWorks only in MySQL and PostgreSQL.",
                    "type": "boolean"
                },
                "synchronize": {
                    "description": "Indicates if index must sync with database index.",
                    "type": "boolean"
                },
                "unique": {
                    "description": "Indicates if this index must be unique or not.",
                    "type": "boolean"
                },
                "where": {
                    "description": "Index filter condition.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "EntitySchemaOptions<any>.8175fc31": {
            "description": "Interface for entity metadata mappings stored inside \"schemas\" instead of models decorated by decorators.",
            "properties": {
                "checks": {
                    "description": "Entity check options.",
                    "items": {
                        "$ref": "#/definitions/EntitySchemaCheckOptions.474abfd6"
                    },
                    "type": "array"
                },
                "columns": {
                    "$ref": "#/definitions/{[x:string]:EntitySchemaColumnOptions;}.79a6f9d7",
                    "description": "Entity column's options."
                },
                "database": {
                    "description": "Database name. Used in MySql and Sql Server.",
                    "type": "string"
                },
                "exclusions": {
                    "description": "Entity exclusion options.",
                    "items": {
                        "$ref": "#/definitions/EntitySchemaExclusionOptions.95e2915c"
                    },
                    "type": "array"
                },
                "expression": {
                    "description": "View expression.",
                    "type": [
                        "string",
                        "object"
                    ]
                },
                "extends": {
                    "description": "Name of the schema it extends.",
                    "type": "string"
                },
                "indices": {
                    "description": "Entity indices options.",
                    "items": {
                        "$ref": "#/definitions/EntitySchemaIndexOptions.c5ecf9c9"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "Entity name.",
                    "type": "string"
                },
                "orderBy": {
                    "additionalProperties": {
                        "anyOf": [
                            {
                                "properties": {
                                    "nulls": {
                                        "enum": [
                                            "NULLS FIRST",
                                            "NULLS LAST"
                                        ],
                                        "type": "string"
                                    },
                                    "order": {
                                        "enum": [
                                            "ASC",
                                            "DESC"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "enum": [
                                    "ASC",
                                    "DESC"
                                ],
                                "type": "string"
                            }
                        ]
                    },
                    "description": "Specifies a property name by which queries will perform ordering by default when fetching rows.",
                    "type": "object"
                },
                "relations": {
                    "$ref": "#/definitions/{[x:string]:EntitySchemaRelationOptions;}.6fe2076d",
                    "description": "Entity relation's options."
                },
                "schema": {
                    "description": "Schema name. Used in Postgres and Sql Server.",
                    "type": "string"
                },
                "synchronize": {
                    "description": "Indicates if schema synchronization is enabled or disabled for this entity.\nIf it will be set to false then schema sync will and migrations ignore this entity.\nBy default schema synchronization is enabled for all entities.",
                    "type": "boolean"
                },
                "tableName": {
                    "description": "Table name.",
                    "type": "string"
                },
                "target": {
                    "$ref": "#/definitions/Function.26fa9ff2",
                    "description": "Target bind to this entity schema. Optional."
                },
                "type": {
                    "$ref": "#/definitions/TableType.7b1aa5d7",
                    "description": "Table type."
                },
                "uniques": {
                    "description": "Entity uniques options.",
                    "items": {
                        "$ref": "#/definitions/EntitySchemaUniqueOptions.d4ccb8f1"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "EntitySchemaUniqueOptions.d4ccb8f1": {
            "properties": {
                "columns": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "object"
                        }
                    ],
                    "description": "Unique column names."
                },
                "name": {
                    "description": "Unique constraint name.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ExpectCtOptions.000d23f6": {
            "properties": {
                "enforce": {
                    "type": "boolean"
                },
                "maxAge": {
                    "type": "number"
                },
                "reportUri": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ExpressSwaggerCustomOptions.71fbed9f": {
            "properties": {
                "customCss": {
                    "type": "string"
                },
                "customCssUrl": {
                    "type": "string"
                },
                "customJs": {
                    "type": "string"
                },
                "customSiteTitle": {
                    "type": "string"
                },
                "customfavIcon": {
                    "type": "string"
                },
                "explorer": {
                    "type": "boolean"
                },
                "swaggerOptions": {
                    "$ref": "#/definitions/Record<string,any>.6baeb16f"
                },
                "swaggerUrl": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "urls": {
                    "items": {
                        "$ref": "#/definitions/Record<\"url\"|\"name\",string>.6baeb16f"
                    },
                    "type": "array"
                },
                "useGlobalPrefix": {
                    "type": "boolean"
                },
                "validatorUrl": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FastifySwaggerCustomOptions.69c23819": {
            "properties": {
                "initOAuth": {
                    "$ref": "#/definitions/Record<string,any>.6baeb16f"
                },
                "staticCSP": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Record<string,string|string[]>.6baeb16f"
                        },
                        {
                            "type": [
                                "string",
                                "boolean"
                            ]
                        }
                    ]
                },
                "transformStaticCSP": {
                    "type": "object"
                },
                "uiConfig": {
                    "$ref": "#/definitions/Partial<{deepLinking:boolean;displayOperationId:boolean;defaultModelsExpandDepth:number;defaultModelExpandDepth:number;defaultModelRendering:string;displayRequestDuration:boolean;docExpansion:string;filter:string|boolean;layout:string;maxDisplayedTags:number;showExtensions:boolean;showCommonExtensions:boolean;useUnsafeMarkdown:boolean;syntaxHighlight:false|{activate?:boolean;theme?:string;};tryItOutEnabled:boolean;validatorUrl:string;persistAuthorization:boolean;}>.8fbfc2fc"
                },
                "useGlobalPrefix": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Function.26fa9ff2": {
            "properties": {
                "arguments": {
                },
                "caller": {
                    "$ref": "#/definitions/Function.26fa9ff2"
                },
                "length": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "prototype": {
                }
            },
            "type": "object"
        },
        "GqlModuleOptions.a3cc53d4": {
            "properties": {
                "allowBatchedHttpRequests": {
                    "type": "boolean"
                },
                "apollo": {
                    "$ref": "#/definitions/ApolloConfigInput.c1937cfd"
                },
                "autoSchemaFile": {
                    "type": [
                        "string",
                        "boolean"
                    ]
                },
                "autoTransformHttpErrors": {
                    "type": "boolean"
                },
                "bodyParserConfig": {
                },
                "buildSchemaOptions": {
                    "$ref": "#/definitions/Omit<BuildSchemaOptions,\"schemaTransforms\"|\"scalarsMap\"|\"orphanedTypes\"|\"directives\">.d119172a"
                },
                "cache": {
                    "$ref": "#/definitions/KeyValueCache<string>.fc815c19"
                },
                "cors": {
                },
                "dataSources": {
                    "type": "object"
                },
                "debug": {
                    "type": "boolean"
                },
                "definitions": {
                    "allOf": [
                        {
                            "properties": {
                                "outputAs": {
                                    "enum": [
                                        "class",
                                        "interface"
                                    ],
                                    "type": "string"
                                },
                                "path": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/DefinitionsGeneratorOptions.10bc06a5"
                        }
                    ]
                },
                "directiveResolvers": {
                },
                "disableHealthCheck": {
                    "type": "boolean"
                },
                "executor": {
                    "type": "object"
                },
                "fieldResolver": {
                    "type": "object"
                },
                "fieldResolverEnhancers": {
                    "items": {
                        "enum": [
                            "filters",
                            "guards",
                            "interceptors"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "formatError": {
                    "type": "object"
                },
                "formatResponse": {
                    "type": "object"
                },
                "installSubscriptionHandlers": {
                    "type": "boolean"
                },
                "introspection": {
                    "type": "boolean"
                },
                "logger": {
                    "type": "object"
                },
                "mockEntireSchema": {
                    "type": "boolean"
                },
                "mocks": {
                    "anyOf": [
                        {
                            "additionalProperties": {
                            },
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                },
                "nodeEnv": {
                    "type": "string"
                },
                "onHealthCheck": {
                    "type": "object"
                },
                "parseOptions": {
                    "$ref": "#/definitions/ParseOptions.49987416"
                },
                "path": {
                    "type": "string"
                },
                "playground": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/RenderPageOptions.4bf3175d"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                },
                "resolverValidationOptions": {
                    "$ref": "#/definitions/IResolverValidationOptions.f8171d3f"
                },
                "rootValue": {
                },
                "schemaDirectives": {
                    "$ref": "#/definitions/Record<string,any>.6baeb16f"
                },
                "sortSchema": {
                    "type": "boolean"
                },
                "stopOnTerminationSignals": {
                    "type": "boolean"
                },
                "transformAutoSchemaFile": {
                    "type": "boolean"
                },
                "typeDefs": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "typePaths": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "useGlobalPrefix": {
                    "type": "boolean"
                },
                "validationRules": {
                    "items": {
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "HelmetOptions.7ecdff96": {
            "properties": {
                "contentSecurityPolicy": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ContentSecurityPolicyOptions.ea830fd8"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                },
                "crossOriginEmbedderPolicy": {
                    "type": "boolean"
                },
                "crossOriginOpenerPolicy": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/CrossOriginOpenerPolicyOptions.597b47c7"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                },
                "crossOriginResourcePolicy": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/CrossOriginResourcePolicyOptions.e3ec7b07"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                },
                "dnsPrefetchControl": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/XDnsPrefetchControlOptions.aa5b4553"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                },
                "expectCt": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ExpectCtOptions.000d23f6"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                },
                "frameguard": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/XFrameOptionsOptions.b0eb16b9"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                },
                "hidePoweredBy": {
                    "type": "boolean"
                },
                "hsts": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/StrictTransportSecurityOptions.b8c2e1a8"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                },
                "ieNoOpen": {
                    "type": "boolean"
                },
                "noSniff": {
                    "type": "boolean"
                },
                "originAgentCluster": {
                    "type": "boolean"
                },
                "permittedCrossDomainPolicies": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/XPermittedCrossDomainPoliciesOptions.92415afb"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                },
                "referrerPolicy": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ReferrerPolicyOptions.966fa954"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                },
                "xssFilter": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "HttpProxyAgent.d52ff670": {
            "properties": {
                "freeSockets": {
                    "$ref": "#/definitions/NodeJS.ReadOnlyDict<Socket[]>.3fc5812c",
                    "description": "An object which contains arrays of sockets currently awaiting use by\nthe agent when `keepAlive` is enabled. Do not modify.\n\nSockets in the `freeSockets` list will be automatically destroyed and\nremoved from the array on `'timeout'`."
                },
                "maxFreeSockets": {
                    "description": "By default set to 256\\. For agents with `keepAlive` enabled, this\nsets the maximum number of sockets that will be left open in the free\nstate.",
                    "type": "number"
                },
                "maxSockets": {
                    "description": "By default set to `Infinity`. Determines how many concurrent sockets the agent\ncan have open per origin. Origin is the returned value of `agent.getName()`.",
                    "type": "number"
                },
                "maxTotalSockets": {
                    "description": "By default set to `Infinity`. Determines how many concurrent sockets the agent\ncan have open. Unlike `maxSockets`, this parameter applies across all origins.",
                    "type": "number"
                },
                "requests": {
                    "$ref": "#/definitions/NodeJS.ReadOnlyDict<IncomingMessage[]>.3fc5812c",
                    "description": "An object which contains queues of requests that have not yet been assigned to\nsockets. Do not modify."
                },
                "sockets": {
                    "$ref": "#/definitions/NodeJS.ReadOnlyDict<Socket[]>.3fc5812c",
                    "description": "An object which contains arrays of sockets currently in use by the\nagent. Do not modify."
                }
            },
            "type": "object"
        },
        "HttpsOptions.018dfbe9": {
            "description": "Interface describing Https Options that can be set.",
            "properties": {
                "NPNProtocols": {
                    "description": "An array or Buffer of possible NPN protocols. (Protocols should be ordered\nby their priority)."
                },
                "SNICallback": {
                    "description": "A function that will be called if the client supports SNI TLS extension. Two\narguments will be passed when called: servername and cb. SNICallback should\ninvoke cb(null, ctx), where ctx is a SecureContext instance. (tls.createSecureContext(...)\ncan be used to get a proper SecureContext.) If SNICallback wasn't provided\nthe default callback with high-level API will be used.",
                    "type": "object"
                },
                "ca": {
                    "description": "Optionally override the trusted CA certificates. Default is to trust the well-known\nCAs curated by Mozilla. Mozilla's CAs are completely replaced when CAs are\nexplicitly specified using this option. The value can be a string or Buffer,\nor an Array of strings and/or Buffers. Any string or Buffer can contain multiple\nPEM CAs concatenated together. The peer's certificate must be chainable to\na CA trusted by the server for the connection to be authenticated. When using\ncertificates that are not chainable to a well-known CA, the certificate's CA\nmust be explicitly specified as a trusted or the connection will fail to authenticate.\nIf the peer uses a certificate that doesn't match or chain to one of the default\nCAs, use the ca option to provide a CA certificate that the peer's certificate\ncan match or chain to. For self-signed certificates, the certificate is its\nown CA, and must be provided. For PEM encoded certificates, supported types\nare \"TRUSTED CERTIFICATE\", \"X509 CERTIFICATE\", and \"CERTIFICATE\". See also tls.rootCertificates."
                },
                "cert": {
                    "description": "Cert chains in PEM format. One cert chain should be provided per private key.\nEach cert chain should consist of the PEM formatted certificate for a provided\nprivate key, followed by the PEM formatted intermediate certificates (if any),\nin order, and not including the root CA (the root CA must be pre-known to the\npeer, see ca). When providing multiple cert chains, they do not have to be\nin the same order as their private keys in key. If the intermediate certificates\nare not provided, the peer will not be able to validate the certificate, and\nthe handshake will fail."
                },
                "ciphers": {
                    "description": "Cipher suite specification, replacing the default. For more information, see\nmodifying the default cipher suite. Permitted ciphers can be obtained via tls.getCiphers().\nCipher names must be uppercased in order for OpenSSL to accept them.",
                    "type": "string"
                },
                "crl": {
                    "description": "PEM formatted CRLs (Certificate Revocation Lists)."
                },
                "honorCipherOrder": {
                    "description": "Attempt to use the server's cipher suite preferences instead of the client's.\nWhen true, causes SSL_OP_CIPHER_SERVER_PREFERENCE to be set in secureOptions,\nsee OpenSSL Options for more information.",
                    "type": "boolean"
                },
                "key": {
                    "description": "Private keys in PEM format. PEM allows the option of private keys being encrypted.\nEncrypted keys will be decrypted with options.passphrase. Multiple keys using\ndifferent algorithms can be provided either as an array of unencrypted key\nstrings or buffers, or an array of objects in the form {pem: <string|buffer>[, passphrase: <string>]}.\nThe object form can only occur in an array. object.passphrase is optional.\nEncrypted keys will be decrypted with object.passphrase if provided, or options.passphrase\nif it is not"
                },
                "passphrase": {
                    "description": "Shared passphrase used for a single private key and/or a PFX.",
                    "type": "string"
                },
                "pfx": {
                    "description": "PFX or PKCS12 encoded private key and certificate chain. pfx is an alternative\nto providing key and cert individually. PFX is usually encrypted, if it is,\npassphrase will be used to decrypt it. Multiple PFX can be provided either\nas an array of unencrypted PFX buffers, or an array of objects in the form\n{buf: <string|buffer>[, passphrase: <string>]}. The object form can only\noccur in an array. object.passphrase is optional. Encrypted PFX will be decrypted\nwith object.passphrase if provided, or options.passphrase if it is not."
                },
                "rejectUnauthorized": {
                    "description": "If not false the server will reject any connection which is not authorized\nwith the list of supplied CAs. This option only has an effect if requestCert is true. Default: true",
                    "type": "boolean"
                },
                "requestCert": {
                    "description": "If true the server will request a certificate from clients that connect and\nattempt to verify that certificate. Default: false.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "HttpsProxyAgent.260c4fdf": {
            "properties": {
                "freeSockets": {
                    "$ref": "#/definitions/NodeJS.ReadOnlyDict<Socket[]>.3fc5812c",
                    "description": "An object which contains arrays of sockets currently awaiting use by\nthe agent when `keepAlive` is enabled. Do not modify.\n\nSockets in the `freeSockets` list will be automatically destroyed and\nremoved from the array on `'timeout'`."
                },
                "maxFreeSockets": {
                    "description": "By default set to 256\\. For agents with `keepAlive` enabled, this\nsets the maximum number of sockets that will be left open in the free\nstate.",
                    "type": "number"
                },
                "maxSockets": {
                    "description": "By default set to `Infinity`. Determines how many concurrent sockets the agent\ncan have open per origin. Origin is the returned value of `agent.getName()`.",
                    "type": "number"
                },
                "maxTotalSockets": {
                    "description": "By default set to `Infinity`. Determines how many concurrent sockets the agent\ncan have open. Unlike `maxSockets`, this parameter applies across all origins.",
                    "type": "number"
                },
                "options": {
                    "$ref": "#/definitions/AgentOptions_1.cbc8987b"
                },
                "requests": {
                    "$ref": "#/definitions/NodeJS.ReadOnlyDict<IncomingMessage[]>.3fc5812c",
                    "description": "An object which contains queues of requests that have not yet been assigned to\nsockets. Do not modify."
                },
                "sockets": {
                    "$ref": "#/definitions/NodeJS.ReadOnlyDict<Socket[]>.3fc5812c",
                    "description": "An object which contains arrays of sockets currently in use by the\nagent. Do not modify."
                }
            },
            "type": "object"
        },
        "IResolverValidationOptions.f8171d3f": {
            "description": "Options for validating resolvers",
            "properties": {
                "requireResolversForAllFields": {
                    "$ref": "#/definitions/ValidatorBehavior.7f46e60e",
                    "description": "Enable to require a resolver for be defined for all fields defined\nin the schema. Defaults to `ignore`."
                },
                "requireResolversForArgs": {
                    "$ref": "#/definitions/ValidatorBehavior.7f46e60e",
                    "description": "Enable to require a resolver to be defined for any field that has\narguments. Defaults to `ignore`."
                },
                "requireResolversForNonScalar": {
                    "$ref": "#/definitions/ValidatorBehavior.7f46e60e",
                    "description": "Enable to require a resolver to be defined for any field which has\na return type that isn't a scalar. Defaults to `ignore`."
                },
                "requireResolversForResolveType": {
                    "$ref": "#/definitions/ValidatorBehavior.7f46e60e",
                    "description": "Enable to require a `resolveType()` for Interface and Union types.\nDefaults to `ignore`."
                },
                "requireResolversToMatchSchema": {
                    "$ref": "#/definitions/ValidatorBehavior.7f46e60e",
                    "description": "Enable to require all defined resolvers to match fields that\nactually exist in the schema. Defaults to `error` to catch common errors."
                }
            },
            "type": "object"
        },
        "ISettings.fdcbb4bf": {
            "properties": {
                "editor.cursorShape": {
                    "$ref": "#/definitions/CursorShape.ebbbf1d7"
                },
                "editor.fontFamily": {
                    "type": "string"
                },
                "editor.fontSize": {
                    "type": "number"
                },
                "editor.reuseHeaders": {
                    "type": "boolean"
                },
                "editor.theme": {
                    "$ref": "#/definitions/Theme.ab0ef721"
                },
                "general.betaUpdates": {
                    "type": "boolean"
                },
                "queryPlan.hideQueryPlanResponse": {
                    "type": "boolean"
                },
                "request.credentials": {
                    "type": "string"
                },
                "schema.polling.enable": {
                    "type": "boolean"
                },
                "schema.polling.endpointFilter": {
                    "type": "string"
                },
                "schema.polling.interval": {
                    "type": "number"
                },
                "tracing.hideTracingResponse": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "IntrospectionResult.8e8c7538": {
            "properties": {
                "__schema": {
                }
            },
            "type": "object"
        },
        "JwtHeader.375edd21": {
            "properties": {
                "alg": {
                    "type": "string"
                },
                "crit": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "cty": {
                    "type": "string"
                },
                "jku": {
                    "type": "string"
                },
                "kid": {
                    "type": "string"
                },
                "typ": {
                    "type": "string"
                },
                "x5c": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "x5t": {
                    "type": "string"
                },
                "x5t#S256": {
                    "type": "string"
                },
                "x5u": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "JwtModuleOptions.698577c2": {
            "properties": {
                "privateKey": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "properties": {
                                "key": {
                                    "anyOf": [
                                        {
                                            "additionalProperties": false,
                                            "patternProperties": {
                                                "^[0-9]+$": {
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "type": "string"
                                        }
                                    ]
                                },
                                "passphrase": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "publicKey": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "secret": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "secretOrKeyProvider": {
                    "type": "object"
                },
                "secretOrPrivateKey": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "properties": {
                                "key": {
                                    "anyOf": [
                                        {
                                            "additionalProperties": false,
                                            "patternProperties": {
                                                "^[0-9]+$": {
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        {
                                            "type": "string"
                                        }
                                    ]
                                },
                                "passphrase": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "signOptions": {
                    "$ref": "#/definitions/SignOptions.6ae77ece"
                },
                "verifyOptions": {
                    "$ref": "#/definitions/VerifyOptions.83626cc3"
                }
            },
            "type": "object"
        },
        "KeyObject.c82ab212": {
            "properties": {
                "passphrase": {
                    "description": "Optional passphrase.",
                    "type": "string"
                },
                "pem": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Private keys in PEM format."
                }
            },
            "type": "object"
        },
        "KeyValueCache<string>.fc815c19": {
            "type": "object"
        },
        "Logger.3fd36bab": {
            "description": "Performs logging of the events in TypeORM.",
            "type": "object"
        },
        "LoggerService.f697eb92": {
            "type": "object"
        },
        "MysqlConnectionCredentialsOptions.9c0bbb9f": {
            "description": "MySQL specific connection credential options.",
            "properties": {
                "database": {
                    "description": "Database name to connect to.",
                    "type": "string"
                },
                "host": {
                    "description": "Database host.",
                    "type": "string"
                },
                "password": {
                    "description": "Database password.",
                    "type": "string"
                },
                "port": {
                    "description": "Database host port.",
                    "type": "number"
                },
                "socketPath": {
                    "description": "Database socket path",
                    "type": "string"
                },
                "ssl": {
                    "description": "Object with ssl parameters or a string containing name of ssl profile."
                },
                "url": {
                    "description": "Connection url where perform connection to.",
                    "type": "string"
                },
                "username": {
                    "description": "Database username.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NamingStrategyInterface.a1ecc480": {
            "description": "Naming strategy defines how auto-generated names for such things like table name, or table column gonna be\ngenerated.",
            "properties": {
                "materializedPathColumnName": {
                    "description": "Column name for materialized paths.",
                    "type": "string"
                },
                "name": {
                    "description": "Naming strategy name.",
                    "type": "string"
                },
                "nestedSetColumnNames": {
                    "description": "Column names for nested sets.",
                    "properties": {
                        "left": {
                            "type": "string"
                        },
                        "right": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "NatMap.4640b982": {
            "additionalProperties": {
                "properties": {
                    "host": {
                        "type": "string"
                    },
                    "port": {
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "type": "object"
        },
        "NestApplicationOptions.cccd1327": {
            "properties": {
                "abortOnError": {
                    "default": true,
                    "description": "Whether to abort the process on Error. By default, the process is exited.\nPass `false` to override the default behavior. If `false` is passed, Nest will not exit\nthe application and instead will rethrow the exception.",
                    "type": "boolean"
                },
                "autoFlushLogs": {
                    "default": true,
                    "description": "If enabled, logs will be automatically flushed and buffer detached when\napplication initialisation process either completes or fails.",
                    "type": "boolean"
                },
                "bodyParser": {
                    "description": "Whether to use underlying platform body parser.",
                    "type": "boolean"
                },
                "bufferLogs": {
                    "default": false,
                    "description": "If enabled, logs will be buffered until the \"Logger#flush\" method is called.",
                    "type": "boolean"
                },
                "cors": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/CorsOptions.feb4be84"
                        },
                        {
                            "$ref": "#/definitions/CorsOptionsDelegate<any>.0623a5a0"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "CORS options from [CORS package](https://github.com/expressjs/cors#configuration-options)"
                },
                "httpsOptions": {
                    "$ref": "#/definitions/HttpsOptions.018dfbe9",
                    "description": "Set of configurable HTTPS options"
                },
                "logger": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/LoggerService.f697eb92"
                        },
                        {
                            "items": {
                                "enum": [
                                    "debug",
                                    "error",
                                    "log",
                                    "verbose",
                                    "warn"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "enum": [
                                false
                            ],
                            "type": "boolean"
                        }
                    ],
                    "description": "Specifies the logger to use.  Pass `false` to turn off logging."
                }
            },
            "type": "object"
        },
        "NodeJS.ReadOnlyDict<IncomingMessage[]>.3fc5812c": {
            "additionalProperties": {
                "$ref": "#/definitions/T.b6e4540a"
            },
            "type": "object"
        },
        "NodeJS.ReadOnlyDict<Socket[]>.3fc5812c": {
            "additionalProperties": {
                "$ref": "#/definitions/T.b6e4540a"
            },
            "type": "object"
        },
        "NodeOptions.e90975db": {
            "properties": {
                "agent": {
                    "$ref": "#/definitions/AgentOptions.644a6fd9"
                },
                "headers": {
                    "$ref": "#/definitions/Record<string,any>.6baeb16f"
                },
                "id": {
                    "type": "string"
                },
                "roles": {
                    "properties": {
                        "data": {
                            "type": "boolean"
                        },
                        "ingest": {
                            "type": "boolean"
                        },
                        "master": {
                            "type": "boolean"
                        },
                        "ml": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "ssl": {
                    "$ref": "#/definitions/ConnectionOptions.2e8f96cb"
                },
                "url": {
                    "$ref": "#/definitions/URL.0f55bb67"
                }
            },
            "type": "object"
        },
        "NtlmAuthentication.7f93c4a6": {
            "properties": {
                "options": {
                    "properties": {
                        "domain": {
                            "description": "Once you set domain for ntlm authentication type, driver will connect to SQL Server using domain login.\n\nThis is necessary for forming a connection using ntlm type",
                            "type": "string"
                        },
                        "password": {
                            "description": "Password from your windows account.",
                            "type": "string"
                        },
                        "userName": {
                            "description": "User name from your windows account.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": {
                    "enum": [
                        "ntlm"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Omit<BuildSchemaOptions,\"schemaTransforms\"|\"scalarsMap\"|\"orphanedTypes\"|\"directives\">.d119172a": {
            "properties": {
                "assumeValid": {
                    "description": "When building a schema from a GraphQL service's introspection result, it\nmight be safe to assume the schema is valid. Set to true to assume the\nproduced schema is valid.\n\nDefault: false",
                    "type": "boolean"
                },
                "assumeValidSDL": {
                    "description": "Set to true to assume the SDL is valid.\n\nDefault: false",
                    "type": "boolean"
                },
                "commentDescriptions": {
                    "description": "Descriptions are defined as preceding string literals, however an older\nexperimental version of the SDL supported preceding comments as\ndescriptions. Set to true to enable this deprecated behavior.\nThis option is provided to ease adoption and will be removed in v16.\n\nDefault: false",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "OnReadOpts.92067c7b": {
            "properties": {
                "buffer": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "object"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "OracleConnectionCredentialsOptions.cc63a8a0": {
            "description": "Oracle specific connection credential options.",
            "properties": {
                "connectString": {
                    "description": "Embedded TNS Connection String",
                    "type": "string"
                },
                "database": {
                    "description": "Database name to connect to.",
                    "type": "string"
                },
                "host": {
                    "description": "Database host.",
                    "type": "string"
                },
                "password": {
                    "description": "Database password.",
                    "type": "string"
                },
                "port": {
                    "description": "Database host port.",
                    "type": "number"
                },
                "serviceName": {
                    "description": "Connection Service Name.",
                    "type": "string"
                },
                "sid": {
                    "description": "Connection SID.",
                    "type": "string"
                },
                "url": {
                    "description": "Connection url where perform connection to.",
                    "type": "string"
                },
                "username": {
                    "description": "Database username.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ParseOptions.49987416": {
            "description": "Configuration options to control parser behavior",
            "properties": {
                "allowLegacySDLEmptyFields": {
                    "description": "If enabled, the parser will parse empty fields sets in the Schema\nDefinition Language. Otherwise, the parser will follow the current\nspecification.\n\nThis option is provided to ease adoption of the final SDL specification\nand will be removed in v16.",
                    "type": "boolean"
                },
                "allowLegacySDLImplementsInterfaces": {
                    "description": "If enabled, the parser will parse implemented interfaces with no `&`\ncharacter between each interface. Otherwise, the parser will follow the\ncurrent specification.\n\nThis option is provided to ease adoption of the final SDL specification\nand will be removed in v16.",
                    "type": "boolean"
                },
                "experimentalFragmentVariables": {
                    "description": "EXPERIMENTAL:\n\nIf enabled, the parser will understand and parse variable definitions\ncontained in a fragment definition. They'll be represented in the\n`variableDefinitions` field of the FragmentDefinitionNode.\n\nThe syntax is identical to normal, query-defined variables. For example:\n\n  fragment A($var: Boolean = false) on T  {\n    ...\n  }\n\nNote: this feature is experimental and may change or be removed in the\nfuture.",
                    "type": "boolean"
                },
                "noLocation": {
                    "description": "By default, the parser creates AST nodes that know the location\nin the source that they correspond to. This configuration flag\ndisables that behavior for performance or testing.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Partial<AuroraDataApiConnectionOptions>.8fbfc2fc": {
            "properties": {
                "cache": {
                    "anyOf": [
                        {
                            "properties": {
                                "alwaysEnabled": {
                                    "description": "If set to true then queries (using find methods and QueryBuilder's methods) will always be cached.",
                                    "type": "boolean"
                                },
                                "duration": {
                                    "description": "Time in milliseconds in which cache will expire.\nThis can be setup per-query.\nDefault value is 1000 which is equivalent to 1 second.",
                                    "type": "number"
                                },
                                "ignoreErrors": {
                                    "description": "Used to specify if cache errors should be ignored, and pass through the call to the Database.",
                                    "type": "boolean"
                                },
                                "options": {
                                    "description": "Used to provide redis connection options."
                                },
                                "provider": {
                                    "description": "Factory function for custom cache providers that implement QueryResultCache.",
                                    "type": "object"
                                },
                                "tableName": {
                                    "description": "Configurable table name for \"database\" type cache.\nDefault value is \"query-result-cache\"",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Type of caching.\n\n- \"database\" means cached values will be stored in the separate table in database. This is default value.\n- \"redis\" means cached values will be stored inside redis. You must provide redis connection options.",
                                    "enum": [
                                        "database",
                                        "ioredis",
                                        "ioredis/cluster",
                                        "redis"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Allows to setup cache options."
                },
                "cli": {
                    "description": "CLI settings.",
                    "properties": {
                        "entitiesDir": {
                            "description": "Directory where entities should be created by default.",
                            "type": "string"
                        },
                        "migrationsDir": {
                            "description": "Directory where migrations should be created by default.",
                            "type": "string"
                        },
                        "subscribersDir": {
                            "description": "Directory where subscribers should be created by default.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "database": {
                    "description": "Database name to connect to.",
                    "type": "string"
                },
                "driver": {
                    "description": "The driver object\nThis defaults to require(\"typeorm-aurora-data-api-driver\")"
                },
                "dropSchema": {
                    "description": "Drops the schema each time connection is being established.\nBe careful with this option and don't use this in production - otherwise you'll lose all production data.\nThis option is useful during debug and development.",
                    "type": "boolean"
                },
                "entities": {
                    "description": "Entities to be loaded for this connection.\nAccepts both entity classes and directories where from entities need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "$ref": "#/definitions/EntitySchema<any>.d3f4cb77"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "entityPrefix": {
                    "description": "Prefix to use on all tables (collections) of this connection in the database.",
                    "type": "string"
                },
                "entitySkipConstructor": {
                    "description": "When creating new Entity instances, skip all constructors when true.",
                    "type": "boolean"
                },
                "extra": {
                    "description": "Extra connection options to be passed to the underlying driver.\n\ntodo: deprecate this and move all database-specific types into hts own connection options object."
                },
                "formatOptions": {
                    "additionalProperties": {
                    },
                    "properties": {
                        "castParameters": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "host": {
                    "description": "Database host.",
                    "type": "string"
                },
                "legacySpatialSupport": {
                    "description": "Use spatial functions like GeomFromText and AsText which are removed in MySQL 8.\n(Default: true)",
                    "type": "boolean"
                },
                "logger": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Logger.3fd36bab"
                        },
                        {
                            "enum": [
                                "advanced-console",
                                "debug",
                                "file",
                                "simple-console"
                            ],
                            "type": "string"
                        }
                    ],
                    "description": "Logger instance used to log queries and events in the ORM."
                },
                "logging": {
                    "anyOf": [
                        {
                            "items": {
                                "enum": [
                                    "error",
                                    "info",
                                    "log",
                                    "migration",
                                    "query",
                                    "schema",
                                    "warn"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "enum": [
                                "all",
                                false,
                                true
                            ]
                        }
                    ],
                    "description": "Logging options."
                },
                "maxQueryExecutionTime": {
                    "description": "Maximum number of milliseconds query should be executed before logger log a warning.",
                    "type": "number"
                },
                "migrations": {
                    "description": "Migrations to be loaded for this connection.\nAccepts both migration classes and directories where from migrations need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "migrationsRun": {
                    "description": "Indicates if migrations should be auto run on every application launch.\nAlternative to it, you can use CLI and run migrations:run command.",
                    "type": "boolean"
                },
                "migrationsTableName": {
                    "description": "Migrations table name, in case of different name from \"migrations\".\nAccepts single string name.",
                    "type": "string"
                },
                "migrationsTransactionMode": {
                    "description": "Transaction mode for migrations to run in",
                    "enum": [
                        "all",
                        "each",
                        "none"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Connection name. If connection name is not given then it will be called \"default\".\nDifferent connections must have different names.",
                    "type": "string"
                },
                "namingStrategy": {
                    "$ref": "#/definitions/NamingStrategyInterface.a1ecc480",
                    "description": "Naming strategy to be used to name tables and columns in the database."
                },
                "password": {
                    "description": "Database password.",
                    "type": "string"
                },
                "port": {
                    "description": "Database host port.",
                    "type": "number"
                },
                "region": {
                    "type": "string"
                },
                "resourceArn": {
                    "type": "string"
                },
                "secretArn": {
                    "type": "string"
                },
                "serviceConfigOptions": {
                    "additionalProperties": {
                    },
                    "type": "object"
                },
                "ssl": {
                    "description": "Object with ssl parameters or a string containing name of ssl profile."
                },
                "subscribers": {
                    "description": "Subscribers to be loaded for this connection.\nAccepts both subscriber classes and directories where from subscribers need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "synchronize": {
                    "description": "Indicates if database schema should be auto created on every application launch.\nBe careful with this option and don't use this in production - otherwise you can lose production data.\nThis option is useful during debug and development.\nAlternative to it, you can use CLI and run schema:sync command.\n\nNote that for MongoDB database it does not create schema, because MongoDB is schemaless.\nInstead, it syncs just by creating indices.",
                    "type": "boolean"
                },
                "type": {
                    "description": "Database type.",
                    "enum": [
                        "aurora-data-api"
                    ],
                    "type": "string"
                },
                "url": {
                    "description": "Connection url where perform connection to.",
                    "type": "string"
                },
                "username": {
                    "description": "Database username.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Partial<AuroraDataApiPostgresConnectionOptions>.8fbfc2fc": {
            "properties": {
                "cache": {
                    "anyOf": [
                        {
                            "properties": {
                                "alwaysEnabled": {
                                    "description": "If set to true then queries (using find methods and QueryBuilder's methods) will always be cached.",
                                    "type": "boolean"
                                },
                                "duration": {
                                    "description": "Time in milliseconds in which cache will expire.\nThis can be setup per-query.\nDefault value is 1000 which is equivalent to 1 second.",
                                    "type": "number"
                                },
                                "ignoreErrors": {
                                    "description": "Used to specify if cache errors should be ignored, and pass through the call to the Database.",
                                    "type": "boolean"
                                },
                                "options": {
                                    "description": "Used to provide redis connection options."
                                },
                                "provider": {
                                    "description": "Factory function for custom cache providers that implement QueryResultCache.",
                                    "type": "object"
                                },
                                "tableName": {
                                    "description": "Configurable table name for \"database\" type cache.\nDefault value is \"query-result-cache\"",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Type of caching.\n\n- \"database\" means cached values will be stored in the separate table in database. This is default value.\n- \"redis\" means cached values will be stored inside redis. You must provide redis connection options.",
                                    "enum": [
                                        "database",
                                        "ioredis",
                                        "ioredis/cluster",
                                        "redis"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Allows to setup cache options."
                },
                "cli": {
                    "description": "CLI settings.",
                    "properties": {
                        "entitiesDir": {
                            "description": "Directory where entities should be created by default.",
                            "type": "string"
                        },
                        "migrationsDir": {
                            "description": "Directory where migrations should be created by default.",
                            "type": "string"
                        },
                        "subscribersDir": {
                            "description": "Directory where subscribers should be created by default.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "database": {
                    "type": "string"
                },
                "driver": {
                    "description": "The driver object\nThis defaults to require(\"typeorm-aurora-data-api-driver\")"
                },
                "dropSchema": {
                    "description": "Drops the schema each time connection is being established.\nBe careful with this option and don't use this in production - otherwise you'll lose all production data.\nThis option is useful during debug and development.",
                    "type": "boolean"
                },
                "entities": {
                    "description": "Entities to be loaded for this connection.\nAccepts both entity classes and directories where from entities need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "$ref": "#/definitions/EntitySchema<any>.d3f4cb77"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "entityPrefix": {
                    "description": "Prefix to use on all tables (collections) of this connection in the database.",
                    "type": "string"
                },
                "entitySkipConstructor": {
                    "description": "When creating new Entity instances, skip all constructors when true.",
                    "type": "boolean"
                },
                "extra": {
                    "description": "Extra connection options to be passed to the underlying driver.\n\ntodo: deprecate this and move all database-specific types into hts own connection options object."
                },
                "formatOptions": {
                    "additionalProperties": {
                    },
                    "properties": {
                        "castParameters": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "logger": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Logger.3fd36bab"
                        },
                        {
                            "enum": [
                                "advanced-console",
                                "debug",
                                "file",
                                "simple-console"
                            ],
                            "type": "string"
                        }
                    ],
                    "description": "Logger instance used to log queries and events in the ORM."
                },
                "logging": {
                    "anyOf": [
                        {
                            "items": {
                                "enum": [
                                    "error",
                                    "info",
                                    "log",
                                    "migration",
                                    "query",
                                    "schema",
                                    "warn"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "enum": [
                                "all",
                                false,
                                true
                            ]
                        }
                    ],
                    "description": "Logging options."
                },
                "maxQueryExecutionTime": {
                    "description": "Maximum number of milliseconds query should be executed before logger log a warning.",
                    "type": "number"
                },
                "migrations": {
                    "description": "Migrations to be loaded for this connection.\nAccepts both migration classes and directories where from migrations need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "migrationsRun": {
                    "description": "Indicates if migrations should be auto run on every application launch.\nAlternative to it, you can use CLI and run migrations:run command.",
                    "type": "boolean"
                },
                "migrationsTableName": {
                    "description": "Migrations table name, in case of different name from \"migrations\".\nAccepts single string name.",
                    "type": "string"
                },
                "migrationsTransactionMode": {
                    "description": "Transaction mode for migrations to run in",
                    "enum": [
                        "all",
                        "each",
                        "none"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Connection name. If connection name is not given then it will be called \"default\".\nDifferent connections must have different names.",
                    "type": "string"
                },
                "namingStrategy": {
                    "$ref": "#/definitions/NamingStrategyInterface.a1ecc480",
                    "description": "Naming strategy to be used to name tables and columns in the database."
                },
                "poolErrorHandler": {
                    "type": "object"
                },
                "region": {
                    "type": "string"
                },
                "resourceArn": {
                    "type": "string"
                },
                "secretArn": {
                    "type": "string"
                },
                "serviceConfigOptions": {
                    "additionalProperties": {
                    },
                    "type": "object"
                },
                "subscribers": {
                    "description": "Subscribers to be loaded for this connection.\nAccepts both subscriber classes and directories where from subscribers need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "synchronize": {
                    "description": "Indicates if database schema should be auto created on every application launch.\nBe careful with this option and don't use this in production - otherwise you can lose production data.\nThis option is useful during debug and development.\nAlternative to it, you can use CLI and run schema:sync command.\n\nNote that for MongoDB database it does not create schema, because MongoDB is schemaless.\nInstead, it syncs just by creating indices.",
                    "type": "boolean"
                },
                "transformParameters": {
                    "type": "boolean"
                },
                "type": {
                    "description": "Database type.",
                    "enum": [
                        "aurora-data-api-pg"
                    ],
                    "type": "string"
                },
                "uuidExtension": {
                    "description": "The Postgres extension to use to generate UUID columns. Defaults to uuid-ossp.\nIf pgcrypto is selected, TypeORM will use the gen_random_uuid() function from this extension.\nIf uuid-ossp is selected, TypeORM will use the uuid_generate_v4() function from this extension.",
                    "enum": [
                        "pgcrypto",
                        "uuid-ossp"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Partial<BetterSqlite3ConnectionOptions>.8fbfc2fc": {
            "properties": {
                "cache": {
                    "anyOf": [
                        {
                            "properties": {
                                "alwaysEnabled": {
                                    "description": "If set to true then queries (using find methods and QueryBuilder's methods) will always be cached.",
                                    "type": "boolean"
                                },
                                "duration": {
                                    "description": "Time in milliseconds in which cache will expire.\nThis can be setup per-query.\nDefault value is 1000 which is equivalent to 1 second.",
                                    "type": "number"
                                },
                                "ignoreErrors": {
                                    "description": "Used to specify if cache errors should be ignored, and pass through the call to the Database.",
                                    "type": "boolean"
                                },
                                "options": {
                                    "description": "Used to provide redis connection options."
                                },
                                "provider": {
                                    "description": "Factory function for custom cache providers that implement QueryResultCache.",
                                    "type": "object"
                                },
                                "tableName": {
                                    "description": "Configurable table name for \"database\" type cache.\nDefault value is \"query-result-cache\"",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Type of caching.\n\n- \"database\" means cached values will be stored in the separate table in database. This is default value.\n- \"redis\" means cached values will be stored inside redis. You must provide redis connection options.",
                                    "enum": [
                                        "database",
                                        "ioredis",
                                        "ioredis/cluster",
                                        "redis"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Allows to setup cache options."
                },
                "cli": {
                    "description": "CLI settings.",
                    "properties": {
                        "entitiesDir": {
                            "description": "Directory where entities should be created by default.",
                            "type": "string"
                        },
                        "migrationsDir": {
                            "description": "Directory where migrations should be created by default.",
                            "type": "string"
                        },
                        "subscribersDir": {
                            "description": "Directory where subscribers should be created by default.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "database": {
                    "description": "Storage type or path to the storage.",
                    "type": "string"
                },
                "driver": {
                    "description": "The driver object\nThis defaults to require(\"better-sqlite3\")"
                },
                "dropSchema": {
                    "description": "Drops the schema each time connection is being established.\nBe careful with this option and don't use this in production - otherwise you'll lose all production data.\nThis option is useful during debug and development.",
                    "type": "boolean"
                },
                "entities": {
                    "description": "Entities to be loaded for this connection.\nAccepts both entity classes and directories where from entities need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "$ref": "#/definitions/EntitySchema<any>.d3f4cb77"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "entityPrefix": {
                    "description": "Prefix to use on all tables (collections) of this connection in the database.",
                    "type": "string"
                },
                "entitySkipConstructor": {
                    "description": "When creating new Entity instances, skip all constructors when true.",
                    "type": "boolean"
                },
                "extra": {
                    "description": "Extra connection options to be passed to the underlying driver.\n\ntodo: deprecate this and move all database-specific types into hts own connection options object."
                },
                "fileMustExist": {
                    "description": "If the database does not exist, an Error will be thrown instead of creating a new file.\nThis option does not affect in-memory or readonly database connections.\nDefault: false.",
                    "type": "boolean"
                },
                "key": {
                    "description": "Encryption key for for SQLCipher.",
                    "type": "string"
                },
                "logger": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Logger.3fd36bab"
                        },
                        {
                            "enum": [
                                "advanced-console",
                                "debug",
                                "file",
                                "simple-console"
                            ],
                            "type": "string"
                        }
                    ],
                    "description": "Logger instance used to log queries and events in the ORM."
                },
                "logging": {
                    "anyOf": [
                        {
                            "items": {
                                "enum": [
                                    "error",
                                    "info",
                                    "log",
                                    "migration",
                                    "query",
                                    "schema",
                                    "warn"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "enum": [
                                "all",
                                false,
                                true
                            ]
                        }
                    ],
                    "description": "Logging options."
                },
                "maxQueryExecutionTime": {
                    "description": "Maximum number of milliseconds query should be executed before logger log a warning.",
                    "type": "number"
                },
                "migrations": {
                    "description": "Migrations to be loaded for this connection.\nAccepts both migration classes and directories where from migrations need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "migrationsRun": {
                    "description": "Indicates if migrations should be auto run on every application launch.\nAlternative to it, you can use CLI and run migrations:run command.",
                    "type": "boolean"
                },
                "migrationsTableName": {
                    "description": "Migrations table name, in case of different name from \"migrations\".\nAccepts single string name.",
                    "type": "string"
                },
                "migrationsTransactionMode": {
                    "description": "Transaction mode for migrations to run in",
                    "enum": [
                        "all",
                        "each",
                        "none"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Connection name. If connection name is not given then it will be called \"default\".\nDifferent connections must have different names.",
                    "type": "string"
                },
                "namingStrategy": {
                    "$ref": "#/definitions/NamingStrategyInterface.a1ecc480",
                    "description": "Naming strategy to be used to name tables and columns in the database."
                },
                "prepareDatabase": {
                    "description": "Function to run before a database is used in typeorm.\nYou can set pragmas, register plugins or register\nfunctions or aggregates in this function.",
                    "type": "object"
                },
                "readonly": {
                    "description": "Open the database connection in readonly mode.\nDefault: false.",
                    "type": "boolean"
                },
                "statementCacheSize": {
                    "description": "Cache size of sqlite statement to speed up queries.\nDefault: 100.",
                    "type": "number"
                },
                "subscribers": {
                    "description": "Subscribers to be loaded for this connection.\nAccepts both subscriber classes and directories where from subscribers need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "synchronize": {
                    "description": "Indicates if database schema should be auto created on every application launch.\nBe careful with this option and don't use this in production - otherwise you can lose production data.\nThis option is useful during debug and development.\nAlternative to it, you can use CLI and run schema:sync command.\n\nNote that for MongoDB database it does not create schema, because MongoDB is schemaless.\nInstead, it syncs just by creating indices.",
                    "type": "boolean"
                },
                "timeout": {
                    "description": "The number of milliseconds to wait when executing queries\non a locked database, before throwing a SQLITE_BUSY error.\nDefault: 5000.",
                    "type": "number"
                },
                "type": {
                    "description": "Database type.",
                    "enum": [
                        "better-sqlite3"
                    ],
                    "type": "string"
                },
                "verbose": {
                    "$ref": "#/definitions/Function.26fa9ff2",
                    "description": "Provide a function that gets called with every SQL string executed by the database connection."
                }
            },
            "type": "object"
        },
        "Partial<CapacitorConnectionOptions>.8fbfc2fc": {
            "properties": {
                "cache": {
                    "anyOf": [
                        {
                            "properties": {
                                "alwaysEnabled": {
                                    "description": "If set to true then queries (using find methods and QueryBuilder's methods) will always be cached.",
                                    "type": "boolean"
                                },
                                "duration": {
                                    "description": "Time in milliseconds in which cache will expire.\nThis can be setup per-query.\nDefault value is 1000 which is equivalent to 1 second.",
                                    "type": "number"
                                },
                                "ignoreErrors": {
                                    "description": "Used to specify if cache errors should be ignored, and pass through the call to the Database.",
                                    "type": "boolean"
                                },
                                "options": {
                                    "description": "Used to provide redis connection options."
                                },
                                "provider": {
                                    "description": "Factory function for custom cache providers that implement QueryResultCache.",
                                    "type": "object"
                                },
                                "tableName": {
                                    "description": "Configurable table name for \"database\" type cache.\nDefault value is \"query-result-cache\"",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Type of caching.\n\n- \"database\" means cached values will be stored in the separate table in database. This is default value.\n- \"redis\" means cached values will be stored inside redis. You must provide redis connection options.",
                                    "enum": [
                                        "database",
                                        "ioredis",
                                        "ioredis/cluster",
                                        "redis"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Allows to setup cache options."
                },
                "cli": {
                    "description": "CLI settings.",
                    "properties": {
                        "entitiesDir": {
                            "description": "Directory where entities should be created by default.",
                            "type": "string"
                        },
                        "migrationsDir": {
                            "description": "Directory where migrations should be created by default.",
                            "type": "string"
                        },
                        "subscribersDir": {
                            "description": "Directory where subscribers should be created by default.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "database": {
                    "description": "Database name (capacitor-sqlite will add the suffix `SQLite.db`)",
                    "type": "string"
                },
                "driver": {
                    "description": "The capacitor-sqlite instance. For example, `new SQLiteConnection(CapacitorSQLite)`."
                },
                "dropSchema": {
                    "description": "Drops the schema each time connection is being established.\nBe careful with this option and don't use this in production - otherwise you'll lose all production data.\nThis option is useful during debug and development.",
                    "type": "boolean"
                },
                "entities": {
                    "description": "Entities to be loaded for this connection.\nAccepts both entity classes and directories where from entities need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "$ref": "#/definitions/EntitySchema<any>.d3f4cb77"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "entityPrefix": {
                    "description": "Prefix to use on all tables (collections) of this connection in the database.",
                    "type": "string"
                },
                "entitySkipConstructor": {
                    "description": "When creating new Entity instances, skip all constructors when true.",
                    "type": "boolean"
                },
                "extra": {
                    "description": "Extra connection options to be passed to the underlying driver.\n\ntodo: deprecate this and move all database-specific types into hts own connection options object."
                },
                "journalMode": {
                    "description": "The SQLite journal mode (optional)",
                    "enum": [
                        "DELETE",
                        "MEMORY",
                        "OFF",
                        "PERSIST",
                        "TRUNCATE",
                        "WAL"
                    ],
                    "type": "string"
                },
                "logger": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Logger.3fd36bab"
                        },
                        {
                            "enum": [
                                "advanced-console",
                                "debug",
                                "file",
                                "simple-console"
                            ],
                            "type": "string"
                        }
                    ],
                    "description": "Logger instance used to log queries and events in the ORM."
                },
                "logging": {
                    "anyOf": [
                        {
                            "items": {
                                "enum": [
                                    "error",
                                    "info",
                                    "log",
                                    "migration",
                                    "query",
                                    "schema",
                                    "warn"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "enum": [
                                "all",
                                false,
                                true
                            ]
                        }
                    ],
                    "description": "Logging options."
                },
                "maxQueryExecutionTime": {
                    "description": "Maximum number of milliseconds query should be executed before logger log a warning.",
                    "type": "number"
                },
                "migrations": {
                    "description": "Migrations to be loaded for this connection.\nAccepts both migration classes and directories where from migrations need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "migrationsRun": {
                    "description": "Indicates if migrations should be auto run on every application launch.\nAlternative to it, you can use CLI and run migrations:run command.",
                    "type": "boolean"
                },
                "migrationsTableName": {
                    "description": "Migrations table name, in case of different name from \"migrations\".\nAccepts single string name.",
                    "type": "string"
                },
                "migrationsTransactionMode": {
                    "description": "Transaction mode for migrations to run in",
                    "enum": [
                        "all",
                        "each",
                        "none"
                    ],
                    "type": "string"
                },
                "mode": {
                    "description": "Set the mode for database encryption",
                    "enum": [
                        "encryption",
                        "newsecret",
                        "no-encryption",
                        "secret"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Connection name. If connection name is not given then it will be called \"default\".\nDifferent connections must have different names.",
                    "type": "string"
                },
                "namingStrategy": {
                    "$ref": "#/definitions/NamingStrategyInterface.a1ecc480",
                    "description": "Naming strategy to be used to name tables and columns in the database."
                },
                "subscribers": {
                    "description": "Subscribers to be loaded for this connection.\nAccepts both subscriber classes and directories where from subscribers need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "synchronize": {
                    "description": "Indicates if database schema should be auto created on every application launch.\nBe careful with this option and don't use this in production - otherwise you can lose production data.\nThis option is useful during debug and development.\nAlternative to it, you can use CLI and run schema:sync command.\n\nNote that for MongoDB database it does not create schema, because MongoDB is schemaless.\nInstead, it syncs just by creating indices.",
                    "type": "boolean"
                },
                "type": {
                    "description": "Database type.",
                    "enum": [
                        "capacitor"
                    ],
                    "type": "string"
                },
                "version": {
                    "description": "Database version",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "Partial<CockroachConnectionOptions>.8fbfc2fc": {
            "properties": {
                "cache": {
                    "anyOf": [
                        {
                            "properties": {
                                "alwaysEnabled": {
                                    "description": "If set to true then queries (using find methods and QueryBuilder's methods) will always be cached.",
                                    "type": "boolean"
                                },
                                "duration": {
                                    "description": "Time in milliseconds in which cache will expire.\nThis can be setup per-query.\nDefault value is 1000 which is equivalent to 1 second.",
                                    "type": "number"
                                },
                                "ignoreErrors": {
                                    "description": "Used to specify if cache errors should be ignored, and pass through the call to the Database.",
                                    "type": "boolean"
                                },
                                "options": {
                                    "description": "Used to provide redis connection options."
                                },
                                "provider": {
                                    "description": "Factory function for custom cache providers that implement QueryResultCache.",
                                    "type": "object"
                                },
                                "tableName": {
                                    "description": "Configurable table name for \"database\" type cache.\nDefault value is \"query-result-cache\"",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Type of caching.\n\n- \"database\" means cached values will be stored in the separate table in database. This is default value.\n- \"redis\" means cached values will be stored inside redis. You must provide redis connection options.",
                                    "enum": [
                                        "database",
                                        "ioredis",
                                        "ioredis/cluster",
                                        "redis"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Allows to setup cache options."
                },
                "cli": {
                    "description": "CLI settings.",
                    "properties": {
                        "entitiesDir": {
                            "description": "Directory where entities should be created by default.",
                            "type": "string"
                        },
                        "migrationsDir": {
                            "description": "Directory where migrations should be created by default.",
                            "type": "string"
                        },
                        "subscribersDir": {
                            "description": "Directory where subscribers should be created by default.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "database": {
                    "description": "Database name to connect to.",
                    "type": "string"
                },
                "driver": {
                    "description": "The driver object\nThis defaults to `require(\"pg\")`."
                },
                "dropSchema": {
                    "description": "Drops the schema each time connection is being established.\nBe careful with this option and don't use this in production - otherwise you'll lose all production data.\nThis option is useful during debug and development.",
                    "type": "boolean"
                },
                "entities": {
                    "description": "Entities to be loaded for this connection.\nAccepts both entity classes and directories where from entities need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "$ref": "#/definitions/EntitySchema<any>.d3f4cb77"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "entityPrefix": {
                    "description": "Prefix to use on all tables (collections) of this connection in the database.",
                    "type": "string"
                },
                "entitySkipConstructor": {
                    "description": "When creating new Entity instances, skip all constructors when true.",
                    "type": "boolean"
                },
                "extra": {
                    "description": "Extra connection options to be passed to the underlying driver.\n\ntodo: deprecate this and move all database-specific types into hts own connection options object."
                },
                "host": {
                    "description": "Database host.",
                    "type": "string"
                },
                "logger": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Logger.3fd36bab"
                        },
                        {
                            "enum": [
                                "advanced-console",
                                "debug",
                                "file",
                                "simple-console"
                            ],
                            "type": "string"
                        }
                    ],
                    "description": "Logger instance used to log queries and events in the ORM."
                },
                "logging": {
                    "anyOf": [
                        {
                            "items": {
                                "enum": [
                                    "error",
                                    "info",
                                    "log",
                                    "migration",
                                    "query",
                                    "schema",
                                    "warn"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "enum": [
                                "all",
                                false,
                                true
                            ]
                        }
                    ],
                    "description": "Logging options."
                },
                "maxQueryExecutionTime": {
                    "description": "Maximum number of milliseconds query should be executed before logger log a warning.",
                    "type": "number"
                },
                "migrations": {
                    "description": "Migrations to be loaded for this connection.\nAccepts both migration classes and directories where from migrations need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "migrationsRun": {
                    "description": "Indicates if migrations should be auto run on every application launch.\nAlternative to it, you can use CLI and run migrations:run command.",
                    "type": "boolean"
                },
                "migrationsTableName": {
                    "description": "Migrations table name, in case of different name from \"migrations\".\nAccepts single string name.",
                    "type": "string"
                },
                "migrationsTransactionMode": {
                    "description": "Transaction mode for migrations to run in",
                    "enum": [
                        "all",
                        "each",
                        "none"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Connection name. If connection name is not given then it will be called \"default\".\nDifferent connections must have different names.",
                    "type": "string"
                },
                "namingStrategy": {
                    "$ref": "#/definitions/NamingStrategyInterface.a1ecc480",
                    "description": "Naming strategy to be used to name tables and columns in the database."
                },
                "nativeDriver": {
                    "description": "The driver object\nThis defaults to `require(\"pg-native\")`."
                },
                "password": {
                    "description": "Database password.",
                    "type": "string"
                },
                "poolErrorHandler": {
                    "type": "object"
                },
                "port": {
                    "description": "Database host port.",
                    "type": "number"
                },
                "replication": {
                    "description": "Replication setup.",
                    "properties": {
                        "master": {
                            "$ref": "#/definitions/CockroachConnectionCredentialsOptions.a4a36f09",
                            "description": "Master server used by orm to perform writes."
                        },
                        "slaves": {
                            "description": "List of read-from severs (slaves).",
                            "items": {
                                "$ref": "#/definitions/CockroachConnectionCredentialsOptions.a4a36f09"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "schema": {
                    "description": "Schema name.",
                    "type": "string"
                },
                "ssl": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/TlsOptions.a939cba2"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Object with ssl parameters"
                },
                "subscribers": {
                    "description": "Subscribers to be loaded for this connection.\nAccepts both subscriber classes and directories where from subscribers need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "synchronize": {
                    "description": "Indicates if database schema should be auto created on every application launch.\nBe careful with this option and don't use this in production - otherwise you can lose production data.\nThis option is useful during debug and development.\nAlternative to it, you can use CLI and run schema:sync command.\n\nNote that for MongoDB database it does not create schema, because MongoDB is schemaless.\nInstead, it syncs just by creating indices.",
                    "type": "boolean"
                },
                "type": {
                    "description": "Database type.",
                    "enum": [
                        "cockroachdb"
                    ],
                    "type": "string"
                },
                "url": {
                    "description": "Connection url where perform connection to.",
                    "type": "string"
                },
                "username": {
                    "description": "Database username.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Partial<CordovaConnectionOptions>.8fbfc2fc": {
            "properties": {
                "cache": {
                    "anyOf": [
                        {
                            "properties": {
                                "alwaysEnabled": {
                                    "description": "If set to true then queries (using find methods and QueryBuilder's methods) will always be cached.",
                                    "type": "boolean"
                                },
                                "duration": {
                                    "description": "Time in milliseconds in which cache will expire.\nThis can be setup per-query.\nDefault value is 1000 which is equivalent to 1 second.",
                                    "type": "number"
                                },
                                "ignoreErrors": {
                                    "description": "Used to specify if cache errors should be ignored, and pass through the call to the Database.",
                                    "type": "boolean"
                                },
                                "options": {
                                    "description": "Used to provide redis connection options."
                                },
                                "provider": {
                                    "description": "Factory function for custom cache providers that implement QueryResultCache.",
                                    "type": "object"
                                },
                                "tableName": {
                                    "description": "Configurable table name for \"database\" type cache.\nDefault value is \"query-result-cache\"",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Type of caching.\n\n- \"database\" means cached values will be stored in the separate table in database. This is default value.\n- \"redis\" means cached values will be stored inside redis. You must provide redis connection options.",
                                    "enum": [
                                        "database",
                                        "ioredis",
                                        "ioredis/cluster",
                                        "redis"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Allows to setup cache options."
                },
                "cli": {
                    "description": "CLI settings.",
                    "properties": {
                        "entitiesDir": {
                            "description": "Directory where entities should be created by default.",
                            "type": "string"
                        },
                        "migrationsDir": {
                            "description": "Directory where migrations should be created by default.",
                            "type": "string"
                        },
                        "subscribersDir": {
                            "description": "Directory where subscribers should be created by default.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "database": {
                    "description": "Database name.",
                    "type": "string"
                },
                "driver": {
                    "description": "The driver object\nThis defaults to `window.sqlitePlugin`"
                },
                "dropSchema": {
                    "description": "Drops the schema each time connection is being established.\nBe careful with this option and don't use this in production - otherwise you'll lose all production data.\nThis option is useful during debug and development.",
                    "type": "boolean"
                },
                "entities": {
                    "description": "Entities to be loaded for this connection.\nAccepts both entity classes and directories where from entities need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "$ref": "#/definitions/EntitySchema<any>.d3f4cb77"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "entityPrefix": {
                    "description": "Prefix to use on all tables (collections) of this connection in the database.",
                    "type": "string"
                },
                "entitySkipConstructor": {
                    "description": "When creating new Entity instances, skip all constructors when true.",
                    "type": "boolean"
                },
                "extra": {
                    "description": "Extra connection options to be passed to the underlying driver.\n\ntodo: deprecate this and move all database-specific types into hts own connection options object."
                },
                "location": {
                    "description": "Storage Location",
                    "type": "string"
                },
                "logger": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Logger.3fd36bab"
                        },
                        {
                            "enum": [
                                "advanced-console",
                                "debug",
                                "file",
                                "simple-console"
                            ],
                            "type": "string"
                        }
                    ],
                    "description": "Logger instance used to log queries and events in the ORM."
                },
                "logging": {
                    "anyOf": [
                        {
                            "items": {
                                "enum": [
                                    "error",
                                    "info",
                                    "log",
                                    "migration",
                                    "query",
                                    "schema",
                                    "warn"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "enum": [
                                "all",
                                false,
                                true
                            ]
                        }
                    ],
                    "description": "Logging options."
                },
                "maxQueryExecutionTime": {
                    "description": "Maximum number of milliseconds query should be executed before logger log a warning.",
                    "type": "number"
                },
                "migrations": {
                    "description": "Migrations to be loaded for this connection.\nAccepts both migration classes and directories where from migrations need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "migrationsRun": {
                    "description": "Indicates if migrations should be auto run on every application launch.\nAlternative to it, you can use CLI and run migrations:run command.",
                    "type": "boolean"
                },
                "migrationsTableName": {
                    "description": "Migrations table name, in case of different name from \"migrations\".\nAccepts single string name.",
                    "type": "string"
                },
                "migrationsTransactionMode": {
                    "description": "Transaction mode for migrations to run in",
                    "enum": [
                        "all",
                        "each",
                        "none"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Connection name. If connection name is not given then it will be called \"default\".\nDifferent connections must have different names.",
                    "type": "string"
                },
                "namingStrategy": {
                    "$ref": "#/definitions/NamingStrategyInterface.a1ecc480",
                    "description": "Naming strategy to be used to name tables and columns in the database."
                },
                "subscribers": {
                    "description": "Subscribers to be loaded for this connection.\nAccepts both subscriber classes and directories where from subscribers need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "synchronize": {
                    "description": "Indicates if database schema should be auto created on every application launch.\nBe careful with this option and don't use this in production - otherwise you can lose production data.\nThis option is useful during debug and development.\nAlternative to it, you can use CLI and run schema:sync command.\n\nNote that for MongoDB database it does not create schema, because MongoDB is schemaless.\nInstead, it syncs just by creating indices.",
                    "type": "boolean"
                },
                "type": {
                    "description": "Database type.",
                    "enum": [
                        "cordova"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Partial<ExpoConnectionOptions>.8fbfc2fc": {
            "properties": {
                "cache": {
                    "anyOf": [
                        {
                            "properties": {
                                "alwaysEnabled": {
                                    "description": "If set to true then queries (using find methods and QueryBuilder's methods) will always be cached.",
                                    "type": "boolean"
                                },
                                "duration": {
                                    "description": "Time in milliseconds in which cache will expire.\nThis can be setup per-query.\nDefault value is 1000 which is equivalent to 1 second.",
                                    "type": "number"
                                },
                                "ignoreErrors": {
                                    "description": "Used to specify if cache errors should be ignored, and pass through the call to the Database.",
                                    "type": "boolean"
                                },
                                "options": {
                                    "description": "Used to provide redis connection options."
                                },
                                "provider": {
                                    "description": "Factory function for custom cache providers that implement QueryResultCache.",
                                    "type": "object"
                                },
                                "tableName": {
                                    "description": "Configurable table name for \"database\" type cache.\nDefault value is \"query-result-cache\"",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Type of caching.\n\n- \"database\" means cached values will be stored in the separate table in database. This is default value.\n- \"redis\" means cached values will be stored inside redis. You must provide redis connection options.",
                                    "enum": [
                                        "database",
                                        "ioredis",
                                        "ioredis/cluster",
                                        "redis"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Allows to setup cache options."
                },
                "cli": {
                    "description": "CLI settings.",
                    "properties": {
                        "entitiesDir": {
                            "description": "Directory where entities should be created by default.",
                            "type": "string"
                        },
                        "migrationsDir": {
                            "description": "Directory where migrations should be created by default.",
                            "type": "string"
                        },
                        "subscribersDir": {
                            "description": "Directory where subscribers should be created by default.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "database": {
                    "description": "Database name.",
                    "type": "string"
                },
                "driver": {
                    "description": "Driver module"
                },
                "dropSchema": {
                    "description": "Drops the schema each time connection is being established.\nBe careful with this option and don't use this in production - otherwise you'll lose all production data.\nThis option is useful during debug and development.",
                    "type": "boolean"
                },
                "entities": {
                    "description": "Entities to be loaded for this connection.\nAccepts both entity classes and directories where from entities need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "$ref": "#/definitions/EntitySchema<any>.d3f4cb77"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "entityPrefix": {
                    "description": "Prefix to use on all tables (collections) of this connection in the database.",
                    "type": "string"
                },
                "entitySkipConstructor": {
                    "description": "When creating new Entity instances, skip all constructors when true.",
                    "type": "boolean"
                },
                "extra": {
                    "description": "Extra connection options to be passed to the underlying driver.\n\ntodo: deprecate this and move all database-specific types into hts own connection options object."
                },
                "logger": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Logger.3fd36bab"
                        },
                        {
                            "enum": [
                                "advanced-console",
                                "debug",
                                "file",
                                "simple-console"
                            ],
                            "type": "string"
                        }
                    ],
                    "description": "Logger instance used to log queries and events in the ORM."
                },
                "logging": {
                    "anyOf": [
                        {
                            "items": {
                                "enum": [
                                    "error",
                                    "info",
                                    "log",
                                    "migration",
                                    "query",
                                    "schema",
                                    "warn"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "enum": [
                                "all",
                                false,
                                true
                            ]
                        }
                    ],
                    "description": "Logging options."
                },
                "maxQueryExecutionTime": {
                    "description": "Maximum number of milliseconds query should be executed before logger log a warning.",
                    "type": "number"
                },
                "migrations": {
                    "description": "Migrations to be loaded for this connection.\nAccepts both migration classes and directories where from migrations need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "migrationsRun": {
                    "description": "Indicates if migrations should be auto run on every application launch.\nAlternative to it, you can use CLI and run migrations:run command.",
                    "type": "boolean"
                },
                "migrationsTableName": {
                    "description": "Migrations table name, in case of different name from \"migrations\".\nAccepts single string name.",
                    "type": "string"
                },
                "migrationsTransactionMode": {
                    "description": "Transaction mode for migrations to run in",
                    "enum": [
                        "all",
                        "each",
                        "none"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Connection name. If connection name is not given then it will be called \"default\".\nDifferent connections must have different names.",
                    "type": "string"
                },
                "namingStrategy": {
                    "$ref": "#/definitions/NamingStrategyInterface.a1ecc480",
                    "description": "Naming strategy to be used to name tables and columns in the database."
                },
                "subscribers": {
                    "description": "Subscribers to be loaded for this connection.\nAccepts both subscriber classes and directories where from subscribers need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "synchronize": {
                    "description": "Indicates if database schema should be auto created on every application launch.\nBe careful with this option and don't use this in production - otherwise you can lose production data.\nThis option is useful during debug and development.\nAlternative to it, you can use CLI and run schema:sync command.\n\nNote that for MongoDB database it does not create schema, because MongoDB is schemaless.\nInstead, it syncs just by creating indices.",
                    "type": "boolean"
                },
                "type": {
                    "description": "Database type.",
                    "enum": [
                        "expo"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Partial<MongoConnectionOptions>.8fbfc2fc": {
            "properties": {
                "acceptableLatencyMS": {
                    "description": "Sets the range of servers to pick when using NEAREST (lowest ping ms + the latency fence, ex: range of 1 to (1 + 15) ms).\nDefault: 15",
                    "type": "number"
                },
                "appname": {
                    "description": "The name of the application that created this MongoClient instance. MongoDB 3.4 and newer will print this value in the server log upon establishing each connection. It is also recorded in the slow query log and profile collections",
                    "type": "string"
                },
                "authMechanism": {
                    "description": "Sets the authentication mechanism that MongoDB will use to authenticate the connection",
                    "type": "string"
                },
                "authSource": {
                    "description": "If the database authentication is dependent on another databaseName.",
                    "type": "string"
                },
                "autoEncryption": {
                    "description": "Automatic Client-Side Field Level Encryption configuration."
                },
                "autoReconnect": {
                    "description": "Reconnect on error. Default: true",
                    "type": "boolean"
                },
                "auto_reconnect": {
                    "description": "Enable auto reconnecting for single server instances. Default: true",
                    "type": "boolean"
                },
                "bufferMaxEntries": {
                    "description": "Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection,\ndefault is -1 which is unlimited.",
                    "type": "number"
                },
                "cache": {
                    "anyOf": [
                        {
                            "properties": {
                                "alwaysEnabled": {
                                    "description": "If set to true then queries (using find methods and QueryBuilder's methods) will always be cached.",
                                    "type": "boolean"
                                },
                                "duration": {
                                    "description": "Time in milliseconds in which cache will expire.\nThis can be setup per-query.\nDefault value is 1000 which is equivalent to 1 second.",
                                    "type": "number"
                                },
                                "ignoreErrors": {
                                    "description": "Used to specify if cache errors should be ignored, and pass through the call to the Database.",
                                    "type": "boolean"
                                },
                                "options": {
                                    "description": "Used to provide redis connection options."
                                },
                                "provider": {
                                    "description": "Factory function for custom cache providers that implement QueryResultCache.",
                                    "type": "object"
                                },
                                "tableName": {
                                    "description": "Configurable table name for \"database\" type cache.\nDefault value is \"query-result-cache\"",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Type of caching.\n\n- \"database\" means cached values will be stored in the separate table in database. This is default value.\n- \"redis\" means cached values will be stored inside redis. You must provide redis connection options.",
                                    "enum": [
                                        "database",
                                        "ioredis",
                                        "ioredis/cluster",
                                        "redis"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Allows to setup cache options."
                },
                "checkServerIdentity": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Function.26fa9ff2"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function\nDefault: true"
                },
                "cli": {
                    "description": "CLI settings.",
                    "properties": {
                        "entitiesDir": {
                            "description": "Directory where entities should be created by default.",
                            "type": "string"
                        },
                        "migrationsDir": {
                            "description": "Directory where migrations should be created by default.",
                            "type": "string"
                        },
                        "subscribersDir": {
                            "description": "Directory where subscribers should be created by default.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "compression": {
                    "description": "Type of compression to use: snappy or zlib"
                },
                "connectTimeoutMS": {
                    "description": "TCP Connection timeout setting. Default: 30000",
                    "type": "number"
                },
                "connectWithNoPrimary": {
                    "description": "Sets if the driver should connect even if no primary is available. Default: false",
                    "type": "boolean"
                },
                "database": {
                    "description": "Database name to connect to.",
                    "type": "string"
                },
                "domainsEnabled": {
                    "description": "Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit. Default: false",
                    "type": "boolean"
                },
                "driver": {
                    "description": "The driver object\nThis defaults to require(\"mongodb\")"
                },
                "dropSchema": {
                    "description": "Drops the schema each time connection is being established.\nBe careful with this option and don't use this in production - otherwise you'll lose all production data.\nThis option is useful during debug and development.",
                    "type": "boolean"
                },
                "entities": {
                    "description": "Entities to be loaded for this connection.\nAccepts both entity classes and directories where from entities need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "$ref": "#/definitions/EntitySchema<any>.d3f4cb77"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "entityPrefix": {
                    "description": "Prefix to use on all tables (collections) of this connection in the database.",
                    "type": "string"
                },
                "entitySkipConstructor": {
                    "description": "When creating new Entity instances, skip all constructors when true.",
                    "type": "boolean"
                },
                "extra": {
                    "description": "Extra connection options to be passed to the underlying driver.\n\ntodo: deprecate this and move all database-specific types into hts own connection options object."
                },
                "family": {
                    "description": "Version of IP stack. Can be 4, 6.\nIf undefined, will attempt to connect with IPv6, and will fall back to IPv4 on failure",
                    "type": "number"
                },
                "forceServerObjectId": {
                    "description": "Force server to assign _id values instead of driver. Default: false",
                    "type": "boolean"
                },
                "fsync": {
                    "description": "Specify a file sync write concern. Default: false",
                    "type": "boolean"
                },
                "ha": {
                    "description": "Control if high availability monitoring runs for Replicaset or Mongos proxies. Default true",
                    "type": "boolean"
                },
                "haInterval": {
                    "description": "The High availability period for replicaset inquiry. Default: 10000",
                    "type": "number"
                },
                "host": {
                    "description": "Database host.",
                    "type": "string"
                },
                "hostReplicaSet": {
                    "description": "Database host replica set.",
                    "type": "string"
                },
                "ignoreUndefined": {
                    "description": "Specify if the BSON serializer should ignore undefined fields. Default: false",
                    "type": "boolean"
                },
                "j": {
                    "description": "Specify a journal write concern. Default: false",
                    "type": "boolean"
                },
                "keepAlive": {
                    "description": "The number of milliseconds to wait before initiating keepAlive on the TCP socket. Default: 30000",
                    "type": "number"
                },
                "logger": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Logger.3fd36bab"
                        },
                        {
                            "enum": [
                                "advanced-console",
                                "debug",
                                "file",
                                "simple-console"
                            ],
                            "type": "string"
                        }
                    ],
                    "description": "Logger instance used to log queries and events in the ORM."
                },
                "loggerLevel": {
                    "description": "Specify the log level used by the driver logger (error/warn/info/debug).",
                    "enum": [
                        "debug",
                        "error",
                        "info",
                        "warn"
                    ],
                    "type": "string"
                },
                "logging": {
                    "anyOf": [
                        {
                            "items": {
                                "enum": [
                                    "error",
                                    "info",
                                    "log",
                                    "migration",
                                    "query",
                                    "schema",
                                    "warn"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "enum": [
                                "all",
                                false,
                                true
                            ]
                        }
                    ],
                    "description": "Logging options."
                },
                "maxQueryExecutionTime": {
                    "description": "Maximum number of milliseconds query should be executed before logger log a warning.",
                    "type": "number"
                },
                "maxStalenessSeconds": {
                    "description": "Specify a maxStalenessSeconds value for secondary reads, minimum is 90 seconds",
                    "type": "number"
                },
                "migrations": {
                    "description": "Migrations to be loaded for this connection.\nAccepts both migration classes and directories where from migrations need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "migrationsRun": {
                    "description": "Indicates if migrations should be auto run on every application launch.\nAlternative to it, you can use CLI and run migrations:run command.",
                    "type": "boolean"
                },
                "migrationsTableName": {
                    "description": "Migrations table name, in case of different name from \"migrations\".\nAccepts single string name.",
                    "type": "string"
                },
                "migrationsTransactionMode": {
                    "description": "Transaction mode for migrations to run in",
                    "enum": [
                        "all",
                        "each",
                        "none"
                    ],
                    "type": "string"
                },
                "minSize": {
                    "description": "If present, the connection pool will be initialized with minSize connections, and will never dip below minSize connections",
                    "type": "number"
                },
                "monitorCommands": {
                    "description": "Enable command monitoring for this client. Default: false",
                    "type": "boolean"
                },
                "name": {
                    "description": "Connection name. If connection name is not given then it will be called \"default\".\nDifferent connections must have different names.",
                    "type": "string"
                },
                "namingStrategy": {
                    "$ref": "#/definitions/NamingStrategyInterface.a1ecc480",
                    "description": "Naming strategy to be used to name tables and columns in the database."
                },
                "noDelay": {
                    "description": "TCP Socket NoDelay option. Default: true",
                    "type": "boolean"
                },
                "numberOfRetries": {
                    "description": "The number of retries for a tailable cursor. Default: 5",
                    "type": "number"
                },
                "password": {
                    "description": "Database password.",
                    "type": "string"
                },
                "pkFactory": {
                    "description": "A primary key factory object for generation of custom _id keys."
                },
                "poolSize": {
                    "description": "Set the maximum poolSize for each individual server or proxy connection.",
                    "type": "number"
                },
                "port": {
                    "description": "Database host port.",
                    "type": "number"
                },
                "promiseLibrary": {
                    "description": "A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible."
                },
                "promoteBuffers": {
                    "description": "Promotes Binary BSON values to native Node Buffers. Default: false",
                    "type": "boolean"
                },
                "promoteLongs": {
                    "description": "Promotes Long values to number if they fit inside the 53 bits resolution. Default: true",
                    "type": "boolean"
                },
                "promoteValues": {
                    "description": "Promotes BSON values to native types where possible, set to false to only receive wrapper types. Default: true",
                    "type": "boolean"
                },
                "raw": {
                    "description": "Return document results as raw BSON buffers. Default: false",
                    "type": "boolean"
                },
                "readConcern": {
                    "description": "Specify a read concern for the collection. (only MongoDB 3.2 or higher supported)."
                },
                "readPreference": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ReadPreference.2798f9a5"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY,\nReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST)."
                },
                "readPreferenceTags": {
                    "description": "Read preference tags",
                    "items": {
                    },
                    "type": "array"
                },
                "reconnectInterval": {
                    "description": "Server will wait #milliseconds between retries. Default 1000",
                    "type": "number"
                },
                "reconnectTries": {
                    "description": "Server attempt to reconnect #times. Default 30",
                    "type": "number"
                },
                "replicaSet": {
                    "description": "The name of the replicaset to connect to",
                    "type": "string"
                },
                "retryWrites": {
                    "description": "Enables or disables the ability to retry writes upon encountering transient network errors.",
                    "type": "boolean"
                },
                "secondaryAcceptableLatencyMS": {
                    "description": "Sets the range of servers to pick when using NEAREST (lowest ping ms + the latency fence, ex: range of 1 to (1 + 15) ms).\nDefault: 15",
                    "type": "number"
                },
                "serializeFunctions": {
                    "description": "Serialize functions on any object. Default: false",
                    "type": "boolean"
                },
                "socketTimeoutMS": {
                    "description": "TCP Socket timeout setting. Default: 360000",
                    "type": "number"
                },
                "ssl": {
                    "description": "Use ssl connection (needs to have a mongod server with ssl support). Default: false",
                    "type": "boolean"
                },
                "sslCA": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "items": {
                                "additionalProperties": false,
                                "patternProperties": {
                                    "^[0-9]+$": {
                                        "type": "number"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Array of valid certificates either as Buffers or Strings\n(needs to have a mongod server with ssl support, 2.4 or higher)."
                },
                "sslCRL": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "SSL Certificate revocation list binary buffer\n(needs to have a mongod server with ssl support, 2.4 or higher)"
                },
                "sslCert": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "String or buffer containing the certificate we wish to present\n(needs to have a mongod server with ssl support, 2.4 or higher)"
                },
                "sslKey": {
                    "description": "String or buffer containing the certificate private key we wish to present\n(needs to have a mongod server with ssl support, 2.4 or higher)",
                    "type": "string"
                },
                "sslPass": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "String or buffer containing the certificate password\n(needs to have a mongod server with ssl support, 2.4 or higher)"
                },
                "sslValidate": {
                    "description": "Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher).\nDefault: true",
                    "type": "boolean"
                },
                "subscribers": {
                    "description": "Subscribers to be loaded for this connection.\nAccepts both subscriber classes and directories where from subscribers need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "synchronize": {
                    "description": "Indicates if database schema should be auto created on every application launch.\nBe careful with this option and don't use this in production - otherwise you can lose production data.\nThis option is useful during debug and development.\nAlternative to it, you can use CLI and run schema:sync command.\n\nNote that for MongoDB database it does not create schema, because MongoDB is schemaless.\nInstead, it syncs just by creating indices.",
                    "type": "boolean"
                },
                "type": {
                    "description": "Database type.",
                    "enum": [
                        "mongodb"
                    ],
                    "type": "string"
                },
                "url": {
                    "description": "Connection url where perform connection to.",
                    "type": "string"
                },
                "useNewUrlParser": {
                    "description": "Determines whether or not to use the new url parser. Default: false",
                    "type": "boolean"
                },
                "useUnifiedTopology": {
                    "description": "Determines whether or not to use the new Server Discovery and Monitoring engine. Default: false\nhttps://github.com/mongodb/node-mongodb-native/releases/tag/v3.2.1",
                    "type": "boolean"
                },
                "username": {
                    "description": "Database username.",
                    "type": "string"
                },
                "validateOptions": {
                    "description": "Validate MongoClient passed in options for correctness. Default: false"
                },
                "w": {
                    "description": "The write concern.",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "wtimeout": {
                    "description": "The write concern timeout value.",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "Partial<MysqlConnectionOptions>.8fbfc2fc": {
            "properties": {
                "acquireTimeout": {
                    "description": "The milliseconds before a timeout occurs during the initial connection to the MySQL server. (Default: 10000)\nThis difference between connectTimeout and acquireTimeout is subtle and is described in the mysqljs/mysql docs\nhttps://github.com/mysqljs/mysql/tree/master#pool-options",
                    "type": "number"
                },
                "bigNumberStrings": {
                    "description": "Enabling both supportBigNumbers and bigNumberStrings forces big numbers (BIGINT and DECIMAL columns) to be always\nreturned as JavaScript String objects (Default: false). Enabling supportBigNumbers but leaving bigNumberStrings\ndisabled will return big numbers as String objects only when they cannot be accurately represented with\n[JavaScript Number objects](http://ecma262-5.com/ELS5_HTML.htm#Section_8.5) (which happens when they exceed the [-2^53, +2^53] range),\notherwise they will be returned as Number objects. This option is ignored if supportBigNumbers is disabled.",
                    "type": "boolean"
                },
                "cache": {
                    "anyOf": [
                        {
                            "properties": {
                                "alwaysEnabled": {
                                    "description": "If set to true then queries (using find methods and QueryBuilder's methods) will always be cached.",
                                    "type": "boolean"
                                },
                                "duration": {
                                    "description": "Time in milliseconds in which cache will expire.\nThis can be setup per-query.\nDefault value is 1000 which is equivalent to 1 second.",
                                    "type": "number"
                                },
                                "ignoreErrors": {
                                    "description": "Used to specify if cache errors should be ignored, and pass through the call to the Database.",
                                    "type": "boolean"
                                },
                                "options": {
                                    "description": "Used to provide redis connection options."
                                },
                                "provider": {
                                    "description": "Factory function for custom cache providers that implement QueryResultCache.",
                                    "type": "object"
                                },
                                "tableName": {
                                    "description": "Configurable table name for \"database\" type cache.\nDefault value is \"query-result-cache\"",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Type of caching.\n\n- \"database\" means cached values will be stored in the separate table in database. This is default value.\n- \"redis\" means cached values will be stored inside redis. You must provide redis connection options.",
                                    "enum": [
                                        "database",
                                        "ioredis",
                                        "ioredis/cluster",
                                        "redis"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Allows to setup cache options."
                },
                "charset": {
                    "description": "The charset for the connection. This is called \"collation\" in the SQL-level of MySQL (like utf8_general_ci).\nIf a SQL-level charset is specified (like utf8mb4) then the default collation for that charset is used.\nDefault: 'UTF8_GENERAL_CI'",
                    "type": "string"
                },
                "cli": {
                    "description": "CLI settings.",
                    "properties": {
                        "entitiesDir": {
                            "description": "Directory where entities should be created by default.",
                            "type": "string"
                        },
                        "migrationsDir": {
                            "description": "Directory where migrations should be created by default.",
                            "type": "string"
                        },
                        "subscribersDir": {
                            "description": "Directory where subscribers should be created by default.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "connectTimeout": {
                    "description": "The milliseconds before a timeout occurs during the initial connection to the MySQL server. (Default: 10000)",
                    "type": "number"
                },
                "database": {
                    "description": "Database name to connect to.",
                    "type": "string"
                },
                "dateStrings": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Force date types (TIMESTAMP, DATETIME, DATE) to be returned as strings rather then inflated into JavaScript Date objects.\nCan be true/false or an array of type names to keep as strings."
                },
                "debug": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Prints protocol details to stdout. Can be true/false or an array of packet type names that should be printed.\n(Default: false)"
                },
                "driver": {
                    "description": "The driver object\nThis defaults to require(\"mysql\").\nFalls back to require(\"mysql2\")"
                },
                "dropSchema": {
                    "description": "Drops the schema each time connection is being established.\nBe careful with this option and don't use this in production - otherwise you'll lose all production data.\nThis option is useful during debug and development.",
                    "type": "boolean"
                },
                "entities": {
                    "description": "Entities to be loaded for this connection.\nAccepts both entity classes and directories where from entities need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "$ref": "#/definitions/EntitySchema<any>.d3f4cb77"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "entityPrefix": {
                    "description": "Prefix to use on all tables (collections) of this connection in the database.",
                    "type": "string"
                },
                "entitySkipConstructor": {
                    "description": "When creating new Entity instances, skip all constructors when true.",
                    "type": "boolean"
                },
                "extra": {
                    "description": "Extra connection options to be passed to the underlying driver.\n\ntodo: deprecate this and move all database-specific types into hts own connection options object."
                },
                "flags": {
                    "description": "List of connection flags to use other than the default ones. It is also possible to blacklist default ones.\nFor more information, check https://github.com/mysqljs/mysql#connection-flags.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "host": {
                    "description": "Database host.",
                    "type": "string"
                },
                "insecureAuth": {
                    "description": "Allow connecting to MySQL instances that ask for the old (insecure) authentication method. (Default: false)",
                    "type": "boolean"
                },
                "legacySpatialSupport": {
                    "description": "Use spatial functions like GeomFromText and AsText which are removed in MySQL 8.\n(Default: true)",
                    "type": "boolean"
                },
                "logger": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Logger.3fd36bab"
                        },
                        {
                            "enum": [
                                "advanced-console",
                                "debug",
                                "file",
                                "simple-console"
                            ],
                            "type": "string"
                        }
                    ],
                    "description": "Logger instance used to log queries and events in the ORM."
                },
                "logging": {
                    "anyOf": [
                        {
                            "items": {
                                "enum": [
                                    "error",
                                    "info",
                                    "log",
                                    "migration",
                                    "query",
                                    "schema",
                                    "warn"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "enum": [
                                "all",
                                false,
                                true
                            ]
                        }
                    ],
                    "description": "Logging options."
                },
                "maxQueryExecutionTime": {
                    "description": "Maximum number of milliseconds query should be executed before logger log a warning.",
                    "type": "number"
                },
                "migrations": {
                    "description": "Migrations to be loaded for this connection.\nAccepts both migration classes and directories where from migrations need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "migrationsRun": {
                    "description": "Indicates if migrations should be auto run on every application launch.\nAlternative to it, you can use CLI and run migrations:run command.",
                    "type": "boolean"
                },
                "migrationsTableName": {
                    "description": "Migrations table name, in case of different name from \"migrations\".\nAccepts single string name.",
                    "type": "string"
                },
                "migrationsTransactionMode": {
                    "description": "Transaction mode for migrations to run in",
                    "enum": [
                        "all",
                        "each",
                        "none"
                    ],
                    "type": "string"
                },
                "multipleStatements": {
                    "description": "Allow multiple mysql statements per query. Be careful with this, it could increase the scope of SQL injection attacks.\n(Default: false)",
                    "type": "boolean"
                },
                "name": {
                    "description": "Connection name. If connection name is not given then it will be called \"default\".\nDifferent connections must have different names.",
                    "type": "string"
                },
                "namingStrategy": {
                    "$ref": "#/definitions/NamingStrategyInterface.a1ecc480",
                    "description": "Naming strategy to be used to name tables and columns in the database."
                },
                "password": {
                    "description": "Database password.",
                    "type": "string"
                },
                "port": {
                    "description": "Database host port.",
                    "type": "number"
                },
                "replication": {
                    "description": "Replication setup.",
                    "properties": {
                        "canRetry": {
                            "description": "If true, PoolCluster will attempt to reconnect when connection fails. (Default: true)",
                            "type": "boolean"
                        },
                        "master": {
                            "$ref": "#/definitions/MysqlConnectionCredentialsOptions.9c0bbb9f",
                            "description": "Master server used by orm to perform writes."
                        },
                        "removeNodeErrorCount": {
                            "description": "If connection fails, node's errorCount increases.\nWhen errorCount is greater than removeNodeErrorCount, remove a node in the PoolCluster. (Default: 5)",
                            "type": "number"
                        },
                        "restoreNodeTimeout": {
                            "description": "If connection fails, specifies the number of milliseconds before another connection attempt will be made.\nIf set to 0, then node will be removed instead and never re-used. (Default: 0)",
                            "type": "number"
                        },
                        "selector": {
                            "description": "Determines how slaves are selected:\nRR: Select one alternately (Round-Robin).\nRANDOM: Select the node by random function.\nORDER: Select the first node available unconditionally.",
                            "enum": [
                                "ORDER",
                                "RANDOM",
                                "RR"
                            ],
                            "type": "string"
                        },
                        "slaves": {
                            "description": "List of read-from severs (slaves).",
                            "items": {
                                "$ref": "#/definitions/MysqlConnectionCredentialsOptions.9c0bbb9f"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "socketPath": {
                    "description": "Database socket path",
                    "type": "string"
                },
                "ssl": {
                    "description": "Object with ssl parameters or a string containing name of ssl profile."
                },
                "subscribers": {
                    "description": "Subscribers to be loaded for this connection.\nAccepts both subscriber classes and directories where from subscribers need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "supportBigNumbers": {
                    "description": "When dealing with big numbers (BIGINT and DECIMAL columns) in the database, you should enable this option (Default: false)",
                    "type": "boolean"
                },
                "synchronize": {
                    "description": "Indicates if database schema should be auto created on every application launch.\nBe careful with this option and don't use this in production - otherwise you can lose production data.\nThis option is useful during debug and development.\nAlternative to it, you can use CLI and run schema:sync command.\n\nNote that for MongoDB database it does not create schema, because MongoDB is schemaless.\nInstead, it syncs just by creating indices.",
                    "type": "boolean"
                },
                "timezone": {
                    "description": "The timezone configured on the MySQL server.\nThis is used to type cast server date/time values to JavaScript Date object and vice versa.\nThis can be 'local', 'Z', or an offset in the form +HH:MM or -HH:MM. (Default: 'local')",
                    "type": "string"
                },
                "trace": {
                    "description": "Generates stack traces on Error to include call site of library entrance (\"long stack traces\").\nSlight performance penalty for most calls. (Default: true)",
                    "type": "boolean"
                },
                "type": {
                    "description": "Database type.",
                    "enum": [
                        "mariadb",
                        "mysql"
                    ],
                    "type": "string"
                },
                "url": {
                    "description": "Connection url where perform connection to.",
                    "type": "string"
                },
                "username": {
                    "description": "Database username.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Partial<NativescriptConnectionOptions>.8fbfc2fc": {
            "properties": {
                "androidFlags": {
                    "description": "Flags to pass to SQLite when opening the database on Android. (see https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html)",
                    "type": "number"
                },
                "cache": {
                    "anyOf": [
                        {
                            "properties": {
                                "alwaysEnabled": {
                                    "description": "If set to true then queries (using find methods and QueryBuilder's methods) will always be cached.",
                                    "type": "boolean"
                                },
                                "duration": {
                                    "description": "Time in milliseconds in which cache will expire.\nThis can be setup per-query.\nDefault value is 1000 which is equivalent to 1 second.",
                                    "type": "number"
                                },
                                "ignoreErrors": {
                                    "description": "Used to specify if cache errors should be ignored, and pass through the call to the Database.",
                                    "type": "boolean"
                                },
                                "options": {
                                    "description": "Used to provide redis connection options."
                                },
                                "provider": {
                                    "description": "Factory function for custom cache providers that implement QueryResultCache.",
                                    "type": "object"
                                },
                                "tableName": {
                                    "description": "Configurable table name for \"database\" type cache.\nDefault value is \"query-result-cache\"",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Type of caching.\n\n- \"database\" means cached values will be stored in the separate table in database. This is default value.\n- \"redis\" means cached values will be stored inside redis. You must provide redis connection options.",
                                    "enum": [
                                        "database",
                                        "ioredis",
                                        "ioredis/cluster",
                                        "redis"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Allows to setup cache options."
                },
                "cli": {
                    "description": "CLI settings.",
                    "properties": {
                        "entitiesDir": {
                            "description": "Directory where entities should be created by default.",
                            "type": "string"
                        },
                        "migrationsDir": {
                            "description": "Directory where migrations should be created by default.",
                            "type": "string"
                        },
                        "subscribersDir": {
                            "description": "Directory where subscribers should be created by default.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "database": {
                    "description": "Database name.",
                    "type": "string"
                },
                "driver": {
                    "description": "The driver object\nyou should pass `require('nativescript-sqlite') here"
                },
                "dropSchema": {
                    "description": "Drops the schema each time connection is being established.\nBe careful with this option and don't use this in production - otherwise you'll lose all production data.\nThis option is useful during debug and development.",
                    "type": "boolean"
                },
                "entities": {
                    "description": "Entities to be loaded for this connection.\nAccepts both entity classes and directories where from entities need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "$ref": "#/definitions/EntitySchema<any>.d3f4cb77"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "entityPrefix": {
                    "description": "Prefix to use on all tables (collections) of this connection in the database.",
                    "type": "string"
                },
                "entitySkipConstructor": {
                    "description": "When creating new Entity instances, skip all constructors when true.",
                    "type": "boolean"
                },
                "extra": {
                    "description": "Extra connection options to be passed to the underlying driver.\n\ntodo: deprecate this and move all database-specific types into hts own connection options object."
                },
                "iosFlags": {
                    "description": "Flags to pass to SQLite when opening the database on iOS. (see https://www.sqlite.org/c3ref/open.html)",
                    "type": "number"
                },
                "key": {
                    "description": "The key to use for for using/opening encrypted databases. (requires the \"Encrypted Plugin\")",
                    "type": "string"
                },
                "logger": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Logger.3fd36bab"
                        },
                        {
                            "enum": [
                                "advanced-console",
                                "debug",
                                "file",
                                "simple-console"
                            ],
                            "type": "string"
                        }
                    ],
                    "description": "Logger instance used to log queries and events in the ORM."
                },
                "logging": {
                    "anyOf": [
                        {
                            "items": {
                                "enum": [
                                    "error",
                                    "info",
                                    "log",
                                    "migration",
                                    "query",
                                    "schema",
                                    "warn"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "enum": [
                                "all",
                                false,
                                true
                            ]
                        }
                    ],
                    "description": "Logging options."
                },
                "maxQueryExecutionTime": {
                    "description": "Maximum number of milliseconds query should be executed before logger log a warning.",
                    "type": "number"
                },
                "migrate": {
                    "description": "Migrates a Encrypted Sql database from v3 to the new v4. If you are a new user you do not need to set this flag as new created databases will already be in v4.\nIf you are upgrading a app that used v1.3.0 or earlier of NS-Sqlite-Encrypted; then you will probably want to set this flag to true. (requires the \"Encrypted Plugin\")",
                    "type": "boolean"
                },
                "migrations": {
                    "description": "Migrations to be loaded for this connection.\nAccepts both migration classes and directories where from migrations need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "migrationsRun": {
                    "description": "Indicates if migrations should be auto run on every application launch.\nAlternative to it, you can use CLI and run migrations:run command.",
                    "type": "boolean"
                },
                "migrationsTableName": {
                    "description": "Migrations table name, in case of different name from \"migrations\".\nAccepts single string name.",
                    "type": "string"
                },
                "migrationsTransactionMode": {
                    "description": "Transaction mode for migrations to run in",
                    "enum": [
                        "all",
                        "each",
                        "none"
                    ],
                    "type": "string"
                },
                "multithreading": {
                    "description": "Whether to enable background multitasking. All SQL is ran on a background worker thread. (requires the \"Commercial Plugin\")",
                    "type": "boolean"
                },
                "name": {
                    "description": "Connection name. If connection name is not given then it will be called \"default\".\nDifferent connections must have different names.",
                    "type": "string"
                },
                "namingStrategy": {
                    "$ref": "#/definitions/NamingStrategyInterface.a1ecc480",
                    "description": "Naming strategy to be used to name tables and columns in the database."
                },
                "readOnly": {
                    "description": "Whether to mark the mark the database as read only on open (iOS only).",
                    "type": "boolean"
                },
                "subscribers": {
                    "description": "Subscribers to be loaded for this connection.\nAccepts both subscriber classes and directories where from subscribers need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "synchronize": {
                    "description": "Indicates if database schema should be auto created on every application launch.\nBe careful with this option and don't use this in production - otherwise you can lose production data.\nThis option is useful during debug and development.\nAlternative to it, you can use CLI and run schema:sync command.\n\nNote that for MongoDB database it does not create schema, because MongoDB is schemaless.\nInstead, it syncs just by creating indices.",
                    "type": "boolean"
                },
                "type": {
                    "description": "Database type.",
                    "enum": [
                        "nativescript"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Partial<OracleConnectionOptions>.8fbfc2fc": {
            "properties": {
                "cache": {
                    "anyOf": [
                        {
                            "properties": {
                                "alwaysEnabled": {
                                    "description": "If set to true then queries (using find methods and QueryBuilder's methods) will always be cached.",
                                    "type": "boolean"
                                },
                                "duration": {
                                    "description": "Time in milliseconds in which cache will expire.\nThis can be setup per-query.\nDefault value is 1000 which is equivalent to 1 second.",
                                    "type": "number"
                                },
                                "ignoreErrors": {
                                    "description": "Used to specify if cache errors should be ignored, and pass through the call to the Database.",
                                    "type": "boolean"
                                },
                                "options": {
                                    "description": "Used to provide redis connection options."
                                },
                                "provider": {
                                    "description": "Factory function for custom cache providers that implement QueryResultCache.",
                                    "type": "object"
                                },
                                "tableName": {
                                    "description": "Configurable table name for \"database\" type cache.\nDefault value is \"query-result-cache\"",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Type of caching.\n\n- \"database\" means cached values will be stored in the separate table in database. This is default value.\n- \"redis\" means cached values will be stored inside redis. You must provide redis connection options.",
                                    "enum": [
                                        "database",
                                        "ioredis",
                                        "ioredis/cluster",
                                        "redis"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Allows to setup cache options."
                },
                "cli": {
                    "description": "CLI settings.",
                    "properties": {
                        "entitiesDir": {
                            "description": "Directory where entities should be created by default.",
                            "type": "string"
                        },
                        "migrationsDir": {
                            "description": "Directory where migrations should be created by default.",
                            "type": "string"
                        },
                        "subscribersDir": {
                            "description": "Directory where subscribers should be created by default.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "connectString": {
                    "description": "Embedded TNS Connection String",
                    "type": "string"
                },
                "database": {
                    "description": "Database name to connect to.",
                    "type": "string"
                },
                "driver": {
                    "description": "The driver object\nThis defaults to require(\"oracledb\")"
                },
                "dropSchema": {
                    "description": "Drops the schema each time connection is being established.\nBe careful with this option and don't use this in production - otherwise you'll lose all production data.\nThis option is useful during debug and development.",
                    "type": "boolean"
                },
                "entities": {
                    "description": "Entities to be loaded for this connection.\nAccepts both entity classes and directories where from entities need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "$ref": "#/definitions/EntitySchema<any>.d3f4cb77"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "entityPrefix": {
                    "description": "Prefix to use on all tables (collections) of this connection in the database.",
                    "type": "string"
                },
                "entitySkipConstructor": {
                    "description": "When creating new Entity instances, skip all constructors when true.",
                    "type": "boolean"
                },
                "extra": {
                    "description": "Extra connection options to be passed to the underlying driver.\n\ntodo: deprecate this and move all database-specific types into hts own connection options object."
                },
                "host": {
                    "description": "Database host.",
                    "type": "string"
                },
                "logger": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Logger.3fd36bab"
                        },
                        {
                            "enum": [
                                "advanced-console",
                                "debug",
                                "file",
                                "simple-console"
                            ],
                            "type": "string"
                        }
                    ],
                    "description": "Logger instance used to log queries and events in the ORM."
                },
                "logging": {
                    "anyOf": [
                        {
                            "items": {
                                "enum": [
                                    "error",
                                    "info",
                                    "log",
                                    "migration",
                                    "query",
                                    "schema",
                                    "warn"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "enum": [
                                "all",
                                false,
                                true
                            ]
                        }
                    ],
                    "description": "Logging options."
                },
                "maxQueryExecutionTime": {
                    "description": "Maximum number of milliseconds query should be executed before logger log a warning.",
                    "type": "number"
                },
                "migrations": {
                    "description": "Migrations to be loaded for this connection.\nAccepts both migration classes and directories where from migrations need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "migrationsRun": {
                    "description": "Indicates if migrations should be auto run on every application launch.\nAlternative to it, you can use CLI and run migrations:run command.",
                    "type": "boolean"
                },
                "migrationsTableName": {
                    "description": "Migrations table name, in case of different name from \"migrations\".\nAccepts single string name.",
                    "type": "string"
                },
                "migrationsTransactionMode": {
                    "description": "Transaction mode for migrations to run in",
                    "enum": [
                        "all",
                        "each",
                        "none"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Connection name. If connection name is not given then it will be called \"default\".\nDifferent connections must have different names.",
                    "type": "string"
                },
                "namingStrategy": {
                    "$ref": "#/definitions/NamingStrategyInterface.a1ecc480",
                    "description": "Naming strategy to be used to name tables and columns in the database."
                },
                "password": {
                    "description": "Database password.",
                    "type": "string"
                },
                "port": {
                    "description": "Database host port.",
                    "type": "number"
                },
                "replication": {
                    "description": "Replication setup.",
                    "properties": {
                        "master": {
                            "$ref": "#/definitions/OracleConnectionCredentialsOptions.cc63a8a0",
                            "description": "Master server used by orm to perform writes."
                        },
                        "slaves": {
                            "description": "List of read-from severs (slaves).",
                            "items": {
                                "$ref": "#/definitions/OracleConnectionCredentialsOptions.cc63a8a0"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "schema": {
                    "description": "Schema name. By default is \"public\".",
                    "type": "string"
                },
                "serviceName": {
                    "description": "Connection Service Name.",
                    "type": "string"
                },
                "sid": {
                    "description": "Connection SID.",
                    "type": "string"
                },
                "subscribers": {
                    "description": "Subscribers to be loaded for this connection.\nAccepts both subscriber classes and directories where from subscribers need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "synchronize": {
                    "description": "Indicates if database schema should be auto created on every application launch.\nBe careful with this option and don't use this in production - otherwise you can lose production data.\nThis option is useful during debug and development.\nAlternative to it, you can use CLI and run schema:sync command.\n\nNote that for MongoDB database it does not create schema, because MongoDB is schemaless.\nInstead, it syncs just by creating indices.",
                    "type": "boolean"
                },
                "type": {
                    "description": "Database type.",
                    "enum": [
                        "oracle"
                    ],
                    "type": "string"
                },
                "url": {
                    "description": "Connection url where perform connection to.",
                    "type": "string"
                },
                "useUTC": {
                    "description": "A boolean determining whether to pass time values in UTC or local time. (default: true).",
                    "type": "boolean"
                },
                "username": {
                    "description": "Database username.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Partial<PostgresConnectionOptions>.8fbfc2fc": {
            "properties": {
                "applicationName": {
                    "description": "sets the application_name var to help db administrators identify\nthe service using this connection. Defaults to 'undefined'",
                    "type": "string"
                },
                "cache": {
                    "anyOf": [
                        {
                            "properties": {
                                "alwaysEnabled": {
                                    "description": "If set to true then queries (using find methods and QueryBuilder's methods) will always be cached.",
                                    "type": "boolean"
                                },
                                "duration": {
                                    "description": "Time in milliseconds in which cache will expire.\nThis can be setup per-query.\nDefault value is 1000 which is equivalent to 1 second.",
                                    "type": "number"
                                },
                                "ignoreErrors": {
                                    "description": "Used to specify if cache errors should be ignored, and pass through the call to the Database.",
                                    "type": "boolean"
                                },
                                "options": {
                                    "description": "Used to provide redis connection options."
                                },
                                "provider": {
                                    "description": "Factory function for custom cache providers that implement QueryResultCache.",
                                    "type": "object"
                                },
                                "tableName": {
                                    "description": "Configurable table name for \"database\" type cache.\nDefault value is \"query-result-cache\"",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Type of caching.\n\n- \"database\" means cached values will be stored in the separate table in database. This is default value.\n- \"redis\" means cached values will be stored inside redis. You must provide redis connection options.",
                                    "enum": [
                                        "database",
                                        "ioredis",
                                        "ioredis/cluster",
                                        "redis"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Allows to setup cache options."
                },
                "cli": {
                    "description": "CLI settings.",
                    "properties": {
                        "entitiesDir": {
                            "description": "Directory where entities should be created by default.",
                            "type": "string"
                        },
                        "migrationsDir": {
                            "description": "Directory where migrations should be created by default.",
                            "type": "string"
                        },
                        "subscribersDir": {
                            "description": "Directory where subscribers should be created by default.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "connectTimeoutMS": {
                    "description": "The milliseconds before a timeout occurs during the initial connection to the postgres\nserver. If undefined, or set to 0, there is no timeout. Defaults to undefined.",
                    "type": "number"
                },
                "database": {
                    "description": "Database name to connect to.",
                    "type": "string"
                },
                "driver": {
                    "description": "The driver object\nThis defaults to `require(\"pg\")`."
                },
                "dropSchema": {
                    "description": "Drops the schema each time connection is being established.\nBe careful with this option and don't use this in production - otherwise you'll lose all production data.\nThis option is useful during debug and development.",
                    "type": "boolean"
                },
                "entities": {
                    "description": "Entities to be loaded for this connection.\nAccepts both entity classes and directories where from entities need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "$ref": "#/definitions/EntitySchema<any>.d3f4cb77"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "entityPrefix": {
                    "description": "Prefix to use on all tables (collections) of this connection in the database.",
                    "type": "string"
                },
                "entitySkipConstructor": {
                    "description": "When creating new Entity instances, skip all constructors when true.",
                    "type": "boolean"
                },
                "extra": {
                    "description": "Extra connection options to be passed to the underlying driver.\n\ntodo: deprecate this and move all database-specific types into hts own connection options object."
                },
                "host": {
                    "description": "Database host.",
                    "type": "string"
                },
                "installExtensions": {
                    "description": "Automatically install postgres extensions",
                    "type": "boolean"
                },
                "logNotifications": {
                    "description": "Include notification messages from Postgres server in client logs",
                    "type": "boolean"
                },
                "logger": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Logger.3fd36bab"
                        },
                        {
                            "enum": [
                                "advanced-console",
                                "debug",
                                "file",
                                "simple-console"
                            ],
                            "type": "string"
                        }
                    ],
                    "description": "Logger instance used to log queries and events in the ORM."
                },
                "logging": {
                    "anyOf": [
                        {
                            "items": {
                                "enum": [
                                    "error",
                                    "info",
                                    "log",
                                    "migration",
                                    "query",
                                    "schema",
                                    "warn"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "enum": [
                                "all",
                                false,
                                true
                            ]
                        }
                    ],
                    "description": "Logging options."
                },
                "maxQueryExecutionTime": {
                    "description": "Maximum number of milliseconds query should be executed before logger log a warning.",
                    "type": "number"
                },
                "migrations": {
                    "description": "Migrations to be loaded for this connection.\nAccepts both migration classes and directories where from migrations need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "migrationsRun": {
                    "description": "Indicates if migrations should be auto run on every application launch.\nAlternative to it, you can use CLI and run migrations:run command.",
                    "type": "boolean"
                },
                "migrationsTableName": {
                    "description": "Migrations table name, in case of different name from \"migrations\".\nAccepts single string name.",
                    "type": "string"
                },
                "migrationsTransactionMode": {
                    "description": "Transaction mode for migrations to run in",
                    "enum": [
                        "all",
                        "each",
                        "none"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Connection name. If connection name is not given then it will be called \"default\".\nDifferent connections must have different names.",
                    "type": "string"
                },
                "namingStrategy": {
                    "$ref": "#/definitions/NamingStrategyInterface.a1ecc480",
                    "description": "Naming strategy to be used to name tables and columns in the database."
                },
                "nativeDriver": {
                    "description": "The driver object\nThis defaults to `require(\"pg-native\")`."
                },
                "password": {
                    "description": "Database password.",
                    "type": [
                        "string",
                        "object"
                    ]
                },
                "poolErrorHandler": {
                    "type": "object"
                },
                "port": {
                    "description": "Database host port.",
                    "type": "number"
                },
                "replication": {
                    "description": "Replication setup.",
                    "properties": {
                        "master": {
                            "$ref": "#/definitions/PostgresConnectionCredentialsOptions.6e8ec23c",
                            "description": "Master server used by orm to perform writes."
                        },
                        "slaves": {
                            "description": "List of read-from severs (slaves).",
                            "items": {
                                "$ref": "#/definitions/PostgresConnectionCredentialsOptions.6e8ec23c"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "schema": {
                    "description": "Schema name.",
                    "type": "string"
                },
                "ssl": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/TlsOptions.a939cba2"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Object with ssl parameters"
                },
                "subscribers": {
                    "description": "Subscribers to be loaded for this connection.\nAccepts both subscriber classes and directories where from subscribers need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "synchronize": {
                    "description": "Indicates if database schema should be auto created on every application launch.\nBe careful with this option and don't use this in production - otherwise you can lose production data.\nThis option is useful during debug and development.\nAlternative to it, you can use CLI and run schema:sync command.\n\nNote that for MongoDB database it does not create schema, because MongoDB is schemaless.\nInstead, it syncs just by creating indices.",
                    "type": "boolean"
                },
                "type": {
                    "description": "Database type.",
                    "enum": [
                        "postgres"
                    ],
                    "type": "string"
                },
                "url": {
                    "description": "Connection url where perform connection to.",
                    "type": "string"
                },
                "useUTC": {
                    "description": "A boolean determining whether to pass time values in UTC or local time. (default: true).",
                    "type": "boolean"
                },
                "username": {
                    "description": "Database username.",
                    "type": "string"
                },
                "uuidExtension": {
                    "description": "The Postgres extension to use to generate UUID columns. Defaults to uuid-ossp.\nIf pgcrypto is selected, TypeORM will use the gen_random_uuid() function from this extension.\nIf uuid-ossp is selected, TypeORM will use the uuid_generate_v4() function from this extension.",
                    "enum": [
                        "pgcrypto",
                        "uuid-ossp"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Partial<ReactNativeConnectionOptions>.8fbfc2fc": {
            "properties": {
                "cache": {
                    "anyOf": [
                        {
                            "properties": {
                                "alwaysEnabled": {
                                    "description": "If set to true then queries (using find methods and QueryBuilder's methods) will always be cached.",
                                    "type": "boolean"
                                },
                                "duration": {
                                    "description": "Time in milliseconds in which cache will expire.\nThis can be setup per-query.\nDefault value is 1000 which is equivalent to 1 second.",
                                    "type": "number"
                                },
                                "ignoreErrors": {
                                    "description": "Used to specify if cache errors should be ignored, and pass through the call to the Database.",
                                    "type": "boolean"
                                },
                                "options": {
                                    "description": "Used to provide redis connection options."
                                },
                                "provider": {
                                    "description": "Factory function for custom cache providers that implement QueryResultCache.",
                                    "type": "object"
                                },
                                "tableName": {
                                    "description": "Configurable table name for \"database\" type cache.\nDefault value is \"query-result-cache\"",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Type of caching.\n\n- \"database\" means cached values will be stored in the separate table in database. This is default value.\n- \"redis\" means cached values will be stored inside redis. You must provide redis connection options.",
                                    "enum": [
                                        "database",
                                        "ioredis",
                                        "ioredis/cluster",
                                        "redis"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Allows to setup cache options."
                },
                "cli": {
                    "description": "CLI settings.",
                    "properties": {
                        "entitiesDir": {
                            "description": "Directory where entities should be created by default.",
                            "type": "string"
                        },
                        "migrationsDir": {
                            "description": "Directory where migrations should be created by default.",
                            "type": "string"
                        },
                        "subscribersDir": {
                            "description": "Directory where subscribers should be created by default.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "database": {
                    "description": "Database name.",
                    "type": "string"
                },
                "driver": {
                    "description": "The driver object\nThis defaults to require(\"react-native-sqlite-storage\")"
                },
                "dropSchema": {
                    "description": "Drops the schema each time connection is being established.\nBe careful with this option and don't use this in production - otherwise you'll lose all production data.\nThis option is useful during debug and development.",
                    "type": "boolean"
                },
                "entities": {
                    "description": "Entities to be loaded for this connection.\nAccepts both entity classes and directories where from entities need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "$ref": "#/definitions/EntitySchema<any>.d3f4cb77"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "entityPrefix": {
                    "description": "Prefix to use on all tables (collections) of this connection in the database.",
                    "type": "string"
                },
                "entitySkipConstructor": {
                    "description": "When creating new Entity instances, skip all constructors when true.",
                    "type": "boolean"
                },
                "extra": {
                    "description": "Extra connection options to be passed to the underlying driver.\n\ntodo: deprecate this and move all database-specific types into hts own connection options object."
                },
                "location": {
                    "description": "Storage Location",
                    "type": "string"
                },
                "logger": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Logger.3fd36bab"
                        },
                        {
                            "enum": [
                                "advanced-console",
                                "debug",
                                "file",
                                "simple-console"
                            ],
                            "type": "string"
                        }
                    ],
                    "description": "Logger instance used to log queries and events in the ORM."
                },
                "logging": {
                    "anyOf": [
                        {
                            "items": {
                                "enum": [
                                    "error",
                                    "info",
                                    "log",
                                    "migration",
                                    "query",
                                    "schema",
                                    "warn"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "enum": [
                                "all",
                                false,
                                true
                            ]
                        }
                    ],
                    "description": "Logging options."
                },
                "maxQueryExecutionTime": {
                    "description": "Maximum number of milliseconds query should be executed before logger log a warning.",
                    "type": "number"
                },
                "migrations": {
                    "description": "Migrations to be loaded for this connection.\nAccepts both migration classes and directories where from migrations need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "migrationsRun": {
                    "description": "Indicates if migrations should be auto run on every application launch.\nAlternative to it, you can use CLI and run migrations:run command.",
                    "type": "boolean"
                },
                "migrationsTableName": {
                    "description": "Migrations table name, in case of different name from \"migrations\".\nAccepts single string name.",
                    "type": "string"
                },
                "migrationsTransactionMode": {
                    "description": "Transaction mode for migrations to run in",
                    "enum": [
                        "all",
                        "each",
                        "none"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Connection name. If connection name is not given then it will be called \"default\".\nDifferent connections must have different names.",
                    "type": "string"
                },
                "namingStrategy": {
                    "$ref": "#/definitions/NamingStrategyInterface.a1ecc480",
                    "description": "Naming strategy to be used to name tables and columns in the database."
                },
                "subscribers": {
                    "description": "Subscribers to be loaded for this connection.\nAccepts both subscriber classes and directories where from subscribers need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "synchronize": {
                    "description": "Indicates if database schema should be auto created on every application launch.\nBe careful with this option and don't use this in production - otherwise you can lose production data.\nThis option is useful during debug and development.\nAlternative to it, you can use CLI and run schema:sync command.\n\nNote that for MongoDB database it does not create schema, because MongoDB is schemaless.\nInstead, it syncs just by creating indices.",
                    "type": "boolean"
                },
                "type": {
                    "description": "Database type.",
                    "enum": [
                        "react-native"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Partial<Record<\"Int\"|\"Float\"|\"String\"|\"Boolean\"|\"ID\",string>>.8fbfc2fc": {
            "properties": {
                "Boolean": {
                    "type": "string"
                },
                "Float": {
                    "type": "string"
                },
                "ID": {
                    "type": "string"
                },
                "Int": {
                    "type": "string"
                },
                "String": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Partial<SapConnectionOptions>.8fbfc2fc": {
            "properties": {
                "ca": {
                    "description": "Ca for encrypted connection",
                    "type": "string"
                },
                "cache": {
                    "anyOf": [
                        {
                            "properties": {
                                "alwaysEnabled": {
                                    "description": "If set to true then queries (using find methods and QueryBuilder's methods) will always be cached.",
                                    "type": "boolean"
                                },
                                "duration": {
                                    "description": "Time in milliseconds in which cache will expire.\nThis can be setup per-query.\nDefault value is 1000 which is equivalent to 1 second.",
                                    "type": "number"
                                },
                                "ignoreErrors": {
                                    "description": "Used to specify if cache errors should be ignored, and pass through the call to the Database.",
                                    "type": "boolean"
                                },
                                "options": {
                                    "description": "Used to provide redis connection options."
                                },
                                "provider": {
                                    "description": "Factory function for custom cache providers that implement QueryResultCache.",
                                    "type": "object"
                                },
                                "tableName": {
                                    "description": "Configurable table name for \"database\" type cache.\nDefault value is \"query-result-cache\"",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Type of caching.\n\n- \"database\" means cached values will be stored in the separate table in database. This is default value.\n- \"redis\" means cached values will be stored inside redis. You must provide redis connection options.",
                                    "enum": [
                                        "database",
                                        "ioredis",
                                        "ioredis/cluster",
                                        "redis"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Allows to setup cache options."
                },
                "cert": {
                    "description": "Cert for encrypted connection",
                    "type": "string"
                },
                "cli": {
                    "description": "CLI settings.",
                    "properties": {
                        "entitiesDir": {
                            "description": "Directory where entities should be created by default.",
                            "type": "string"
                        },
                        "migrationsDir": {
                            "description": "Directory where migrations should be created by default.",
                            "type": "string"
                        },
                        "subscribersDir": {
                            "description": "Directory where subscribers should be created by default.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "database": {
                    "description": "Database name to connect to.",
                    "type": "string"
                },
                "driver": {
                    "description": "The driver objects\nThis defaults to require(\"hdb-pool\")"
                },
                "dropSchema": {
                    "description": "Drops the schema each time connection is being established.\nBe careful with this option and don't use this in production - otherwise you'll lose all production data.\nThis option is useful during debug and development.",
                    "type": "boolean"
                },
                "encrypt": {
                    "description": "Encrypt database connection",
                    "type": "boolean"
                },
                "entities": {
                    "description": "Entities to be loaded for this connection.\nAccepts both entity classes and directories where from entities need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "$ref": "#/definitions/EntitySchema<any>.d3f4cb77"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "entityPrefix": {
                    "description": "Prefix to use on all tables (collections) of this connection in the database.",
                    "type": "string"
                },
                "entitySkipConstructor": {
                    "description": "When creating new Entity instances, skip all constructors when true.",
                    "type": "boolean"
                },
                "extra": {
                    "description": "Extra connection options to be passed to the underlying driver.\n\ntodo: deprecate this and move all database-specific types into hts own connection options object."
                },
                "hanaClientDriver": {
                    "description": "The driver objects\nThis defaults to require(\"@sap/hana-client\")"
                },
                "host": {
                    "description": "Database host.",
                    "type": "string"
                },
                "key": {
                    "description": "Key for encrypted connection",
                    "type": "string"
                },
                "logger": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Logger.3fd36bab"
                        },
                        {
                            "enum": [
                                "advanced-console",
                                "debug",
                                "file",
                                "simple-console"
                            ],
                            "type": "string"
                        }
                    ],
                    "description": "Logger instance used to log queries and events in the ORM."
                },
                "logging": {
                    "anyOf": [
                        {
                            "items": {
                                "enum": [
                                    "error",
                                    "info",
                                    "log",
                                    "migration",
                                    "query",
                                    "schema",
                                    "warn"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "enum": [
                                "all",
                                false,
                                true
                            ]
                        }
                    ],
                    "description": "Logging options."
                },
                "maxQueryExecutionTime": {
                    "description": "Maximum number of milliseconds query should be executed before logger log a warning.",
                    "type": "number"
                },
                "migrations": {
                    "description": "Migrations to be loaded for this connection.\nAccepts both migration classes and directories where from migrations need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "migrationsRun": {
                    "description": "Indicates if migrations should be auto run on every application launch.\nAlternative to it, you can use CLI and run migrations:run command.",
                    "type": "boolean"
                },
                "migrationsTableName": {
                    "description": "Migrations table name, in case of different name from \"migrations\".\nAccepts single string name.",
                    "type": "string"
                },
                "migrationsTransactionMode": {
                    "description": "Transaction mode for migrations to run in",
                    "enum": [
                        "all",
                        "each",
                        "none"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Connection name. If connection name is not given then it will be called \"default\".\nDifferent connections must have different names.",
                    "type": "string"
                },
                "namingStrategy": {
                    "$ref": "#/definitions/NamingStrategyInterface.a1ecc480",
                    "description": "Naming strategy to be used to name tables and columns in the database."
                },
                "password": {
                    "description": "Database password.",
                    "type": "string"
                },
                "pool": {
                    "description": "Pool options.",
                    "properties": {
                        "checkInterval": {
                            "description": "How often to run resource timeout checks. (default=0, disabled)",
                            "type": "number"
                        },
                        "idleTimeout": {
                            "description": "Idle timeout",
                            "type": "number"
                        },
                        "max": {
                            "description": "Max number of connections.",
                            "type": "number"
                        },
                        "maxWaitingRequests": {
                            "description": "Maximum number of waiting requests allowed. (default=0, no limit).",
                            "type": "number"
                        },
                        "min": {
                            "description": "Minimum number of connections.",
                            "type": "number"
                        },
                        "poolErrorHandler": {
                            "description": "Function handling errors thrown by drivers pool.\nDefaults to logging error with `warn` level.",
                            "type": "object"
                        },
                        "requestTimeout": {
                            "description": "Max milliseconds a request will wait for a resource before timing out. (default=5000)",
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "port": {
                    "description": "Database host port.",
                    "type": "number"
                },
                "schema": {
                    "description": "Database schema.",
                    "type": "string"
                },
                "sslValidateCertificate": {
                    "description": "Validate database certificate",
                    "type": "boolean"
                },
                "subscribers": {
                    "description": "Subscribers to be loaded for this connection.\nAccepts both subscriber classes and directories where from subscribers need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "synchronize": {
                    "description": "Indicates if database schema should be auto created on every application launch.\nBe careful with this option and don't use this in production - otherwise you can lose production data.\nThis option is useful during debug and development.\nAlternative to it, you can use CLI and run schema:sync command.\n\nNote that for MongoDB database it does not create schema, because MongoDB is schemaless.\nInstead, it syncs just by creating indices.",
                    "type": "boolean"
                },
                "type": {
                    "description": "Database type.",
                    "enum": [
                        "sap"
                    ],
                    "type": "string"
                },
                "username": {
                    "description": "Database username.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Partial<SqlServerConnectionOptions>.8fbfc2fc": {
            "properties": {
                "authentication": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DefaultAuthentication.75a6be8e"
                        },
                        {
                            "$ref": "#/definitions/AzureActiveDirectoryAccessTokenAuthentication.5537ff98"
                        },
                        {
                            "$ref": "#/definitions/AzureActiveDirectoryMsiAppServiceAuthentication.de0d5e38"
                        },
                        {
                            "$ref": "#/definitions/AzureActiveDirectoryMsiVmAuthentication.68712ae5"
                        },
                        {
                            "$ref": "#/definitions/AzureActiveDirectoryPasswordAuthentication.32c8401d"
                        },
                        {
                            "$ref": "#/definitions/AzureActiveDirectoryServicePrincipalSecret.f15591c6"
                        },
                        {
                            "$ref": "#/definitions/NtlmAuthentication.7f93c4a6"
                        }
                    ],
                    "description": "Authentication settings\nIt overrides username and password, when passed."
                },
                "cache": {
                    "anyOf": [
                        {
                            "properties": {
                                "alwaysEnabled": {
                                    "description": "If set to true then queries (using find methods and QueryBuilder's methods) will always be cached.",
                                    "type": "boolean"
                                },
                                "duration": {
                                    "description": "Time in milliseconds in which cache will expire.\nThis can be setup per-query.\nDefault value is 1000 which is equivalent to 1 second.",
                                    "type": "number"
                                },
                                "ignoreErrors": {
                                    "description": "Used to specify if cache errors should be ignored, and pass through the call to the Database.",
                                    "type": "boolean"
                                },
                                "options": {
                                    "description": "Used to provide redis connection options."
                                },
                                "provider": {
                                    "description": "Factory function for custom cache providers that implement QueryResultCache.",
                                    "type": "object"
                                },
                                "tableName": {
                                    "description": "Configurable table name for \"database\" type cache.\nDefault value is \"query-result-cache\"",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Type of caching.\n\n- \"database\" means cached values will be stored in the separate table in database. This is default value.\n- \"redis\" means cached values will be stored inside redis. You must provide redis connection options.",
                                    "enum": [
                                        "database",
                                        "ioredis",
                                        "ioredis/cluster",
                                        "redis"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Allows to setup cache options."
                },
                "cli": {
                    "description": "CLI settings.",
                    "properties": {
                        "entitiesDir": {
                            "description": "Directory where entities should be created by default.",
                            "type": "string"
                        },
                        "migrationsDir": {
                            "description": "Directory where migrations should be created by default.",
                            "type": "string"
                        },
                        "subscribersDir": {
                            "description": "Directory where subscribers should be created by default.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "connectionTimeout": {
                    "description": "Connection timeout in ms (default: 15000).",
                    "type": "number"
                },
                "database": {
                    "description": "Database name to connect to.",
                    "type": "string"
                },
                "domain": {
                    "description": "Once you set domain, driver will connect to SQL Server using domain login.",
                    "type": "string"
                },
                "driver": {
                    "description": "The driver object\nThis defaults to `require(\"mssql\")`"
                },
                "dropSchema": {
                    "description": "Drops the schema each time connection is being established.\nBe careful with this option and don't use this in production - otherwise you'll lose all production data.\nThis option is useful during debug and development.",
                    "type": "boolean"
                },
                "entities": {
                    "description": "Entities to be loaded for this connection.\nAccepts both entity classes and directories where from entities need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "$ref": "#/definitions/EntitySchema<any>.d3f4cb77"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "entityPrefix": {
                    "description": "Prefix to use on all tables (collections) of this connection in the database.",
                    "type": "string"
                },
                "entitySkipConstructor": {
                    "description": "When creating new Entity instances, skip all constructors when true.",
                    "type": "boolean"
                },
                "extra": {
                    "description": "Extra connection options to be passed to the underlying driver.\n\ntodo: deprecate this and move all database-specific types into hts own connection options object."
                },
                "host": {
                    "description": "Database host.",
                    "type": "string"
                },
                "logger": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Logger.3fd36bab"
                        },
                        {
                            "enum": [
                                "advanced-console",
                                "debug",
                                "file",
                                "simple-console"
                            ],
                            "type": "string"
                        }
                    ],
                    "description": "Logger instance used to log queries and events in the ORM."
                },
                "logging": {
                    "anyOf": [
                        {
                            "items": {
                                "enum": [
                                    "error",
                                    "info",
                                    "log",
                                    "migration",
                                    "query",
                                    "schema",
                                    "warn"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "enum": [
                                "all",
                                false,
                                true
                            ]
                        }
                    ],
                    "description": "Logging options."
                },
                "maxQueryExecutionTime": {
                    "description": "Maximum number of milliseconds query should be executed before logger log a warning.",
                    "type": "number"
                },
                "migrations": {
                    "description": "Migrations to be loaded for this connection.\nAccepts both migration classes and directories where from migrations need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "migrationsRun": {
                    "description": "Indicates if migrations should be auto run on every application launch.\nAlternative to it, you can use CLI and run migrations:run command.",
                    "type": "boolean"
                },
                "migrationsTableName": {
                    "description": "Migrations table name, in case of different name from \"migrations\".\nAccepts single string name.",
                    "type": "string"
                },
                "migrationsTransactionMode": {
                    "description": "Transaction mode for migrations to run in",
                    "enum": [
                        "all",
                        "each",
                        "none"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Connection name. If connection name is not given then it will be called \"default\".\nDifferent connections must have different names.",
                    "type": "string"
                },
                "namingStrategy": {
                    "$ref": "#/definitions/NamingStrategyInterface.a1ecc480",
                    "description": "Naming strategy to be used to name tables and columns in the database."
                },
                "options": {
                    "description": "Extra options",
                    "properties": {
                        "abortTransactionOnError": {
                            "description": "A boolean determining whether to rollback a transaction automatically if any error is encountered during\nthe given transaction's execution. This sets the value for SET XACT_ABORT during the initial SQL phase\nof a connection (documentation).",
                            "type": "boolean"
                        },
                        "camelCaseColumns": {
                            "description": "A boolean, controlling whether the column names returned will have the first letter converted to lower case\n(true) or not. This value is ignored if you provide a columnNameReplacer. (default: false).",
                            "type": "boolean"
                        },
                        "cancelTimeout": {
                            "description": "The number of milliseconds before the cancel (abort) of a request is considered failed (default: 5000).",
                            "type": "number"
                        },
                        "connectTimeout": {
                            "description": "The number of milliseconds before the attempt to connect is considered failed (default: 15000).",
                            "type": "number"
                        },
                        "connectionIsolationLevel": {
                            "description": "The default isolation level for new connections. All out-of-transaction queries are executed with this\nsetting. The isolation levels are available from require('tedious').ISOLATION_LEVEL .",
                            "enum": [
                                "READ_COMMITTED",
                                "READ_UNCOMMITTED",
                                "REPEATABLE_READ",
                                "SERIALIZABLE",
                                "SNAPSHOT"
                            ],
                            "type": "string"
                        },
                        "cryptoCredentialsDetails": {
                            "description": "When encryption is used, an object may be supplied that will be used for the first argument when calling\ntls.createSecurePair (default: {})."
                        },
                        "debug": {
                            "description": "Debug options",
                            "properties": {
                                "data": {
                                    "description": "A boolean, controlling whether debug events will be emitted with text describing packet data details\n(default: false).",
                                    "type": "boolean"
                                },
                                "packet": {
                                    "description": "A boolean, controlling whether debug events will be emitted with text describing packet details\n(default: false).",
                                    "type": "boolean"
                                },
                                "payload": {
                                    "description": "A boolean, controlling whether debug events will be emitted with text describing packet payload details\n(default: false).",
                                    "type": "boolean"
                                },
                                "token": {
                                    "description": "A boolean, controlling whether debug events will be emitted with text describing token stream tokens\n(default: false).",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        "disableOutputReturning": {
                            "description": "A boolean, controlling whatever to disable RETURNING / OUTPUT statements.",
                            "type": "boolean"
                        },
                        "enableAnsiNullDefault": {
                            "description": "If true, SET ANSI_NULL_DFLT_ON ON will be set in the initial sql. This means new columns will be nullable by\ndefault. See the T-SQL documentation for more details. (Default: true).",
                            "type": "boolean"
                        },
                        "enableArithAbort": {
                            "description": "A boolean, that when true will abort a query when an overflow or divide-by-zero error occurs during query execution.",
                            "type": "boolean"
                        },
                        "encrypt": {
                            "description": "A boolean determining whether or not the connection will be encrypted. Set to true if you're on\nWindows Azure. (default: false).",
                            "type": "boolean"
                        },
                        "fallbackToDefaultDb": {
                            "description": "By default, if the database requestion by options.database cannot be accessed, the connection will fail with\nan error. However, if options.fallbackToDefaultDb is set to true, then the user's default database will\nbe used instead (Default: false).",
                            "type": "boolean"
                        },
                        "isolation": {
                            "description": "The default isolation level that transactions will be run with. The isolation levels are available\nfrom require('tedious').ISOLATION_LEVEL. (default: READ_COMMITTED).",
                            "enum": [
                                "READ_COMMITTED",
                                "READ_UNCOMMITTED",
                                "REPEATABLE_READ",
                                "SERIALIZABLE",
                                "SNAPSHOT"
                            ],
                            "type": "string"
                        },
                        "localAddress": {
                            "description": "A string indicating which network interface (ip address) to use when connecting to SQL Server.",
                            "type": "string"
                        },
                        "packetSize": {
                            "description": "The size of TDS packets (subject to negotiation with the server). Should be a power of 2. (default: 4096).",
                            "type": "number"
                        },
                        "readOnlyIntent": {
                            "description": "A boolean, determining whether the connection will request read only access from a SQL Server\nAvailability Group. For more information, see here. (default: false).",
                            "type": "boolean"
                        },
                        "rowCollectionOnDone": {
                            "description": "A boolean, that when true will expose received rows in Requests' done* events. See done, doneInProc and\ndoneProc. (default: false)\nCaution: If many row are received, enabling this option could result in excessive memory usage.",
                            "type": "boolean"
                        },
                        "rowCollectionOnRequestCompletion": {
                            "description": "A boolean, that when true will expose received rows in Requests' completion callback. See new Request. (default: false)\nCaution: If many row are received, enabling this option could result in excessive memory usage.",
                            "type": "boolean"
                        },
                        "tdsVersion": {
                            "description": "The version of TDS to use. If server doesn't support specified version, negotiated version is used instead.\nThe versions are available from require('tedious').TDS_VERSION. (default: 7_4).",
                            "type": "string"
                        },
                        "useColumnNames": {
                            "description": "A boolean determining whether to return rows as arrays or key-value collections. (default: false).",
                            "type": "boolean"
                        },
                        "useUTC": {
                            "description": "A boolean determining whether to pass time values in UTC or local time. (default: true).",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "password": {
                    "description": "Database password.",
                    "type": "string"
                },
                "pool": {
                    "description": "An optional object/dictionary with the any of the properties",
                    "properties": {
                        "acquireTimeoutMillis": {
                            "description": "Max milliseconds an acquire call will wait for a resource before timing out. (default no limit), if supplied should non-zero positive integer.",
                            "type": "number"
                        },
                        "errorHandler": {
                            "type": "object"
                        },
                        "evictionRunIntervalMillis": {
                            "description": "How often to run eviction checks. Default: 0 (does not run).",
                            "type": "number"
                        },
                        "fifo": {
                            "description": "If true the oldest resources will be first to be allocated. If false the most recently released resources will\nbe the first to be allocated. This in effect turns the pool's behaviour from a queue into a stack. boolean,\n(default true)",
                            "type": "boolean"
                        },
                        "idleTimeoutMillis": {
                            "description": "The minimum amount of time that an object may sit idle in the pool before it is eligible for eviction due\nto idle time. Supercedes softIdleTimeoutMillis Default: 30000",
                            "type": "number"
                        },
                        "max": {
                            "description": "Maximum number of resources to create at any given time. (default=1)",
                            "type": "number"
                        },
                        "maxWaitingClients": {
                            "description": "Maximum number of queued requests allowed, additional acquire calls will be callback with an err in a future\ncycle of the event loop.",
                            "type": "number"
                        },
                        "min": {
                            "description": "Minimum number of resources to keep in pool at any given time. If this is set >= max, the pool will silently\nset the min to equal max. (default=0)",
                            "type": "number"
                        },
                        "numTestsPerRun": {
                            "description": "Number of resources to check each eviction run. Default: 3.",
                            "type": "number"
                        },
                        "priorityRange": {
                            "description": "Int between 1 and x - if set, borrowers can specify their relative priority in the queue if no resources\nare available. see example. (default 1)",
                            "type": "number"
                        },
                        "softIdleTimeoutMillis": {
                            "description": "Amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object\nevictor (if any), with the extra condition that at least \"min idle\" object instances remain in the pool.\nDefault -1 (nothing can get evicted)",
                            "type": "number"
                        },
                        "testOnBorrow": {
                            "description": "Should the pool validate resources before giving them to clients. Requires that either factory.validate or\nfactory.validateAsync to be specified",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "port": {
                    "description": "Database host port.",
                    "type": "number"
                },
                "replication": {
                    "description": "Replication setup.",
                    "properties": {
                        "master": {
                            "$ref": "#/definitions/SqlServerConnectionCredentialsOptions.777c2ca6",
                            "description": "Master server used by orm to perform writes."
                        },
                        "slaves": {
                            "description": "List of read-from severs (slaves).",
                            "items": {
                                "$ref": "#/definitions/SqlServerConnectionCredentialsOptions.777c2ca6"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "requestTimeout": {
                    "description": "Request timeout in ms (default: 15000). NOTE: msnodesqlv8 driver doesn't support timeouts < 1 second.",
                    "type": "number"
                },
                "schema": {
                    "description": "Database schema.",
                    "type": "string"
                },
                "stream": {
                    "description": "Stream recordsets/rows instead of returning them all at once as an argument of callback (default: false).\nYou can also enable streaming for each request independently (request.stream = true).\nAlways set to true if you plan to work with large amount of rows.",
                    "type": "boolean"
                },
                "subscribers": {
                    "description": "Subscribers to be loaded for this connection.\nAccepts both subscriber classes and directories where from subscribers need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "synchronize": {
                    "description": "Indicates if database schema should be auto created on every application launch.\nBe careful with this option and don't use this in production - otherwise you can lose production data.\nThis option is useful during debug and development.\nAlternative to it, you can use CLI and run schema:sync command.\n\nNote that for MongoDB database it does not create schema, because MongoDB is schemaless.\nInstead, it syncs just by creating indices.",
                    "type": "boolean"
                },
                "type": {
                    "description": "Database type.",
                    "enum": [
                        "mssql"
                    ],
                    "type": "string"
                },
                "url": {
                    "description": "Connection url where perform connection to.",
                    "type": "string"
                },
                "username": {
                    "description": "Database username.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Partial<SqliteConnectionOptions>.8fbfc2fc": {
            "properties": {
                "busyErrorRetry": {
                    "description": "In your SQLite application when you perform parallel writes its common to face SQLITE_BUSY error.\nThis error indicates that SQLite failed to write to the database file since someone else already writes into it.\nSince SQLite cannot handle parallel saves this error cannot be avoided.\n\nTo simplify life's of those who have this error this particular option sets a timeout within which ORM will try\nto perform requested write operation again and again until it receives SQLITE_BUSY error.\n\nEnabling WAL can improve your app performance and face less SQLITE_BUSY issues.\nTime in milliseconds.",
                    "type": "number"
                },
                "cache": {
                    "anyOf": [
                        {
                            "properties": {
                                "alwaysEnabled": {
                                    "description": "If set to true then queries (using find methods and QueryBuilder's methods) will always be cached.",
                                    "type": "boolean"
                                },
                                "duration": {
                                    "description": "Time in milliseconds in which cache will expire.\nThis can be setup per-query.\nDefault value is 1000 which is equivalent to 1 second.",
                                    "type": "number"
                                },
                                "ignoreErrors": {
                                    "description": "Used to specify if cache errors should be ignored, and pass through the call to the Database.",
                                    "type": "boolean"
                                },
                                "options": {
                                    "description": "Used to provide redis connection options."
                                },
                                "provider": {
                                    "description": "Factory function for custom cache providers that implement QueryResultCache.",
                                    "type": "object"
                                },
                                "tableName": {
                                    "description": "Configurable table name for \"database\" type cache.\nDefault value is \"query-result-cache\"",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Type of caching.\n\n- \"database\" means cached values will be stored in the separate table in database. This is default value.\n- \"redis\" means cached values will be stored inside redis. You must provide redis connection options.",
                                    "enum": [
                                        "database",
                                        "ioredis",
                                        "ioredis/cluster",
                                        "redis"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Allows to setup cache options."
                },
                "cli": {
                    "description": "CLI settings.",
                    "properties": {
                        "entitiesDir": {
                            "description": "Directory where entities should be created by default.",
                            "type": "string"
                        },
                        "migrationsDir": {
                            "description": "Directory where migrations should be created by default.",
                            "type": "string"
                        },
                        "subscribersDir": {
                            "description": "Directory where subscribers should be created by default.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "database": {
                    "description": "Storage type or path to the storage.",
                    "type": "string"
                },
                "driver": {
                    "description": "The driver object\nThis defaults to require(\"sqlite3\")"
                },
                "dropSchema": {
                    "description": "Drops the schema each time connection is being established.\nBe careful with this option and don't use this in production - otherwise you'll lose all production data.\nThis option is useful during debug and development.",
                    "type": "boolean"
                },
                "enableWAL": {
                    "description": "Enables WAL mode. By default its disabled.",
                    "type": "boolean"
                },
                "entities": {
                    "description": "Entities to be loaded for this connection.\nAccepts both entity classes and directories where from entities need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "$ref": "#/definitions/EntitySchema<any>.d3f4cb77"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "entityPrefix": {
                    "description": "Prefix to use on all tables (collections) of this connection in the database.",
                    "type": "string"
                },
                "entitySkipConstructor": {
                    "description": "When creating new Entity instances, skip all constructors when true.",
                    "type": "boolean"
                },
                "extra": {
                    "description": "Extra connection options to be passed to the underlying driver.\n\ntodo: deprecate this and move all database-specific types into hts own connection options object."
                },
                "key": {
                    "description": "Encryption key for for SQLCipher.",
                    "type": "string"
                },
                "logger": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Logger.3fd36bab"
                        },
                        {
                            "enum": [
                                "advanced-console",
                                "debug",
                                "file",
                                "simple-console"
                            ],
                            "type": "string"
                        }
                    ],
                    "description": "Logger instance used to log queries and events in the ORM."
                },
                "logging": {
                    "anyOf": [
                        {
                            "items": {
                                "enum": [
                                    "error",
                                    "info",
                                    "log",
                                    "migration",
                                    "query",
                                    "schema",
                                    "warn"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "enum": [
                                "all",
                                false,
                                true
                            ]
                        }
                    ],
                    "description": "Logging options."
                },
                "maxQueryExecutionTime": {
                    "description": "Maximum number of milliseconds query should be executed before logger log a warning.",
                    "type": "number"
                },
                "migrations": {
                    "description": "Migrations to be loaded for this connection.\nAccepts both migration classes and directories where from migrations need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "migrationsRun": {
                    "description": "Indicates if migrations should be auto run on every application launch.\nAlternative to it, you can use CLI and run migrations:run command.",
                    "type": "boolean"
                },
                "migrationsTableName": {
                    "description": "Migrations table name, in case of different name from \"migrations\".\nAccepts single string name.",
                    "type": "string"
                },
                "migrationsTransactionMode": {
                    "description": "Transaction mode for migrations to run in",
                    "enum": [
                        "all",
                        "each",
                        "none"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Connection name. If connection name is not given then it will be called \"default\".\nDifferent connections must have different names.",
                    "type": "string"
                },
                "namingStrategy": {
                    "$ref": "#/definitions/NamingStrategyInterface.a1ecc480",
                    "description": "Naming strategy to be used to name tables and columns in the database."
                },
                "subscribers": {
                    "description": "Subscribers to be loaded for this connection.\nAccepts both subscriber classes and directories where from subscribers need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "synchronize": {
                    "description": "Indicates if database schema should be auto created on every application launch.\nBe careful with this option and don't use this in production - otherwise you can lose production data.\nThis option is useful during debug and development.\nAlternative to it, you can use CLI and run schema:sync command.\n\nNote that for MongoDB database it does not create schema, because MongoDB is schemaless.\nInstead, it syncs just by creating indices.",
                    "type": "boolean"
                },
                "type": {
                    "description": "Database type.",
                    "enum": [
                        "sqlite"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Partial<SqljsConnectionOptions>.8fbfc2fc": {
            "properties": {
                "autoSave": {
                    "description": "Enables the autoSave mechanism which either saves to location\nor calls autoSaveCallback every time a change to the database is made.",
                    "type": "boolean"
                },
                "autoSaveCallback": {
                    "$ref": "#/definitions/Function.26fa9ff2",
                    "description": "A function that gets called on every change instead of the internal autoSave function.\nautoSave has to be enabled for this to work."
                },
                "cache": {
                    "anyOf": [
                        {
                            "properties": {
                                "alwaysEnabled": {
                                    "description": "If set to true then queries (using find methods and QueryBuilder's methods) will always be cached.",
                                    "type": "boolean"
                                },
                                "duration": {
                                    "description": "Time in milliseconds in which cache will expire.\nThis can be setup per-query.\nDefault value is 1000 which is equivalent to 1 second.",
                                    "type": "number"
                                },
                                "ignoreErrors": {
                                    "description": "Used to specify if cache errors should be ignored, and pass through the call to the Database.",
                                    "type": "boolean"
                                },
                                "options": {
                                    "description": "Used to provide redis connection options."
                                },
                                "provider": {
                                    "description": "Factory function for custom cache providers that implement QueryResultCache.",
                                    "type": "object"
                                },
                                "tableName": {
                                    "description": "Configurable table name for \"database\" type cache.\nDefault value is \"query-result-cache\"",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Type of caching.\n\n- \"database\" means cached values will be stored in the separate table in database. This is default value.\n- \"redis\" means cached values will be stored inside redis. You must provide redis connection options.",
                                    "enum": [
                                        "database",
                                        "ioredis",
                                        "ioredis/cluster",
                                        "redis"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Allows to setup cache options."
                },
                "cli": {
                    "description": "CLI settings.",
                    "properties": {
                        "entitiesDir": {
                            "description": "Directory where entities should be created by default.",
                            "type": "string"
                        },
                        "migrationsDir": {
                            "description": "Directory where migrations should be created by default.",
                            "type": "string"
                        },
                        "subscribersDir": {
                            "description": "Directory where subscribers should be created by default.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "database": {
                    "additionalProperties": false,
                    "description": "A Uint8Array that gets imported when the connection is opened.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "driver": {
                    "description": "The driver object\nThis defaults to require(\"sql.js\")"
                },
                "dropSchema": {
                    "description": "Drops the schema each time connection is being established.\nBe careful with this option and don't use this in production - otherwise you'll lose all production data.\nThis option is useful during debug and development.",
                    "type": "boolean"
                },
                "entities": {
                    "description": "Entities to be loaded for this connection.\nAccepts both entity classes and directories where from entities need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "$ref": "#/definitions/EntitySchema<any>.d3f4cb77"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "entityPrefix": {
                    "description": "Prefix to use on all tables (collections) of this connection in the database.",
                    "type": "string"
                },
                "entitySkipConstructor": {
                    "description": "When creating new Entity instances, skip all constructors when true.",
                    "type": "boolean"
                },
                "extra": {
                    "description": "Extra connection options to be passed to the underlying driver.\n\ntodo: deprecate this and move all database-specific types into hts own connection options object."
                },
                "location": {
                    "description": "File path (Node.js) or local storage key (browser) to load and save database from.\nIf this is specified without autoSave, the database is loaded from the location\nand can be saved manually via the SqljsEntityManager. If autoSave is enabled,\nlocation is used to automatically save the database.",
                    "type": "string"
                },
                "logger": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Logger.3fd36bab"
                        },
                        {
                            "enum": [
                                "advanced-console",
                                "debug",
                                "file",
                                "simple-console"
                            ],
                            "type": "string"
                        }
                    ],
                    "description": "Logger instance used to log queries and events in the ORM."
                },
                "logging": {
                    "anyOf": [
                        {
                            "items": {
                                "enum": [
                                    "error",
                                    "info",
                                    "log",
                                    "migration",
                                    "query",
                                    "schema",
                                    "warn"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "enum": [
                                "all",
                                false,
                                true
                            ]
                        }
                    ],
                    "description": "Logging options."
                },
                "maxQueryExecutionTime": {
                    "description": "Maximum number of milliseconds query should be executed before logger log a warning.",
                    "type": "number"
                },
                "migrations": {
                    "description": "Migrations to be loaded for this connection.\nAccepts both migration classes and directories where from migrations need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "migrationsRun": {
                    "description": "Indicates if migrations should be auto run on every application launch.\nAlternative to it, you can use CLI and run migrations:run command.",
                    "type": "boolean"
                },
                "migrationsTableName": {
                    "description": "Migrations table name, in case of different name from \"migrations\".\nAccepts single string name.",
                    "type": "string"
                },
                "migrationsTransactionMode": {
                    "description": "Transaction mode for migrations to run in",
                    "enum": [
                        "all",
                        "each",
                        "none"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Connection name. If connection name is not given then it will be called \"default\".\nDifferent connections must have different names.",
                    "type": "string"
                },
                "namingStrategy": {
                    "$ref": "#/definitions/NamingStrategyInterface.a1ecc480",
                    "description": "Naming strategy to be used to name tables and columns in the database."
                },
                "sqlJsConfig": {
                    "description": "Config that's used to initialize sql.js."
                },
                "subscribers": {
                    "description": "Subscribers to be loaded for this connection.\nAccepts both subscriber classes and directories where from subscribers need to be loaded.\nDirectories support glob patterns.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/Function.26fa9ff2"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "synchronize": {
                    "description": "Indicates if database schema should be auto created on every application launch.\nBe careful with this option and don't use this in production - otherwise you can lose production data.\nThis option is useful during debug and development.\nAlternative to it, you can use CLI and run schema:sync command.\n\nNote that for MongoDB database it does not create schema, because MongoDB is schemaless.\nInstead, it syncs just by creating indices.",
                    "type": "boolean"
                },
                "type": {
                    "description": "Database type.",
                    "enum": [
                        "sqljs"
                    ],
                    "type": "string"
                },
                "useLocalForage": {
                    "description": "Enables the usage of the localforage library to save & load the database asynchronously from the\nindexedDB instead of using the synchron local storage methods in a browser environment.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Partial<{deepLinking:boolean;displayOperationId:boolean;defaultModelsExpandDepth:number;defaultModelExpandDepth:number;defaultModelRendering:string;displayRequestDuration:boolean;docExpansion:string;filter:string|boolean;layout:string;maxDisplayedTags:number;showExtensions:boolean;showCommonExtensions:boolean;useUnsafeMarkdown:boolean;syntaxHighlight:false|{activate?:boolean;theme?:string;};tryItOutEnabled:boolean;validatorUrl:string;persistAuthorization:boolean;}>.8fbfc2fc": {
            "properties": {
                "deepLinking": {
                    "type": "boolean"
                },
                "defaultModelExpandDepth": {
                    "type": "number"
                },
                "defaultModelRendering": {
                    "type": "string"
                },
                "defaultModelsExpandDepth": {
                    "type": "number"
                },
                "displayOperationId": {
                    "type": "boolean"
                },
                "displayRequestDuration": {
                    "type": "boolean"
                },
                "docExpansion": {
                    "type": "string"
                },
                "filter": {
                    "type": [
                        "string",
                        "boolean"
                    ]
                },
                "layout": {
                    "type": "string"
                },
                "maxDisplayedTags": {
                    "type": "number"
                },
                "persistAuthorization": {
                    "type": "boolean"
                },
                "showCommonExtensions": {
                    "type": "boolean"
                },
                "showExtensions": {
                    "type": "boolean"
                },
                "syntaxHighlight": {
                    "anyOf": [
                        {
                            "properties": {
                                "activate": {
                                    "type": "boolean"
                                },
                                "theme": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "enum": [
                                false
                            ],
                            "type": "boolean"
                        }
                    ]
                },
                "tryItOutEnabled": {
                    "type": "boolean"
                },
                "useUnsafeMarkdown": {
                    "type": "boolean"
                },
                "validatorUrl": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PostgresConnectionCredentialsOptions.6e8ec23c": {
            "description": "Postgres specific connection credential options.",
            "properties": {
                "database": {
                    "description": "Database name to connect to.",
                    "type": "string"
                },
                "host": {
                    "description": "Database host.",
                    "type": "string"
                },
                "password": {
                    "description": "Database password.",
                    "type": [
                        "string",
                        "object"
                    ]
                },
                "port": {
                    "description": "Database host port.",
                    "type": "number"
                },
                "ssl": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/TlsOptions.a939cba2"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "Object with ssl parameters"
                },
                "url": {
                    "description": "Connection url where perform connection to.",
                    "type": "string"
                },
                "username": {
                    "description": "Database username.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PxfObject.f659e6f6": {
            "properties": {
                "buf": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "PFX or PKCS12 encoded private key and certificate chain."
                },
                "passphrase": {
                    "description": "Optional passphrase.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ReadPreference.2798f9a5": {
            "description": "Creates a new ReadPreference instance.",
            "properties": {
                "mode": {
                    "description": "The ReadPreference mode as listed above.",
                    "type": "string"
                },
                "tags": {
                    "description": "An object representing read preference tags."
                }
            },
            "type": "object"
        },
        "Record<\"url\"|\"name\",string>.6baeb16f": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Record<string,Iterable<ContentSecurityPolicyDirectiveValue>|typeofdangerouslyDisableDefaultSrc>.6baeb16f": {
            "type": "object"
        },
        "Record<string,any>.6baeb16f": {
            "type": "object"
        },
        "Record<string,string|string[]>.6baeb16f": {
            "type": "object"
        },
        "Record<string,string|{name:string;}>.6baeb16f": {
            "type": "object"
        },
        "RedisClientOptions.7a895eca": {
            "properties": {
                "autoResendUnfulfilledCommands": {
                    "description": "If true, client will resend unfulfilled commands(e.g. block commands) in the previous connection when reconnected.\ndefault: true.",
                    "type": "boolean"
                },
                "autoResubscribe": {
                    "description": "After reconnected, if the previous connection was in the subscriber mode, client will auto re-subscribe these channels.\ndefault: true.",
                    "type": "boolean"
                },
                "commandTimeout": {
                    "description": "The milliseconds before a timeout occurs when executing a single\ncommand. By default, there is no timeout and the client will wait\nindefinitely. The timeout is enforced only on the client side, not\nserver side. The server may still complete the operation after a\ntimeout error occurs on the client side.",
                    "type": "number"
                },
                "connectTimeout": {
                    "description": "The milliseconds before a timeout occurs during the initial connection to the Redis server.\ndefault: 10000.",
                    "type": "number"
                },
                "connectionName": {
                    "type": "string"
                },
                "db": {
                    "description": "Database index to use.",
                    "type": "number"
                },
                "disconnectTimeout": {
                    "description": "The milliseconds before socket.destroy() is called after socket.end() if the connection remains half-open during disconnection.\ndefault: 2000",
                    "type": "number"
                },
                "dropBufferSupport": {
                    "description": "If you are using the hiredis parser, it's highly recommended to enable this option.\nCreate another instance with dropBufferSupport disabled for other commands that you want to return binary instead of string",
                    "type": "boolean"
                },
                "enableAutoPipelining": {
                    "description": "When enabled, all commands issued during an event loop iteration are automatically wrapped in a\npipeline and sent to the server at the same time. This can improve performance by 30-50%.\ndefault: false.",
                    "type": "boolean"
                },
                "enableOfflineQueue": {
                    "description": "By default, if there is no active connection to the Redis server, commands are added to a queue\nand are executed once the connection is \"ready\" (when enableReadyCheck is true, \"ready\" means\nthe Redis server has loaded the database from disk, otherwise means the connection to the Redis\nserver has been established). If this option is false, when execute the command when the connection\nisn't ready, an error will be returned.",
                    "type": "boolean"
                },
                "enableReadyCheck": {
                    "description": "When a connection is established to the Redis server, the server might still be loading\nthe database from disk. While loading, the server not respond to any commands.\nTo work around this, when this option is true, ioredis will check the status of the Redis server,\nand when the Redis server is able to process commands, a ready event will be emitted.",
                    "type": "boolean"
                },
                "enableTLSForSentinelMode": {
                    "description": "Whether to support the `tls` option when connecting to Redis via sentinel mode.\ndefault: false.",
                    "type": "boolean"
                },
                "family": {
                    "description": "4 (IPv4) or 6 (IPv6), Defaults to 4.",
                    "type": "number"
                },
                "host": {
                    "type": "string"
                },
                "keepAlive": {
                    "description": "TCP KeepAlive on the socket with a X ms delay before start. Set to a non-number value to disable keepAlive.",
                    "type": "number"
                },
                "keyPrefix": {
                    "type": "string"
                },
                "lazyConnect": {
                    "type": "boolean"
                },
                "maxRetriesPerRequest": {
                    "description": "By default, all pending commands will be flushed with an error every\n20 retry attempts. That makes sure commands won't wait forever when\nthe connection is down. You can change this behavior by setting\n`maxRetriesPerRequest`.\n\nSet maxRetriesPerRequest to `null` to disable this behavior, and\nevery command will wait forever until the connection is alive again\n(which is the default behavior before ioredis v4).",
                    "type": "number"
                },
                "maxScriptsCachingTime": {
                    "description": "Default script definition caching time.",
                    "type": "number"
                },
                "name": {
                    "description": "default: null.",
                    "type": "string"
                },
                "namespace": {
                    "description": "The name of the client, and must be unique.",
                    "type": "string"
                },
                "natMap": {
                    "$ref": "#/definitions/NatMap.4640b982",
                    "description": "NAT map for sentinel connector.\ndefault: null."
                },
                "noDelay": {
                    "description": "Whether to disable the Nagle's Algorithm.",
                    "type": "boolean"
                },
                "onClientCreated": {
                    "description": "This function will be executed as soon as the client is created.",
                    "type": "object"
                },
                "password": {
                    "description": "If set, client will send AUTH command with the value of this option when connected.",
                    "type": "string"
                },
                "path": {
                    "description": "Local domain socket path. If set the port, host and family will be ignored.",
                    "type": "string"
                },
                "port": {
                    "type": "number"
                },
                "preferredSlaves": {
                    "anyOf": [
                        {
                            "items": {
                                "properties": {
                                    "ip": {
                                        "type": "string"
                                    },
                                    "port": {
                                        "type": "string"
                                    },
                                    "prio": {
                                        "type": "number"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        {
                            "properties": {
                                "ip": {
                                    "type": "string"
                                },
                                "port": {
                                    "type": "string"
                                },
                                "prio": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "object"
                        }
                    ],
                    "description": "Can be used to prefer a particular slave or set of slaves based on priority."
                },
                "readOnly": {
                    "description": "Enable READONLY mode for the connection. Only available for cluster mode.\ndefault: false.",
                    "type": "boolean"
                },
                "role": {
                    "description": "default: \"master\".",
                    "enum": [
                        "master",
                        "slave"
                    ],
                    "type": "string"
                },
                "sentinelPassword": {
                    "type": "string"
                },
                "sentinelTLS": {
                    "$ref": "#/definitions/SecureContextOptions.9a78e7d7"
                },
                "sentinelUsername": {
                    "type": "string"
                },
                "sentinels": {
                    "items": {
                        "properties": {
                            "host": {
                                "type": "string"
                            },
                            "port": {
                                "type": "number"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "showFriendlyErrorStack": {
                    "description": "Whether to show a friendly error stack. Will decrease the performance significantly.",
                    "type": "boolean"
                },
                "stringNumbers": {
                    "description": "Force numbers to be always returned as JavaScript strings. This option is necessary when dealing with big numbers (exceed the [-2^53, +2^53] range).",
                    "type": "boolean"
                },
                "tls": {
                    "$ref": "#/definitions/ConnectionOptions.2e8f96cb"
                },
                "updateSentinels": {
                    "description": "Update the given `sentinels` list with new IP addresses when communicating with existing sentinels.\ndefault: true.",
                    "type": "boolean"
                },
                "url": {
                    "description": "The URL specifies connection options.\n\n- redis:// https://www.iana.org/assignments/uri-schemes/prov/redis\n- rediss:// https://www.iana.org/assignments/uri-schemes/prov/rediss",
                    "type": "string"
                },
                "username": {
                    "description": "If set, client will send AUTH command with the value of this option as the first argument when connected. The `password` option must be set too. Username should only be set for Redis >=6.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RedisModuleOptions.ba465139": {
            "properties": {
                "closeClient": {
                    "description": "If `true`, all clients will be closed automatically on nestjs application shutdown.\n\nDefault: false",
                    "type": "boolean"
                },
                "commonOptions": {
                    "$ref": "#/definitions/RedisOptions.1c9ef57a",
                    "description": "The common options for each client."
                },
                "config": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/RedisClientOptions.7a895eca"
                        },
                        {
                            "items": {
                                "$ref": "#/definitions/RedisClientOptions.7a895eca"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Specify single or multiple clients."
                },
                "readyLog": {
                    "description": "If `true`, will show a message when the client is ready.\n\nDefault: false",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "RedisOptions.1c9ef57a": {
            "properties": {
                "autoResendUnfulfilledCommands": {
                    "description": "If true, client will resend unfulfilled commands(e.g. block commands) in the previous connection when reconnected.\ndefault: true.",
                    "type": "boolean"
                },
                "autoResubscribe": {
                    "description": "After reconnected, if the previous connection was in the subscriber mode, client will auto re-subscribe these channels.\ndefault: true.",
                    "type": "boolean"
                },
                "commandTimeout": {
                    "description": "The milliseconds before a timeout occurs when executing a single\ncommand. By default, there is no timeout and the client will wait\nindefinitely. The timeout is enforced only on the client side, not\nserver side. The server may still complete the operation after a\ntimeout error occurs on the client side.",
                    "type": "number"
                },
                "connectTimeout": {
                    "description": "The milliseconds before a timeout occurs during the initial connection to the Redis server.\ndefault: 10000.",
                    "type": "number"
                },
                "connectionName": {
                    "type": "string"
                },
                "db": {
                    "description": "Database index to use.",
                    "type": "number"
                },
                "disconnectTimeout": {
                    "description": "The milliseconds before socket.destroy() is called after socket.end() if the connection remains half-open during disconnection.\ndefault: 2000",
                    "type": "number"
                },
                "dropBufferSupport": {
                    "description": "If you are using the hiredis parser, it's highly recommended to enable this option.\nCreate another instance with dropBufferSupport disabled for other commands that you want to return binary instead of string",
                    "type": "boolean"
                },
                "enableAutoPipelining": {
                    "description": "When enabled, all commands issued during an event loop iteration are automatically wrapped in a\npipeline and sent to the server at the same time. This can improve performance by 30-50%.\ndefault: false.",
                    "type": "boolean"
                },
                "enableOfflineQueue": {
                    "description": "By default, if there is no active connection to the Redis server, commands are added to a queue\nand are executed once the connection is \"ready\" (when enableReadyCheck is true, \"ready\" means\nthe Redis server has loaded the database from disk, otherwise means the connection to the Redis\nserver has been established). If this option is false, when execute the command when the connection\nisn't ready, an error will be returned.",
                    "type": "boolean"
                },
                "enableReadyCheck": {
                    "description": "When a connection is established to the Redis server, the server might still be loading\nthe database from disk. While loading, the server not respond to any commands.\nTo work around this, when this option is true, ioredis will check the status of the Redis server,\nand when the Redis server is able to process commands, a ready event will be emitted.",
                    "type": "boolean"
                },
                "enableTLSForSentinelMode": {
                    "description": "Whether to support the `tls` option when connecting to Redis via sentinel mode.\ndefault: false.",
                    "type": "boolean"
                },
                "family": {
                    "description": "4 (IPv4) or 6 (IPv6), Defaults to 4.",
                    "type": "number"
                },
                "host": {
                    "type": "string"
                },
                "keepAlive": {
                    "description": "TCP KeepAlive on the socket with a X ms delay before start. Set to a non-number value to disable keepAlive.",
                    "type": "number"
                },
                "keyPrefix": {
                    "type": "string"
                },
                "lazyConnect": {
                    "type": "boolean"
                },
                "maxRetriesPerRequest": {
                    "description": "By default, all pending commands will be flushed with an error every\n20 retry attempts. That makes sure commands won't wait forever when\nthe connection is down. You can change this behavior by setting\n`maxRetriesPerRequest`.\n\nSet maxRetriesPerRequest to `null` to disable this behavior, and\nevery command will wait forever until the connection is alive again\n(which is the default behavior before ioredis v4).",
                    "type": "number"
                },
                "maxScriptsCachingTime": {
                    "description": "Default script definition caching time.",
                    "type": "number"
                },
                "name": {
                    "description": "default: null.",
                    "type": "string"
                },
                "natMap": {
                    "$ref": "#/definitions/NatMap.4640b982",
                    "description": "NAT map for sentinel connector.\ndefault: null."
                },
                "noDelay": {
                    "description": "Whether to disable the Nagle's Algorithm.",
                    "type": "boolean"
                },
                "password": {
                    "description": "If set, client will send AUTH command with the value of this option when connected.",
                    "type": "string"
                },
                "path": {
                    "description": "Local domain socket path. If set the port, host and family will be ignored.",
                    "type": "string"
                },
                "port": {
                    "type": "number"
                },
                "preferredSlaves": {
                    "anyOf": [
                        {
                            "items": {
                                "properties": {
                                    "ip": {
                                        "type": "string"
                                    },
                                    "port": {
                                        "type": "string"
                                    },
                                    "prio": {
                                        "type": "number"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        },
                        {
                            "properties": {
                                "ip": {
                                    "type": "string"
                                },
                                "port": {
                                    "type": "string"
                                },
                                "prio": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "object"
                        }
                    ],
                    "description": "Can be used to prefer a particular slave or set of slaves based on priority."
                },
                "readOnly": {
                    "description": "Enable READONLY mode for the connection. Only available for cluster mode.\ndefault: false.",
                    "type": "boolean"
                },
                "role": {
                    "description": "default: \"master\".",
                    "enum": [
                        "master",
                        "slave"
                    ],
                    "type": "string"
                },
                "sentinelPassword": {
                    "type": "string"
                },
                "sentinelTLS": {
                    "$ref": "#/definitions/SecureContextOptions.9a78e7d7"
                },
                "sentinelUsername": {
                    "type": "string"
                },
                "sentinels": {
                    "items": {
                        "properties": {
                            "host": {
                                "type": "string"
                            },
                            "port": {
                                "type": "number"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "showFriendlyErrorStack": {
                    "description": "Whether to show a friendly error stack. Will decrease the performance significantly.",
                    "type": "boolean"
                },
                "stringNumbers": {
                    "description": "Force numbers to be always returned as JavaScript strings. This option is necessary when dealing with big numbers (exceed the [-2^53, +2^53] range).",
                    "type": "boolean"
                },
                "tls": {
                    "$ref": "#/definitions/ConnectionOptions.2e8f96cb"
                },
                "updateSentinels": {
                    "description": "Update the given `sentinels` list with new IP addresses when communicating with existing sentinels.\ndefault: true.",
                    "type": "boolean"
                },
                "username": {
                    "description": "If set, client will send AUTH command with the value of this option as the first argument when connected. The `password` option must be set too. Username should only be set for Redis >=6.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ReferrerPolicyOptions.966fa954": {
            "properties": {
                "policy": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "RegExp.00b3a5e4": {
            "properties": {
                "dotAll": {
                    "type": "boolean"
                },
                "flags": {
                    "type": "string"
                },
                "global": {
                    "type": "boolean"
                },
                "ignoreCase": {
                    "type": "boolean"
                },
                "lastIndex": {
                    "type": "number"
                },
                "multiline": {
                    "type": "boolean"
                },
                "source": {
                    "type": "string"
                },
                "sticky": {
                    "type": "boolean"
                },
                "unicode": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "RenderPageOptions.4bf3175d": {
            "properties": {
                "cdnUrl": {
                    "type": "string"
                },
                "codeTheme": {
                    "$ref": "#/definitions/EditorColours.1061aca2"
                },
                "config": {
                },
                "endpoint": {
                    "type": "string"
                },
                "env": {
                },
                "faviconUrl": {
                    "type": "string"
                },
                "schema": {
                    "$ref": "#/definitions/IntrospectionResult.8e8c7538"
                },
                "settings": {
                    "$ref": "#/definitions/ISettings.fdcbb4bf"
                },
                "subscriptionEndpoint": {
                    "type": "string"
                },
                "tabs": {
                    "items": {
                        "$ref": "#/definitions/Tab.dffb9e4e"
                    },
                    "type": "array"
                },
                "title": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "workspaceName": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SecureContext.e8cb5ac3": {
            "properties": {
                "context": {
                }
            },
            "type": "object"
        },
        "SecureContextOptions.9a78e7d7": {
            "properties": {
                "ca": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "cert": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "ciphers": {
                    "type": "string"
                },
                "clientCertEngine": {
                    "type": "string"
                },
                "crl": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "dhparam": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "ecdhCurve": {
                    "type": "string"
                },
                "honorCipherOrder": {
                    "type": "boolean"
                },
                "key": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": true,
                                        "properties": {
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "maxVersion": {
                    "description": "Optionally set the maximum TLS version to allow. One\nof `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. Cannot be specified along with the\n`secureProtocol` option, use one or the other.\n**Default:** `'TLSv1.3'`, unless changed using CLI options. Using\n`--tls-max-v1.2` sets the default to `'TLSv1.2'`. Using `--tls-max-v1.3` sets the default to\n`'TLSv1.3'`. If multiple of the options are provided, the highest maximum is used.",
                    "enum": [
                        "TLSv1",
                        "TLSv1.1",
                        "TLSv1.2",
                        "TLSv1.3"
                    ],
                    "type": "string"
                },
                "minVersion": {
                    "description": "Optionally set the minimum TLS version to allow. One\nof `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. Cannot be specified along with the\n`secureProtocol` option, use one or the other.  It is not recommended to use\nless than TLSv1.2, but it may be required for interoperability.\n**Default:** `'TLSv1.2'`, unless changed using CLI options. Using\n`--tls-v1.0` sets the default to `'TLSv1'`. Using `--tls-v1.1` sets the default to\n`'TLSv1.1'`. Using `--tls-min-v1.3` sets the default to\n'TLSv1.3'. If multiple of the options are provided, the lowest minimum is used.",
                    "enum": [
                        "TLSv1",
                        "TLSv1.1",
                        "TLSv1.2",
                        "TLSv1.3"
                    ],
                    "type": "string"
                },
                "passphrase": {
                    "type": "string"
                },
                "pfx": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": true,
                                        "properties": {
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "secureOptions": {
                    "type": "number"
                },
                "secureProtocol": {
                    "type": "string"
                },
                "sessionIdContext": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "SecureContextOptions_1.fb121314": {
            "properties": {
                "ca": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Optionally override the trusted CA certificates. Default is to trust\nthe well-known CAs curated by Mozilla. Mozilla's CAs are completely\nreplaced when CAs are explicitly specified using this option."
                },
                "cert": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Cert chains in PEM format. One cert chain should be provided per\nprivate key. Each cert chain should consist of the PEM formatted\ncertificate for a provided private key, followed by the PEM\nformatted intermediate certificates (if any), in order, and not\nincluding the root CA (the root CA must be pre-known to the peer,\nsee ca). When providing multiple cert chains, they do not have to\nbe in the same order as their private keys in key. If the\nintermediate certificates are not provided, the peer will not be\nable to validate the certificate, and the handshake will fail."
                },
                "ciphers": {
                    "description": "Cipher suite specification, replacing the default. For more\ninformation, see modifying the default cipher suite. Permitted\nciphers can be obtained via tls.getCiphers(). Cipher names must be\nuppercased in order for OpenSSL to accept them.",
                    "type": "string"
                },
                "clientCertEngine": {
                    "description": "Name of an OpenSSL engine which can provide the client certificate.",
                    "type": "string"
                },
                "crl": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "PEM formatted CRLs (Certificate Revocation Lists)."
                },
                "dhparam": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Diffie Hellman parameters, required for Perfect Forward Secrecy. Use\nopenssl dhparam to create the parameters. The key length must be\ngreater than or equal to 1024 bits or else an error will be thrown.\nAlthough 1024 bits is permissible, use 2048 bits or larger for\nstronger security. If omitted or invalid, the parameters are\nsilently discarded and DHE ciphers will not be available."
                },
                "ecdhCurve": {
                    "description": "A string describing a named curve or a colon separated list of curve\nNIDs or names, for example P-521:P-384:P-256, to use for ECDH key\nagreement. Set to auto to select the curve automatically. Use\ncrypto.getCurves() to obtain a list of available curve names. On\nrecent releases, openssl ecparam -list_curves will also display the\nname and description of each available elliptic curve. Default:\ntls.DEFAULT_ECDH_CURVE.",
                    "type": "string"
                },
                "honorCipherOrder": {
                    "description": "Attempt to use the server's cipher suite preferences instead of the\nclient's. When true, causes SSL_OP_CIPHER_SERVER_PREFERENCE to be\nset in secureOptions",
                    "type": "boolean"
                },
                "key": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "$ref": "#/definitions/KeyObject.c82ab212"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Private keys in PEM format. PEM allows the option of private keys\nbeing encrypted. Encrypted keys will be decrypted with\noptions.passphrase. Multiple keys using different algorithms can be\nprovided either as an array of unencrypted key strings or buffers,\nor an array of objects in the form {pem: <string|buffer>[,\npassphrase: <string>]}. The object form can only occur in an array.\nobject.passphrase is optional. Encrypted keys will be decrypted with\nobject.passphrase if provided, or options.passphrase if it is not."
                },
                "maxVersion": {
                    "description": "Optionally set the maximum TLS version to allow. One\nof `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. Cannot be specified along with the\n`secureProtocol` option, use one or the other.\n**Default:** `'TLSv1.3'`, unless changed using CLI options. Using\n`--tls-max-v1.2` sets the default to `'TLSv1.2'`. Using `--tls-max-v1.3` sets the default to\n`'TLSv1.3'`. If multiple of the options are provided, the highest maximum is used.",
                    "enum": [
                        "TLSv1",
                        "TLSv1.1",
                        "TLSv1.2",
                        "TLSv1.3"
                    ],
                    "type": "string"
                },
                "minVersion": {
                    "description": "Optionally set the minimum TLS version to allow. One\nof `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. Cannot be specified along with the\n`secureProtocol` option, use one or the other.  It is not recommended to use\nless than TLSv1.2, but it may be required for interoperability.\n**Default:** `'TLSv1.2'`, unless changed using CLI options. Using\n`--tls-v1.0` sets the default to `'TLSv1'`. Using `--tls-v1.1` sets the default to\n`'TLSv1.1'`. Using `--tls-min-v1.3` sets the default to\n'TLSv1.3'. If multiple of the options are provided, the lowest minimum is used.",
                    "enum": [
                        "TLSv1",
                        "TLSv1.1",
                        "TLSv1.2",
                        "TLSv1.3"
                    ],
                    "type": "string"
                },
                "passphrase": {
                    "description": "Shared passphrase used for a single private key and/or a PFX.",
                    "type": "string"
                },
                "pfx": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "$ref": "#/definitions/PxfObject.f659e6f6"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "PFX or PKCS12 encoded private key and certificate chain. pfx is an\nalternative to providing key and cert individually. PFX is usually\nencrypted, if it is, passphrase will be used to decrypt it. Multiple\nPFX can be provided either as an array of unencrypted PFX buffers,\nor an array of objects in the form {buf: <string|buffer>[,\npassphrase: <string>]}. The object form can only occur in an array.\nobject.passphrase is optional. Encrypted PFX will be decrypted with\nobject.passphrase if provided, or options.passphrase if it is not."
                },
                "privateKeyEngine": {
                    "description": "Name of an OpenSSL engine to get private key from. Should be used\ntogether with privateKeyIdentifier.",
                    "type": "string"
                },
                "privateKeyIdentifier": {
                    "description": "Identifier of a private key managed by an OpenSSL engine. Should be\nused together with privateKeyEngine. Should not be set together with\nkey, because both options define a private key in different ways.",
                    "type": "string"
                },
                "secureOptions": {
                    "description": "Optionally affect the OpenSSL protocol behavior, which is not\nusually necessary. This should be used carefully if at all! Value is\na numeric bitmask of the SSL_OP_* options from OpenSSL Options",
                    "type": "number"
                },
                "secureProtocol": {
                    "description": "Legacy mechanism to select the TLS protocol version to use, it does\nnot support independent control of the minimum and maximum version,\nand does not support limiting the protocol to TLSv1.3. Use\nminVersion and maxVersion instead. The possible values are listed as\nSSL_METHODS, use the function names as strings. For example, use\n'TLSv1_1_method' to force TLS version 1.1, or 'TLS_method' to allow\nany TLS protocol version up to TLSv1.3. It is not recommended to use\nTLS versions less than 1.2, but it may be required for\ninteroperability. Default: none, see minVersion.",
                    "type": "string"
                },
                "sessionIdContext": {
                    "description": "Opaque identifier used by servers to ensure session state is not\nshared between applications. Unused by clients.",
                    "type": "string"
                },
                "sessionTimeout": {
                    "description": "The number of seconds after which a TLS session created by the\nserver will no longer be resumable. See Session Resumption for more\ninformation. Default: 300.",
                    "type": "number"
                },
                "sigalgs": {
                    "description": "Colon-separated list of supported signature algorithms. The list\ncan contain digest algorithms (SHA256, MD5 etc.), public key\nalgorithms (RSA-PSS, ECDSA etc.), combination of both (e.g\n'RSA+SHA384') or TLS v1.3 scheme names (e.g. rsa_pss_pss_sha512).",
                    "type": "string"
                },
                "ticketKeys": {
                    "additionalProperties": false,
                    "description": "48-bytes of cryptographically strong pseudo-random data.\nSee Session Resumption for more information.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "SignOptions.6ae77ece": {
            "properties": {
                "algorithm": {
                    "description": "Signature algorithm. Could be one of these values :\n- HS256:    HMAC using SHA-256 hash algorithm (default)\n- HS384:    HMAC using SHA-384 hash algorithm\n- HS512:    HMAC using SHA-512 hash algorithm\n- RS256:    RSASSA using SHA-256 hash algorithm\n- RS384:    RSASSA using SHA-384 hash algorithm\n- RS512:    RSASSA using SHA-512 hash algorithm\n- ES256:    ECDSA using P-256 curve and SHA-256 hash algorithm\n- ES384:    ECDSA using P-384 curve and SHA-384 hash algorithm\n- ES512:    ECDSA using P-521 curve and SHA-512 hash algorithm\n- none:     No digital signature or MAC value included",
                    "enum": [
                        "ES256",
                        "ES384",
                        "ES512",
                        "HS256",
                        "HS384",
                        "HS512",
                        "PS256",
                        "PS384",
                        "PS512",
                        "RS256",
                        "RS384",
                        "RS512",
                        "none"
                    ],
                    "type": "string"
                },
                "audience": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "encoding": {
                    "type": "string"
                },
                "expiresIn": {
                    "description": "expressed in seconds or a string describing a time span [zeit/ms](https://github.com/zeit/ms.js).  Eg: 60, \"2 days\", \"10h\", \"7d\"",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "header": {
                    "$ref": "#/definitions/JwtHeader.375edd21"
                },
                "issuer": {
                    "type": "string"
                },
                "jwtid": {
                    "type": "string"
                },
                "keyid": {
                    "type": "string"
                },
                "mutatePayload": {
                    "type": "boolean"
                },
                "noTimestamp": {
                    "type": "boolean"
                },
                "notBefore": {
                    "description": "expressed in seconds or a string describing a time span [zeit/ms](https://github.com/zeit/ms.js).  Eg: 60, \"2 days\", \"10h\", \"7d\"",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "subject": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Socket.649d9a60": {
            "description": "This class is an abstraction of a TCP socket or a streaming `IPC` endpoint\n(uses named pipes on Windows, and Unix domain sockets otherwise). It is also\nan `EventEmitter`.\n\nA `net.Socket` can be created by the user and used directly to interact with\na server. For example, it is returned by {@link createConnection},\nso the user can use it to talk to the server.\n\nIt can also be created by Node.js and passed to the user when a connection\nis received. For example, it is passed to the listeners of a `'connection'` event emitted on a {@link Server}, so the user can use\nit to interact with the client.",
            "properties": {
                "allowHalfOpen": {
                    "description": "If `false` then the stream will automatically end the writable side when the\nreadable side ends. Set initially by the `allowHalfOpen` constructor option,\nwhich defaults to `false`.\n\nThis can be changed manually to change the half-open behavior of an existing`Duplex` stream instance, but must be changed before the `'end'` event is\nemitted.",
                    "type": "boolean"
                },
                "bufferSize": {
                    "description": "This property shows the number of characters buffered for writing. The buffer\nmay contain strings whose length after encoding is not yet known. So this number\nis only an approximation of the number of bytes in the buffer.\n\n`net.Socket` has the property that `socket.write()` always works. This is to\nhelp users get up and running quickly. The computer cannot always keep up\nwith the amount of data that is written to a socket. The network connection\nsimply might be too slow. Node.js will internally queue up the data written to a\nsocket and send it out over the wire when it is possible.\n\nThe consequence of this internal buffering is that memory may grow.\nUsers who experience large or growing `bufferSize` should attempt to\n\"throttle\" the data flows in their program with `socket.pause()` and `socket.resume()`.",
                    "type": "number"
                },
                "bytesRead": {
                    "description": "The amount of received bytes.",
                    "type": "number"
                },
                "bytesWritten": {
                    "description": "The amount of bytes sent.",
                    "type": "number"
                },
                "connecting": {
                    "description": "If `true`,`socket.connect(options[, connectListener])` was\ncalled and has not yet finished. It will stay `true` until the socket becomes\nconnected, then it is set to `false` and the `'connect'` event is emitted. Note\nthat the `socket.connect(options[, connectListener])` callback is a listener for the `'connect'` event.",
                    "type": "boolean"
                },
                "destroyed": {
                    "description": "See `writable.destroyed` for further details.",
                    "type": "boolean"
                },
                "localAddress": {
                    "description": "The string representation of the local IP address the remote client is\nconnecting on. For example, in a server listening on `'0.0.0.0'`, if a client\nconnects on `'192.168.1.1'`, the value of `socket.localAddress` would be`'192.168.1.1'`.",
                    "type": "string"
                },
                "localPort": {
                    "description": "The numeric representation of the local port. For example, `80` or `21`.",
                    "type": "number"
                },
                "readable": {
                    "description": "Is `true` if it is safe to call `readable.read()`, which means\nthe stream has not been destroyed or emitted `'error'` or `'end'`.",
                    "type": "boolean"
                },
                "readableAborted": {
                    "description": "Returns whether the stream was destroyed or errored before emitting `'end'`.",
                    "type": "boolean"
                },
                "readableDidRead": {
                    "description": "Returns whether `'data'` has been emitted.",
                    "type": "boolean"
                },
                "readableEncoding": {
                    "description": "Getter for the property `encoding` of a given `Readable` stream. The `encoding`property can be set using the `readable.setEncoding()` method.",
                    "enum": [
                        "ascii",
                        "base64",
                        "base64url",
                        "binary",
                        "hex",
                        "latin1",
                        "ucs-2",
                        "ucs2",
                        "utf-8",
                        "utf16le",
                        "utf8"
                    ],
                    "type": "string"
                },
                "readableEnded": {
                    "description": "Becomes `true` when `'end'` event is emitted.",
                    "type": "boolean"
                },
                "readableFlowing": {
                    "description": "This property reflects the current state of a `Readable` stream as described\nin the `Three states` section.",
                    "type": "boolean"
                },
                "readableHighWaterMark": {
                    "description": "Returns the value of `highWaterMark` passed when creating this `Readable`.",
                    "type": "number"
                },
                "readableLength": {
                    "description": "This property contains the number of bytes (or objects) in the queue\nready to be read. The value provides introspection data regarding\nthe status of the `highWaterMark`.",
                    "type": "number"
                },
                "readableObjectMode": {
                    "description": "Getter for the property `objectMode` of a given `Readable` stream.",
                    "type": "boolean"
                },
                "remoteAddress": {
                    "description": "The string representation of the remote IP address. For example,`'74.125.127.100'` or `'2001:4860:a005::68'`. Value may be `undefined` if\nthe socket is destroyed (for example, if the client disconnected).",
                    "type": "string"
                },
                "remoteFamily": {
                    "description": "The string representation of the remote IP family. `'IPv4'` or `'IPv6'`.",
                    "type": "string"
                },
                "remotePort": {
                    "description": "The numeric representation of the remote port. For example, `80` or `21`.",
                    "type": "number"
                },
                "writable": {
                    "description": "Is `true` if it is safe to call `writable.write()`, which means\nthe stream has not been destroyed, errored or ended.",
                    "type": "boolean"
                },
                "writableCorked": {
                    "description": "Number of times `writable.uncork()` needs to be\ncalled in order to fully uncork the stream.",
                    "type": "number"
                },
                "writableEnded": {
                    "description": "Is `true` after `writable.end()` has been called. This property\ndoes not indicate whether the data has been flushed, for this use `writable.writableFinished` instead.",
                    "type": "boolean"
                },
                "writableFinished": {
                    "description": "Is set to `true` immediately before the `'finish'` event is emitted.",
                    "type": "boolean"
                },
                "writableHighWaterMark": {
                    "description": "Return the value of `highWaterMark` passed when creating this `Writable`.",
                    "type": "number"
                },
                "writableLength": {
                    "description": "This property contains the number of bytes (or objects) in the queue\nready to be written. The value provides introspection data regarding\nthe status of the `highWaterMark`.",
                    "type": "number"
                },
                "writableObjectMode": {
                    "description": "Getter for the property `objectMode` of a given `Writable` stream.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SqlServerConnectionCredentialsOptions.777c2ca6": {
            "description": "SqlServer specific connection credential options.",
            "properties": {
                "authentication": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DefaultAuthentication.75a6be8e"
                        },
                        {
                            "$ref": "#/definitions/AzureActiveDirectoryAccessTokenAuthentication.5537ff98"
                        },
                        {
                            "$ref": "#/definitions/AzureActiveDirectoryMsiAppServiceAuthentication.de0d5e38"
                        },
                        {
                            "$ref": "#/definitions/AzureActiveDirectoryMsiVmAuthentication.68712ae5"
                        },
                        {
                            "$ref": "#/definitions/AzureActiveDirectoryPasswordAuthentication.32c8401d"
                        },
                        {
                            "$ref": "#/definitions/AzureActiveDirectoryServicePrincipalSecret.f15591c6"
                        },
                        {
                            "$ref": "#/definitions/NtlmAuthentication.7f93c4a6"
                        }
                    ],
                    "description": "Authentication settings\nIt overrides username and password, when passed."
                },
                "database": {
                    "description": "Database name to connect to.",
                    "type": "string"
                },
                "domain": {
                    "description": "Once you set domain, driver will connect to SQL Server using domain login.",
                    "type": "string"
                },
                "host": {
                    "description": "Database host.",
                    "type": "string"
                },
                "password": {
                    "description": "Database password.",
                    "type": "string"
                },
                "port": {
                    "description": "Database host port.",
                    "type": "number"
                },
                "url": {
                    "description": "Connection url where perform connection to.",
                    "type": "string"
                },
                "username": {
                    "description": "Database username.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "StrictTransportSecurityOptions.b8c2e1a8": {
            "properties": {
                "includeSubDomains": {
                    "type": "boolean"
                },
                "maxAge": {
                    "type": "number"
                },
                "preload": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "T.b6e4540a": {
            "type": "object"
        },
        "Tab.dffb9e4e": {
            "properties": {
                "endpoint": {
                    "type": "string"
                },
                "headers": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "type": "object"
                },
                "name": {
                    "type": "string"
                },
                "query": {
                    "type": "string"
                },
                "responses": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "variables": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TableType.7b1aa5d7": {
            "description": "Table type. Tables can be closure, junction,, etc.",
            "enum": [
                "closure",
                "closure-junction",
                "entity-child",
                "junction",
                "regular",
                "view"
            ],
            "type": "string"
        },
        "Theme.ab0ef721": {
            "enum": [
                "dark",
                "light"
            ],
            "type": "string"
        },
        "TlsOptions.a939cba2": {
            "properties": {
                "ALPNProtocols": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "additionalProperties": false,
                                "patternProperties": {
                                    "^[0-9]+$": {
                                        "type": "number"
                                    }
                                },
                                "type": "object"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "An array of strings or a Buffer naming possible ALPN protocols.\n(Protocols should be ordered by their priority.)"
                },
                "SNICallback": {
                    "description": "SNICallback(servername, cb) <Function> A function that will be\ncalled if the client supports SNI TLS extension. Two arguments\nwill be passed when called: servername and cb. SNICallback should\ninvoke cb(null, ctx), where ctx is a SecureContext instance.\n(tls.createSecureContext(...) can be used to get a proper\nSecureContext.) If SNICallback wasn't provided the default callback\nwith high-level API will be used (see below).",
                    "type": "object"
                },
                "allowHalfOpen": {
                    "default": false,
                    "description": "Indicates whether half-opened TCP connections are allowed.",
                    "type": "boolean"
                },
                "ca": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Optionally override the trusted CA certificates. Default is to trust\nthe well-known CAs curated by Mozilla. Mozilla's CAs are completely\nreplaced when CAs are explicitly specified using this option."
                },
                "cert": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Cert chains in PEM format. One cert chain should be provided per\nprivate key. Each cert chain should consist of the PEM formatted\ncertificate for a provided private key, followed by the PEM\nformatted intermediate certificates (if any), in order, and not\nincluding the root CA (the root CA must be pre-known to the peer,\nsee ca). When providing multiple cert chains, they do not have to\nbe in the same order as their private keys in key. If the\nintermediate certificates are not provided, the peer will not be\nable to validate the certificate, and the handshake will fail."
                },
                "ciphers": {
                    "description": "Cipher suite specification, replacing the default. For more\ninformation, see modifying the default cipher suite. Permitted\nciphers can be obtained via tls.getCiphers(). Cipher names must be\nuppercased in order for OpenSSL to accept them.",
                    "type": "string"
                },
                "clientCertEngine": {
                    "description": "Name of an OpenSSL engine which can provide the client certificate.",
                    "type": "string"
                },
                "crl": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "PEM formatted CRLs (Certificate Revocation Lists)."
                },
                "dhparam": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Diffie Hellman parameters, required for Perfect Forward Secrecy. Use\nopenssl dhparam to create the parameters. The key length must be\ngreater than or equal to 1024 bits or else an error will be thrown.\nAlthough 1024 bits is permissible, use 2048 bits or larger for\nstronger security. If omitted or invalid, the parameters are\nsilently discarded and DHE ciphers will not be available."
                },
                "ecdhCurve": {
                    "description": "A string describing a named curve or a colon separated list of curve\nNIDs or names, for example P-521:P-384:P-256, to use for ECDH key\nagreement. Set to auto to select the curve automatically. Use\ncrypto.getCurves() to obtain a list of available curve names. On\nrecent releases, openssl ecparam -list_curves will also display the\nname and description of each available elliptic curve. Default:\ntls.DEFAULT_ECDH_CURVE.",
                    "type": "string"
                },
                "enableTrace": {
                    "default": false,
                    "description": "When enabled, TLS packet trace information is written to `stderr`. This can be\nused to debug TLS connection problems.",
                    "type": "boolean"
                },
                "handshakeTimeout": {
                    "description": "Abort the connection if the SSL/TLS handshake does not finish in the\nspecified number of milliseconds. A 'tlsClientError' is emitted on\nthe tls.Server object whenever a handshake times out. Default:\n120000 (120 seconds).",
                    "type": "number"
                },
                "honorCipherOrder": {
                    "description": "Attempt to use the server's cipher suite preferences instead of the\nclient's. When true, causes SSL_OP_CIPHER_SERVER_PREFERENCE to be\nset in secureOptions",
                    "type": "boolean"
                },
                "key": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "$ref": "#/definitions/KeyObject.c82ab212"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Private keys in PEM format. PEM allows the option of private keys\nbeing encrypted. Encrypted keys will be decrypted with\noptions.passphrase. Multiple keys using different algorithms can be\nprovided either as an array of unencrypted key strings or buffers,\nor an array of objects in the form {pem: <string|buffer>[,\npassphrase: <string>]}. The object form can only occur in an array.\nobject.passphrase is optional. Encrypted keys will be decrypted with\nobject.passphrase if provided, or options.passphrase if it is not."
                },
                "maxVersion": {
                    "description": "Optionally set the maximum TLS version to allow. One\nof `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. Cannot be specified along with the\n`secureProtocol` option, use one or the other.\n**Default:** `'TLSv1.3'`, unless changed using CLI options. Using\n`--tls-max-v1.2` sets the default to `'TLSv1.2'`. Using `--tls-max-v1.3` sets the default to\n`'TLSv1.3'`. If multiple of the options are provided, the highest maximum is used.",
                    "enum": [
                        "TLSv1",
                        "TLSv1.1",
                        "TLSv1.2",
                        "TLSv1.3"
                    ],
                    "type": "string"
                },
                "minVersion": {
                    "description": "Optionally set the minimum TLS version to allow. One\nof `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. Cannot be specified along with the\n`secureProtocol` option, use one or the other.  It is not recommended to use\nless than TLSv1.2, but it may be required for interoperability.\n**Default:** `'TLSv1.2'`, unless changed using CLI options. Using\n`--tls-v1.0` sets the default to `'TLSv1'`. Using `--tls-v1.1` sets the default to\n`'TLSv1.1'`. Using `--tls-min-v1.3` sets the default to\n'TLSv1.3'. If multiple of the options are provided, the lowest minimum is used.",
                    "enum": [
                        "TLSv1",
                        "TLSv1.1",
                        "TLSv1.2",
                        "TLSv1.3"
                    ],
                    "type": "string"
                },
                "passphrase": {
                    "description": "Shared passphrase used for a single private key and/or a PFX.",
                    "type": "string"
                },
                "pauseOnConnect": {
                    "default": false,
                    "description": "Indicates whether the socket should be paused on incoming connections.",
                    "type": "boolean"
                },
                "pfx": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "$ref": "#/definitions/PxfObject.f659e6f6"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "PFX or PKCS12 encoded private key and certificate chain. pfx is an\nalternative to providing key and cert individually. PFX is usually\nencrypted, if it is, passphrase will be used to decrypt it. Multiple\nPFX can be provided either as an array of unencrypted PFX buffers,\nor an array of objects in the form {buf: <string|buffer>[,\npassphrase: <string>]}. The object form can only occur in an array.\nobject.passphrase is optional. Encrypted PFX will be decrypted with\nobject.passphrase if provided, or options.passphrase if it is not."
                },
                "privateKeyEngine": {
                    "description": "Name of an OpenSSL engine to get private key from. Should be used\ntogether with privateKeyIdentifier.",
                    "type": "string"
                },
                "privateKeyIdentifier": {
                    "description": "Identifier of a private key managed by an OpenSSL engine. Should be\nused together with privateKeyEngine. Should not be set together with\nkey, because both options define a private key in different ways.",
                    "type": "string"
                },
                "pskIdentityHint": {
                    "description": "hint to send to a client to help\nwith selecting the identity during TLS-PSK negotiation. Will be ignored\nin TLS 1.3. Upon failing to set pskIdentityHint `tlsClientError` will be\nemitted with `ERR_TLS_PSK_SET_IDENTIY_HINT_FAILED` code.",
                    "type": "string"
                },
                "rejectUnauthorized": {
                    "default": true,
                    "description": "If true the server will reject any connection which is not\nauthorized with the list of supplied CAs. This option only has an\neffect if requestCert is true.",
                    "type": "boolean"
                },
                "requestCert": {
                    "description": "If true the server will request a certificate from clients that\nconnect and attempt to verify that certificate. Defaults to\nfalse.",
                    "type": "boolean"
                },
                "secureContext": {
                    "$ref": "#/definitions/SecureContext.e8cb5ac3",
                    "description": "An optional TLS context object from tls.createSecureContext()"
                },
                "secureOptions": {
                    "description": "Optionally affect the OpenSSL protocol behavior, which is not\nusually necessary. This should be used carefully if at all! Value is\na numeric bitmask of the SSL_OP_* options from OpenSSL Options",
                    "type": "number"
                },
                "secureProtocol": {
                    "description": "Legacy mechanism to select the TLS protocol version to use, it does\nnot support independent control of the minimum and maximum version,\nand does not support limiting the protocol to TLSv1.3. Use\nminVersion and maxVersion instead. The possible values are listed as\nSSL_METHODS, use the function names as strings. For example, use\n'TLSv1_1_method' to force TLS version 1.1, or 'TLS_method' to allow\nany TLS protocol version up to TLSv1.3. It is not recommended to use\nTLS versions less than 1.2, but it may be required for\ninteroperability. Default: none, see minVersion.",
                    "type": "string"
                },
                "sessionIdContext": {
                    "description": "Opaque identifier used by servers to ensure session state is not\nshared between applications. Unused by clients.",
                    "type": "string"
                },
                "sessionTimeout": {
                    "description": "The number of seconds after which a TLS session created by the\nserver will no longer be resumable. See Session Resumption for more\ninformation. Default: 300.",
                    "type": "number"
                },
                "sigalgs": {
                    "description": "Colon-separated list of supported signature algorithms. The list\ncan contain digest algorithms (SHA256, MD5 etc.), public key\nalgorithms (RSA-PSS, ECDSA etc.), combination of both (e.g\n'RSA+SHA384') or TLS v1.3 scheme names (e.g. rsa_pss_pss_sha512).",
                    "type": "string"
                },
                "ticketKeys": {
                    "additionalProperties": false,
                    "description": "48-bytes of cryptographically strong pseudo-random data.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "URL.0f55bb67": {
            "description": "Browser-compatible `URL` class, implemented by following the WHATWG URL\nStandard. [Examples of parsed URLs](https://url.spec.whatwg.org/#example-url-parsing) may be found in the Standard itself.\nThe `URL` class is also available on the global object.\n\nIn accordance with browser conventions, all properties of `URL` objects\nare implemented as getters and setters on the class prototype, rather than as\ndata properties on the object itself. Thus, unlike `legacy urlObject` s,\nusing the `delete` keyword on any properties of `URL` objects (e.g. `delete myURL.protocol`, `delete myURL.pathname`, etc) has no effect but will still\nreturn `true`.",
            "properties": {
                "hash": {
                    "description": "Gets and sets the fragment portion of the URL.\n\n```js\nconst myURL = new URL('https://example.org/foo#bar');\nconsole.log(myURL.hash);\n// Prints #bar\n\nmyURL.hash = 'baz';\nconsole.log(myURL.href);\n// Prints https://example.org/foo#baz\n```\n\nInvalid URL characters included in the value assigned to the `hash` property\nare `percent-encoded`. The selection of which characters to\npercent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.",
                    "type": "string"
                },
                "host": {
                    "description": "Gets and sets the host portion of the URL.\n\n```js\nconst myURL = new URL('https://example.org:81/foo');\nconsole.log(myURL.host);\n// Prints example.org:81\n\nmyURL.host = 'example.com:82';\nconsole.log(myURL.href);\n// Prints https://example.com:82/foo\n```\n\nInvalid host values assigned to the `host` property are ignored.",
                    "type": "string"
                },
                "hostname": {
                    "description": "Gets and sets the host name portion of the URL. The key difference between`url.host` and `url.hostname` is that `url.hostname` does _not_ include the\nport.\n\n```js\nconst myURL = new URL('https://example.org:81/foo');\nconsole.log(myURL.hostname);\n// Prints example.org\n\n// Setting the hostname does not change the port\nmyURL.hostname = 'example.com:82';\nconsole.log(myURL.href);\n// Prints https://example.com:81/foo\n\n// Use myURL.host to change the hostname and port\nmyURL.host = 'example.org:82';\nconsole.log(myURL.href);\n// Prints https://example.org:82/foo\n```\n\nInvalid host name values assigned to the `hostname` property are ignored.",
                    "type": "string"
                },
                "href": {
                    "description": "Gets and sets the serialized URL.\n\n```js\nconst myURL = new URL('https://example.org/foo');\nconsole.log(myURL.href);\n// Prints https://example.org/foo\n\nmyURL.href = 'https://example.com/bar';\nconsole.log(myURL.href);\n// Prints https://example.com/bar\n```\n\nGetting the value of the `href` property is equivalent to calling {@link toString}.\n\nSetting the value of this property to a new value is equivalent to creating a\nnew `URL` object using `new URL(value)`. Each of the `URL`object's properties will be modified.\n\nIf the value assigned to the `href` property is not a valid URL, a `TypeError`will be thrown.",
                    "type": "string"
                },
                "origin": {
                    "description": "Gets the read-only serialization of the URL's origin.\n\n```js\nconst myURL = new URL('https://example.org/foo/bar?baz');\nconsole.log(myURL.origin);\n// Prints https://example.org\n```\n\n```js\nconst idnURL = new URL('https://測試');\nconsole.log(idnURL.origin);\n// Prints https://xn--g6w251d\n\nconsole.log(idnURL.hostname);\n// Prints xn--g6w251d\n```",
                    "type": "string"
                },
                "password": {
                    "description": "Gets and sets the password portion of the URL.\n\n```js\nconst myURL = new URL('https://abc:xyz@example.com');\nconsole.log(myURL.password);\n// Prints xyz\n\nmyURL.password = '123';\nconsole.log(myURL.href);\n// Prints https://abc:123@example.com\n```\n\nInvalid URL characters included in the value assigned to the `password` property\nare `percent-encoded`. The selection of which characters to\npercent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.",
                    "type": "string"
                },
                "pathname": {
                    "description": "Gets and sets the path portion of the URL.\n\n```js\nconst myURL = new URL('https://example.org/abc/xyz?123');\nconsole.log(myURL.pathname);\n// Prints /abc/xyz\n\nmyURL.pathname = '/abcdef';\nconsole.log(myURL.href);\n// Prints https://example.org/abcdef?123\n```\n\nInvalid URL characters included in the value assigned to the `pathname`property are `percent-encoded`. The selection of which characters\nto percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.",
                    "type": "string"
                },
                "port": {
                    "description": "Gets and sets the port portion of the URL.\n\nThe port value may be a number or a string containing a number in the range`0` to `65535` (inclusive). Setting the value to the default port of the`URL` objects given `protocol` will\nresult in the `port` value becoming\nthe empty string (`''`).\n\nThe port value can be an empty string in which case the port depends on\nthe protocol/scheme:\n\n<omitted>\n\nUpon assigning a value to the port, the value will first be converted to a\nstring using `.toString()`.\n\nIf that string is invalid but it begins with a number, the leading number is\nassigned to `port`.\nIf the number lies outside the range denoted above, it is ignored.\n\n```js\nconst myURL = new URL('https://example.org:8888');\nconsole.log(myURL.port);\n// Prints 8888\n\n// Default ports are automatically transformed to the empty string\n// (HTTPS protocol's default port is 443)\nmyURL.port = '443';\nconsole.log(myURL.port);\n// Prints the empty string\nconsole.log(myURL.href);\n// Prints https://example.org/\n\nmyURL.port = 1234;\nconsole.log(myURL.port);\n// Prints 1234\nconsole.log(myURL.href);\n// Prints https://example.org:1234/\n\n// Completely invalid port strings are ignored\nmyURL.port = 'abcd';\nconsole.log(myURL.port);\n// Prints 1234\n\n// Leading numbers are treated as a port number\nmyURL.port = '5678abcd';\nconsole.log(myURL.port);\n// Prints 5678\n\n// Non-integers are truncated\nmyURL.port = 1234.5678;\nconsole.log(myURL.port);\n// Prints 1234\n\n// Out-of-range numbers which are not represented in scientific notation\n// will be ignored.\nmyURL.port = 1e10; // 10000000000, will be range-checked as described below\nconsole.log(myURL.port);\n// Prints 1234\n```\n\nNumbers which contain a decimal point,\nsuch as floating-point numbers or numbers in scientific notation,\nare not an exception to this rule.\nLeading numbers up to the decimal point will be set as the URL's port,\nassuming they are valid:\n\n```js\nmyURL.port = 4.567e21;\nconsole.log(myURL.port);\n// Prints 4 (because it is the leading number in the string '4.567e21')\n```",
                    "type": "string"
                },
                "protocol": {
                    "description": "Gets and sets the protocol portion of the URL.\n\n```js\nconst myURL = new URL('https://example.org');\nconsole.log(myURL.protocol);\n// Prints https:\n\nmyURL.protocol = 'ftp';\nconsole.log(myURL.href);\n// Prints ftp://example.org/\n```\n\nInvalid URL protocol values assigned to the `protocol` property are ignored.",
                    "type": "string"
                },
                "search": {
                    "description": "Gets and sets the serialized query portion of the URL.\n\n```js\nconst myURL = new URL('https://example.org/abc?123');\nconsole.log(myURL.search);\n// Prints ?123\n\nmyURL.search = 'abc=xyz';\nconsole.log(myURL.href);\n// Prints https://example.org/abc?abc=xyz\n```\n\nAny invalid URL characters appearing in the value assigned the `search`property will be `percent-encoded`. The selection of which\ncharacters to percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.",
                    "type": "string"
                },
                "searchParams": {
                    "$ref": "#/definitions/URLSearchParams.0ff44655",
                    "description": "Gets the `URLSearchParams` object representing the query parameters of the\nURL. This property is read-only but the `URLSearchParams` object it provides\ncan be used to mutate the URL instance; to replace the entirety of query\nparameters of the URL, use the {@link search} setter. See `URLSearchParams` documentation for details.\n\nUse care when using `.searchParams` to modify the `URL` because,\nper the WHATWG specification, the `URLSearchParams` object uses\ndifferent rules to determine which characters to percent-encode. For\ninstance, the `URL` object will not percent encode the ASCII tilde (`~`)\ncharacter, while `URLSearchParams` will always encode it:\n\n```js\nconst myUrl = new URL('https://example.org/abc?foo=~bar');\n\nconsole.log(myUrl.search);  // prints ?foo=~bar\n\n// Modify the URL via searchParams...\nmyUrl.searchParams.sort();\n\nconsole.log(myUrl.search);  // prints ?foo=%7Ebar\n```"
                },
                "username": {
                    "description": "Gets and sets the username portion of the URL.\n\n```js\nconst myURL = new URL('https://abc:xyz@example.com');\nconsole.log(myURL.username);\n// Prints abc\n\nmyURL.username = '123';\nconsole.log(myURL.href);\n// Prints https://123:xyz@example.com/\n```\n\nAny invalid URL characters appearing in the value assigned the `username`property will be `percent-encoded`. The selection of which\ncharacters to percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "URLSearchParams.0ff44655": {
            "description": "The `URLSearchParams` API provides read and write access to the query of a`URL`. The `URLSearchParams` class can also be used standalone with one of the\nfour following constructors.\nThe `URLSearchParams` class is also available on the global object.\n\nThe WHATWG `URLSearchParams` interface and the `querystring` module have\nsimilar purpose, but the purpose of the `querystring` module is more\ngeneral, as it allows the customization of delimiter characters (`&#x26;` and `=`).\nOn the other hand, this API is designed purely for URL query strings.\n\n```js\nconst myURL = new URL('https://example.org/?abc=123');\nconsole.log(myURL.searchParams.get('abc'));\n// Prints 123\n\nmyURL.searchParams.append('abc', 'xyz');\nconsole.log(myURL.href);\n// Prints https://example.org/?abc=123&#x26;abc=xyz\n\nmyURL.searchParams.delete('abc');\nmyURL.searchParams.set('a', 'b');\nconsole.log(myURL.href);\n// Prints https://example.org/?a=b\n\nconst newSearchParams = new URLSearchParams(myURL.searchParams);\n// The above is equivalent to\n// const newSearchParams = new URLSearchParams(myURL.search);\n\nnewSearchParams.append('a', 'c');\nconsole.log(myURL.href);\n// Prints https://example.org/?a=b\nconsole.log(newSearchParams.toString());\n// Prints a=b&#x26;a=c\n\n// newSearchParams.toString() is implicitly called\nmyURL.search = newSearchParams;\nconsole.log(myURL.href);\n// Prints https://example.org/?a=b&#x26;a=c\nnewSearchParams.delete('a');\nconsole.log(myURL.href);\n// Prints https://example.org/?a=b&#x26;a=c\n```",
            "type": "object"
        },
        "ValidatorBehavior.7f46e60e": {
            "enum": [
                "error",
                "ignore",
                "warn"
            ],
            "type": "string"
        },
        "VerifyOptions.83626cc3": {
            "properties": {
                "algorithms": {
                    "items": {
                        "enum": [
                            "ES256",
                            "ES384",
                            "ES512",
                            "HS256",
                            "HS384",
                            "HS512",
                            "PS256",
                            "PS384",
                            "PS512",
                            "RS256",
                            "RS384",
                            "RS512",
                            "none"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "audience": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/RegExp.00b3a5e4"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "$ref": "#/definitions/RegExp.00b3a5e4"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "clockTimestamp": {
                    "type": "number"
                },
                "clockTolerance": {
                    "type": "number"
                },
                "complete": {
                    "description": "return an object with the decoded `{ payload, header, signature }` instead of only the usual content of the payload.",
                    "type": "boolean"
                },
                "ignoreExpiration": {
                    "type": "boolean"
                },
                "ignoreNotBefore": {
                    "type": "boolean"
                },
                "issuer": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "jwtid": {
                    "type": "string"
                },
                "maxAge": {
                    "type": "string"
                },
                "nonce": {
                    "description": "If you want to check `nonce` claim, provide a string value here.\nIt is used on Open ID for the ID Tokens. ([Open ID implementation notes](https://openid.net/specs/openid-connect-core-1_0.html#NonceNotes))",
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "XDnsPrefetchControlOptions.aa5b4553": {
            "properties": {
                "allow": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "XFrameOptionsOptions.b0eb16b9": {
            "properties": {
                "action": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "XPermittedCrossDomainPoliciesOptions.92415afb": {
            "properties": {
                "permittedPolicies": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "default.0a1e8d5d": {
            "properties": {
                "_agent": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Agent.e80544cb"
                        },
                        {
                            "$ref": "#/definitions/Agent_1.85531813"
                        },
                        {
                            "$ref": "#/definitions/HttpProxyAgent.d52ff670"
                        },
                        {
                            "$ref": "#/definitions/HttpsProxyAgent.260c4fdf"
                        }
                    ]
                },
                "_openRequests": {
                    "type": "number"
                },
                "_status": {
                    "type": "string"
                },
                "deadCount": {
                    "type": "number"
                },
                "headers": {
                    "$ref": "#/definitions/Record<string,any>.6baeb16f"
                },
                "id": {
                    "type": "string"
                },
                "makeRequest": {
                },
                "resurrectTimeout": {
                    "type": "number"
                },
                "roles": {
                    "$ref": "#/definitions/ConnectionRoles.66c9c587"
                },
                "ssl": {
                    "$ref": "#/definitions/ConnectionOptions.2e8f96cb"
                },
                "status": {
                    "type": "string"
                },
                "url": {
                    "$ref": "#/definitions/URL.0f55bb67"
                }
            },
            "type": "object"
        },
        "default_1.4288b4c4": {
            "properties": {
                "_isSniffing": {
                    "type": "boolean"
                },
                "_nextSniff": {
                    "type": "number"
                },
                "_sniffEnabled": {
                    "type": "boolean"
                },
                "compression": {
                    "enum": [
                        false,
                        "gzip"
                    ]
                },
                "connectionPool": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ConnectionPool.e2664093"
                        },
                        {
                            "$ref": "#/definitions/CloudConnectionPool.ec071824"
                        }
                    ]
                },
                "emit": {
                    "type": "object"
                },
                "maxRetries": {
                    "type": "number"
                },
                "opaqueIdPrefix": {
                    "type": "string"
                },
                "requestTimeout": {
                    "type": "number"
                },
                "serializer": {
                    "$ref": "#/definitions/default_2.0d8d187c"
                },
                "sniffEndpoint": {
                    "type": "string"
                },
                "sniffInterval": {
                    "type": "number"
                },
                "sniffOnConnectionFault": {
                    "type": "boolean"
                },
                "suggestCompression": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "default_2.0d8d187c": {
            "type": "object"
        },
        "generateRequestIdFn.dd2513c3": {
            "type": "object"
        },
        "nodeFilterFn.b35614ff": {
            "type": "object"
        },
        "nodeSelectorFn.3f8e2d58": {
            "type": "object"
        },
        "{[x:string]:EntitySchemaColumnOptions;}.79a6f9d7": {
            "description": "Entity column's options.",
            "type": "object"
        },
        "{[x:string]:EntitySchemaRelationOptions;}.6fe2076d": {
            "description": "Entity relation's options.",
            "type": "object"
        }
    },
    "properties": {
        "database": {
            "anyOf": [
                {
                    "allOf": [
                        {
                            "properties": {
                                "autoLoadEntities": {
                                    "type": "boolean"
                                },
                                "keepConnectionAlive": {
                                    "type": "boolean"
                                },
                                "retryAttempts": {
                                    "type": "number"
                                },
                                "retryDelay": {
                                    "type": "number"
                                },
                                "toRetry": {
                                    "type": "object"
                                },
                                "verboseRetryLog": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/Partial<CockroachConnectionOptions>.8fbfc2fc"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "properties": {
                                "autoLoadEntities": {
                                    "type": "boolean"
                                },
                                "keepConnectionAlive": {
                                    "type": "boolean"
                                },
                                "retryAttempts": {
                                    "type": "number"
                                },
                                "retryDelay": {
                                    "type": "number"
                                },
                                "toRetry": {
                                    "type": "object"
                                },
                                "verboseRetryLog": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/Partial<MysqlConnectionOptions>.8fbfc2fc"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "properties": {
                                "autoLoadEntities": {
                                    "type": "boolean"
                                },
                                "keepConnectionAlive": {
                                    "type": "boolean"
                                },
                                "retryAttempts": {
                                    "type": "number"
                                },
                                "retryDelay": {
                                    "type": "number"
                                },
                                "toRetry": {
                                    "type": "object"
                                },
                                "verboseRetryLog": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/Partial<PostgresConnectionOptions>.8fbfc2fc"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "properties": {
                                "autoLoadEntities": {
                                    "type": "boolean"
                                },
                                "keepConnectionAlive": {
                                    "type": "boolean"
                                },
                                "retryAttempts": {
                                    "type": "number"
                                },
                                "retryDelay": {
                                    "type": "number"
                                },
                                "toRetry": {
                                    "type": "object"
                                },
                                "verboseRetryLog": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/Partial<SqliteConnectionOptions>.8fbfc2fc"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "properties": {
                                "autoLoadEntities": {
                                    "type": "boolean"
                                },
                                "keepConnectionAlive": {
                                    "type": "boolean"
                                },
                                "retryAttempts": {
                                    "type": "number"
                                },
                                "retryDelay": {
                                    "type": "number"
                                },
                                "toRetry": {
                                    "type": "object"
                                },
                                "verboseRetryLog": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/Partial<SqlServerConnectionOptions>.8fbfc2fc"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "properties": {
                                "autoLoadEntities": {
                                    "type": "boolean"
                                },
                                "keepConnectionAlive": {
                                    "type": "boolean"
                                },
                                "retryAttempts": {
                                    "type": "number"
                                },
                                "retryDelay": {
                                    "type": "number"
                                },
                                "toRetry": {
                                    "type": "object"
                                },
                                "verboseRetryLog": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/Partial<OracleConnectionOptions>.8fbfc2fc"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "properties": {
                                "autoLoadEntities": {
                                    "type": "boolean"
                                },
                                "keepConnectionAlive": {
                                    "type": "boolean"
                                },
                                "retryAttempts": {
                                    "type": "number"
                                },
                                "retryDelay": {
                                    "type": "number"
                                },
                                "toRetry": {
                                    "type": "object"
                                },
                                "verboseRetryLog": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/Partial<MongoConnectionOptions>.8fbfc2fc"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "properties": {
                                "autoLoadEntities": {
                                    "type": "boolean"
                                },
                                "keepConnectionAlive": {
                                    "type": "boolean"
                                },
                                "retryAttempts": {
                                    "type": "number"
                                },
                                "retryDelay": {
                                    "type": "number"
                                },
                                "toRetry": {
                                    "type": "object"
                                },
                                "verboseRetryLog": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/Partial<CordovaConnectionOptions>.8fbfc2fc"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "properties": {
                                "autoLoadEntities": {
                                    "type": "boolean"
                                },
                                "keepConnectionAlive": {
                                    "type": "boolean"
                                },
                                "retryAttempts": {
                                    "type": "number"
                                },
                                "retryDelay": {
                                    "type": "number"
                                },
                                "toRetry": {
                                    "type": "object"
                                },
                                "verboseRetryLog": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/Partial<SqljsConnectionOptions>.8fbfc2fc"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "properties": {
                                "autoLoadEntities": {
                                    "type": "boolean"
                                },
                                "keepConnectionAlive": {
                                    "type": "boolean"
                                },
                                "retryAttempts": {
                                    "type": "number"
                                },
                                "retryDelay": {
                                    "type": "number"
                                },
                                "toRetry": {
                                    "type": "object"
                                },
                                "verboseRetryLog": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/Partial<ReactNativeConnectionOptions>.8fbfc2fc"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "properties": {
                                "autoLoadEntities": {
                                    "type": "boolean"
                                },
                                "keepConnectionAlive": {
                                    "type": "boolean"
                                },
                                "retryAttempts": {
                                    "type": "number"
                                },
                                "retryDelay": {
                                    "type": "number"
                                },
                                "toRetry": {
                                    "type": "object"
                                },
                                "verboseRetryLog": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/Partial<NativescriptConnectionOptions>.8fbfc2fc"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "properties": {
                                "autoLoadEntities": {
                                    "type": "boolean"
                                },
                                "keepConnectionAlive": {
                                    "type": "boolean"
                                },
                                "retryAttempts": {
                                    "type": "number"
                                },
                                "retryDelay": {
                                    "type": "number"
                                },
                                "toRetry": {
                                    "type": "object"
                                },
                                "verboseRetryLog": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/Partial<ExpoConnectionOptions>.8fbfc2fc"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "properties": {
                                "autoLoadEntities": {
                                    "type": "boolean"
                                },
                                "keepConnectionAlive": {
                                    "type": "boolean"
                                },
                                "retryAttempts": {
                                    "type": "number"
                                },
                                "retryDelay": {
                                    "type": "number"
                                },
                                "toRetry": {
                                    "type": "object"
                                },
                                "verboseRetryLog": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/Partial<AuroraDataApiConnectionOptions>.8fbfc2fc"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "properties": {
                                "autoLoadEntities": {
                                    "type": "boolean"
                                },
                                "keepConnectionAlive": {
                                    "type": "boolean"
                                },
                                "retryAttempts": {
                                    "type": "number"
                                },
                                "retryDelay": {
                                    "type": "number"
                                },
                                "toRetry": {
                                    "type": "object"
                                },
                                "verboseRetryLog": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/Partial<SapConnectionOptions>.8fbfc2fc"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "properties": {
                                "autoLoadEntities": {
                                    "type": "boolean"
                                },
                                "keepConnectionAlive": {
                                    "type": "boolean"
                                },
                                "retryAttempts": {
                                    "type": "number"
                                },
                                "retryDelay": {
                                    "type": "number"
                                },
                                "toRetry": {
                                    "type": "object"
                                },
                                "verboseRetryLog": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/Partial<AuroraDataApiPostgresConnectionOptions>.8fbfc2fc"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "properties": {
                                "autoLoadEntities": {
                                    "type": "boolean"
                                },
                                "keepConnectionAlive": {
                                    "type": "boolean"
                                },
                                "retryAttempts": {
                                    "type": "number"
                                },
                                "retryDelay": {
                                    "type": "number"
                                },
                                "toRetry": {
                                    "type": "object"
                                },
                                "verboseRetryLog": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/Partial<BetterSqlite3ConnectionOptions>.8fbfc2fc"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "properties": {
                                "autoLoadEntities": {
                                    "type": "boolean"
                                },
                                "keepConnectionAlive": {
                                    "type": "boolean"
                                },
                                "retryAttempts": {
                                    "type": "number"
                                },
                                "retryDelay": {
                                    "type": "number"
                                },
                                "toRetry": {
                                    "type": "object"
                                },
                                "verboseRetryLog": {
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/Partial<CapacitorConnectionOptions>.8fbfc2fc"
                        }
                    ]
                }
            ]
        },
        "elasticsearch": {
            "$ref": "#/definitions/ClientOptions.392ef7a5"
        },
        "graphql": {
            "$ref": "#/definitions/GqlModuleOptions.a3cc53d4"
        },
        "jwt": {
            "$ref": "#/definitions/JwtModuleOptions.698577c2"
        },
        "redis": {
            "$ref": "#/definitions/RedisModuleOptions.ba465139"
        },
        "server": {
            "properties": {
                "allowOrigins": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "allowReferer": {
                    "type": "string"
                },
                "helmet": {
                    "$ref": "#/definitions/HelmetOptions.7ecdff96"
                },
                "nest": {
                    "$ref": "#/definitions/NestApplicationOptions.cccd1327"
                },
                "port": {
                    "type": "number"
                },
                "prefix": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "swagger": {
            "anyOf": [
                {
                    "allOf": [
                        {
                            "properties": {
                                "prefix": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/ExpressSwaggerCustomOptions.71fbed9f"
                        }
                    ]
                },
                {
                    "allOf": [
                        {
                            "properties": {
                                "prefix": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/FastifySwaggerCustomOptions.69c23819"
                        }
                    ]
                }
            ]
        }
    },
    "type": "object"
}

